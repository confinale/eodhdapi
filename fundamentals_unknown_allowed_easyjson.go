// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package eodhdapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE74dafeDecodeGithubComConfinaleEodhdapi(in *jlexer.Lexer, out *SectorWeightsGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Cyclical":
			(out.Cyclical).UnmarshalEasyJSON(in)
		case "Defensive":
			(out.Defensive).UnmarshalEasyJSON(in)
		case "Sensitive":
			(out.Sensitive).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE74dafeEncodeGithubComConfinaleEodhdapi(out *jwriter.Writer, in SectorWeightsGroup) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Cyclical) != 0 {
		const prefix string = ",\"Cyclical\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v1, v2 := range in.Cyclical {
				if v1 > 0 {
					out.RawByte(',')
				}
				(v2).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Defensive) != 0 {
		const prefix string = ",\"Defensive\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Defensive {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Sensitive) != 0 {
		const prefix string = ",\"Sensitive\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Sensitive {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SectorWeightsGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE74dafeEncodeGithubComConfinaleEodhdapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SectorWeightsGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE74dafeEncodeGithubComConfinaleEodhdapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SectorWeightsGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE74dafeDecodeGithubComConfinaleEodhdapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SectorWeightsGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE74dafeDecodeGithubComConfinaleEodhdapi(l, v)
}
