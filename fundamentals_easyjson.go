// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package eodhdapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	decimal "github.com/shopspring/decimal"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE48f2accDecodeGithubComGituEodhdapi(in *jlexer.Lexer, out *Weight) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Equity_%":
			out.EquityPercent = string(in.String())
		case "Relative_to_Category":
			if in.IsNull() {
				in.Skip()
				out.RelativeToCategory = nil
			} else {
				if out.RelativeToCategory == nil {
					out.RelativeToCategory = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.RelativeToCategory).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi(out *jwriter.Writer, in Weight) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Equity_%\":"
		out.RawString(prefix[1:])
		out.String(string(in.EquityPercent))
	}
	{
		const prefix string = ",\"Relative_to_Category\":"
		out.RawString(prefix)
		if in.RelativeToCategory == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.RelativeToCategory).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Weight) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Weight) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Weight) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Weight) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi1(in *jlexer.Lexer, out *Valuation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TrailingPE":
			if in.IsNull() {
				in.Skip()
				out.TrailingPE = nil
			} else {
				if out.TrailingPE == nil {
					out.TrailingPE = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TrailingPE).UnmarshalJSON(data))
				}
			}
		case "ForwardPE":
			if in.IsNull() {
				in.Skip()
				out.ForwardPE = nil
			} else {
				if out.ForwardPE == nil {
					out.ForwardPE = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForwardPE).UnmarshalJSON(data))
				}
			}
		case "PriceSalesTTM":
			if in.IsNull() {
				in.Skip()
				out.PriceSalesTTM = nil
			} else {
				if out.PriceSalesTTM == nil {
					out.PriceSalesTTM = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PriceSalesTTM).UnmarshalJSON(data))
				}
			}
		case "PriceBookMRQ":
			if in.IsNull() {
				in.Skip()
				out.PriceBookMRQ = nil
			} else {
				if out.PriceBookMRQ == nil {
					out.PriceBookMRQ = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PriceBookMRQ).UnmarshalJSON(data))
				}
			}
		case "EnterpriseValueRevenue":
			if in.IsNull() {
				in.Skip()
				out.EnterpriseValueRevenue = nil
			} else {
				if out.EnterpriseValueRevenue == nil {
					out.EnterpriseValueRevenue = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EnterpriseValueRevenue).UnmarshalJSON(data))
				}
			}
		case "EnterpriseValueEbitda":
			if in.IsNull() {
				in.Skip()
				out.EnterpriseValueEbitda = nil
			} else {
				if out.EnterpriseValueEbitda == nil {
					out.EnterpriseValueEbitda = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EnterpriseValueEbitda).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi1(out *jwriter.Writer, in Valuation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TrailingPE\":"
		out.RawString(prefix[1:])
		if in.TrailingPE == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TrailingPE).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ForwardPE\":"
		out.RawString(prefix)
		if in.ForwardPE == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ForwardPE).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"PriceSalesTTM\":"
		out.RawString(prefix)
		if in.PriceSalesTTM == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PriceSalesTTM).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"PriceBookMRQ\":"
		out.RawString(prefix)
		if in.PriceBookMRQ == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PriceBookMRQ).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"EnterpriseValueRevenue\":"
		out.RawString(prefix)
		if in.EnterpriseValueRevenue == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EnterpriseValueRevenue).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"EnterpriseValueEbitda\":"
		out.RawString(prefix)
		if in.EnterpriseValueEbitda == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EnterpriseValueEbitda).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Valuation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Valuation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Valuation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Valuation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi1(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi2(in *jlexer.Lexer, out *Technicals) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Beta":
			if in.IsNull() {
				in.Skip()
				out.Beta = nil
			} else {
				if out.Beta == nil {
					out.Beta = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Beta).UnmarshalJSON(data))
				}
			}
		case "52WeekHigh":
			if in.IsNull() {
				in.Skip()
				out.FiftyTwoWeekHigh = nil
			} else {
				if out.FiftyTwoWeekHigh == nil {
					out.FiftyTwoWeekHigh = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FiftyTwoWeekHigh).UnmarshalJSON(data))
				}
			}
		case "52WeekLow":
			if in.IsNull() {
				in.Skip()
				out.FiftyTwoWeekLow = nil
			} else {
				if out.FiftyTwoWeekLow == nil {
					out.FiftyTwoWeekLow = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FiftyTwoWeekLow).UnmarshalJSON(data))
				}
			}
		case "50DayMA":
			if in.IsNull() {
				in.Skip()
				out.FiftyDayMA = nil
			} else {
				if out.FiftyDayMA == nil {
					out.FiftyDayMA = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FiftyDayMA).UnmarshalJSON(data))
				}
			}
		case "200DayMA":
			if in.IsNull() {
				in.Skip()
				out.TwoHundredDayMA = nil
			} else {
				if out.TwoHundredDayMA == nil {
					out.TwoHundredDayMA = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TwoHundredDayMA).UnmarshalJSON(data))
				}
			}
		case "SharesShort":
			if in.IsNull() {
				in.Skip()
				out.SharesShort = nil
			} else {
				if out.SharesShort == nil {
					out.SharesShort = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SharesShort).UnmarshalJSON(data))
				}
			}
		case "SharesShortPriorMonth":
			if in.IsNull() {
				in.Skip()
				out.SharesShortPriorMonth = nil
			} else {
				if out.SharesShortPriorMonth == nil {
					out.SharesShortPriorMonth = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SharesShortPriorMonth).UnmarshalJSON(data))
				}
			}
		case "ShortRatio":
			if in.IsNull() {
				in.Skip()
				out.ShortRatio = nil
			} else {
				if out.ShortRatio == nil {
					out.ShortRatio = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ShortRatio).UnmarshalJSON(data))
				}
			}
		case "ShortPercent":
			if in.IsNull() {
				in.Skip()
				out.ShortPercent = nil
			} else {
				if out.ShortPercent == nil {
					out.ShortPercent = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ShortPercent).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi2(out *jwriter.Writer, in Technicals) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Beta\":"
		out.RawString(prefix[1:])
		if in.Beta == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Beta).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"52WeekHigh\":"
		out.RawString(prefix)
		if in.FiftyTwoWeekHigh == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.FiftyTwoWeekHigh).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"52WeekLow\":"
		out.RawString(prefix)
		if in.FiftyTwoWeekLow == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.FiftyTwoWeekLow).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"50DayMA\":"
		out.RawString(prefix)
		if in.FiftyDayMA == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.FiftyDayMA).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"200DayMA\":"
		out.RawString(prefix)
		if in.TwoHundredDayMA == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TwoHundredDayMA).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"SharesShort\":"
		out.RawString(prefix)
		if in.SharesShort == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.SharesShort).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"SharesShortPriorMonth\":"
		out.RawString(prefix)
		if in.SharesShortPriorMonth == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.SharesShortPriorMonth).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ShortRatio\":"
		out.RawString(prefix)
		if in.ShortRatio == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ShortRatio).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ShortPercent\":"
		out.RawString(prefix)
		if in.ShortPercent == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ShortPercent).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Technicals) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Technicals) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Technicals) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Technicals) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi2(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi3(in *jlexer.Lexer, out *SplitsDividends) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ForwardAnnualDividendRate":
			if in.IsNull() {
				in.Skip()
				out.ForwardAnnualDividendRate = nil
			} else {
				if out.ForwardAnnualDividendRate == nil {
					out.ForwardAnnualDividendRate = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForwardAnnualDividendRate).UnmarshalJSON(data))
				}
			}
		case "ForwardAnnualDividendYield":
			if in.IsNull() {
				in.Skip()
				out.ForwardAnnualDividendYield = nil
			} else {
				if out.ForwardAnnualDividendYield == nil {
					out.ForwardAnnualDividendYield = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForwardAnnualDividendYield).UnmarshalJSON(data))
				}
			}
		case "PayoutRatio":
			if in.IsNull() {
				in.Skip()
				out.PayoutRatio = nil
			} else {
				if out.PayoutRatio == nil {
					out.PayoutRatio = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PayoutRatio).UnmarshalJSON(data))
				}
			}
		case "DividendDate":
			out.DividendDate = string(in.String())
		case "ExDividendDate":
			out.ExDividendDate = string(in.String())
		case "LastSplitFactor":
			out.LastSplitFactor = string(in.String())
		case "LastSplitDate":
			out.LastSplitDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi3(out *jwriter.Writer, in SplitsDividends) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ForwardAnnualDividendRate\":"
		out.RawString(prefix[1:])
		if in.ForwardAnnualDividendRate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ForwardAnnualDividendRate).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ForwardAnnualDividendYield\":"
		out.RawString(prefix)
		if in.ForwardAnnualDividendYield == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ForwardAnnualDividendYield).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"PayoutRatio\":"
		out.RawString(prefix)
		if in.PayoutRatio == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PayoutRatio).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"DividendDate\":"
		out.RawString(prefix)
		out.String(string(in.DividendDate))
	}
	{
		const prefix string = ",\"ExDividendDate\":"
		out.RawString(prefix)
		out.String(string(in.ExDividendDate))
	}
	{
		const prefix string = ",\"LastSplitFactor\":"
		out.RawString(prefix)
		out.String(string(in.LastSplitFactor))
	}
	{
		const prefix string = ",\"LastSplitDate\":"
		out.RawString(prefix)
		out.String(string(in.LastSplitDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SplitsDividends) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SplitsDividends) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SplitsDividends) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SplitsDividends) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi3(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi4(in *jlexer.Lexer, out *MorningStar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ratio":
			out.Ratio = int(in.Int())
		case "Category_Benchmark":
			out.CategoryBenchmark = string(in.String())
		case "Sustainability_Ratio":
			out.SustainabilityRatio = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi4(out *jwriter.Writer, in MorningStar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Ratio\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Ratio))
	}
	{
		const prefix string = ",\"Category_Benchmark\":"
		out.RawString(prefix)
		out.String(string(in.CategoryBenchmark))
	}
	{
		const prefix string = ",\"Sustainability_Ratio\":"
		out.RawString(prefix)
		out.Int(int(in.SustainabilityRatio))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MorningStar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MorningStar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MorningStar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MorningStar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi4(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi5(in *jlexer.Lexer, out *IncomeStatementInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "filing_date":
			if in.IsNull() {
				in.Skip()
				out.FilingDate = nil
			} else {
				if out.FilingDate == nil {
					out.FilingDate = new(string)
				}
				*out.FilingDate = string(in.String())
			}
		case "researchDevelopment":
			if in.IsNull() {
				in.Skip()
				out.ResearchDevelopment = nil
			} else {
				if out.ResearchDevelopment == nil {
					out.ResearchDevelopment = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ResearchDevelopment).UnmarshalJSON(data))
				}
			}
		case "effectOfAccountingCharges":
			if in.IsNull() {
				in.Skip()
				out.EffectOfAccountingCharges = nil
			} else {
				if out.EffectOfAccountingCharges == nil {
					out.EffectOfAccountingCharges = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EffectOfAccountingCharges).UnmarshalJSON(data))
				}
			}
		case "incomeBeforeTax":
			if in.IsNull() {
				in.Skip()
				out.IncomeBeforeTax = nil
			} else {
				if out.IncomeBeforeTax == nil {
					out.IncomeBeforeTax = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.IncomeBeforeTax).UnmarshalJSON(data))
				}
			}
		case "minorityInterest":
			if in.IsNull() {
				in.Skip()
				out.MinorityInterest = nil
			} else {
				if out.MinorityInterest == nil {
					out.MinorityInterest = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MinorityInterest).UnmarshalJSON(data))
				}
			}
		case "netIncome":
			if in.IsNull() {
				in.Skip()
				out.NetIncome = nil
			} else {
				if out.NetIncome == nil {
					out.NetIncome = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NetIncome).UnmarshalJSON(data))
				}
			}
		case "sellingGeneralAdministrative":
			if in.IsNull() {
				in.Skip()
				out.SellingGeneralAdministrative = nil
			} else {
				if out.SellingGeneralAdministrative == nil {
					out.SellingGeneralAdministrative = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SellingGeneralAdministrative).UnmarshalJSON(data))
				}
			}
		case "grossProfit":
			if in.IsNull() {
				in.Skip()
				out.GrossProfit = nil
			} else {
				if out.GrossProfit == nil {
					out.GrossProfit = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.GrossProfit).UnmarshalJSON(data))
				}
			}
		case "ebit":
			if in.IsNull() {
				in.Skip()
				out.Ebit = nil
			} else {
				if out.Ebit == nil {
					out.Ebit = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Ebit).UnmarshalJSON(data))
				}
			}
		case "operatingIncome":
			if in.IsNull() {
				in.Skip()
				out.OperatingIncome = nil
			} else {
				if out.OperatingIncome == nil {
					out.OperatingIncome = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OperatingIncome).UnmarshalJSON(data))
				}
			}
		case "otherOperatingExpenses":
			if in.IsNull() {
				in.Skip()
				out.OtherOperatingExpenses = nil
			} else {
				if out.OtherOperatingExpenses == nil {
					out.OtherOperatingExpenses = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OtherOperatingExpenses).UnmarshalJSON(data))
				}
			}
		case "interestExpense":
			if in.IsNull() {
				in.Skip()
				out.InterestExpense = nil
			} else {
				if out.InterestExpense == nil {
					out.InterestExpense = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.InterestExpense).UnmarshalJSON(data))
				}
			}
		case "extraordinaryItems":
			if in.IsNull() {
				in.Skip()
				out.ExtraordinaryItems = nil
			} else {
				if out.ExtraordinaryItems == nil {
					out.ExtraordinaryItems = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExtraordinaryItems).UnmarshalJSON(data))
				}
			}
		case "nonRecurring":
			if in.IsNull() {
				in.Skip()
				out.NonRecurring = nil
			} else {
				if out.NonRecurring == nil {
					out.NonRecurring = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NonRecurring).UnmarshalJSON(data))
				}
			}
		case "otherItems":
			if in.IsNull() {
				in.Skip()
				out.OtherItems = nil
			} else {
				if out.OtherItems == nil {
					out.OtherItems = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OtherItems).UnmarshalJSON(data))
				}
			}
		case "incomeTaxExpense":
			if in.IsNull() {
				in.Skip()
				out.IncomeTaxExpense = nil
			} else {
				if out.IncomeTaxExpense == nil {
					out.IncomeTaxExpense = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.IncomeTaxExpense).UnmarshalJSON(data))
				}
			}
		case "totalRevenue":
			if in.IsNull() {
				in.Skip()
				out.TotalRevenue = nil
			} else {
				if out.TotalRevenue == nil {
					out.TotalRevenue = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TotalRevenue).UnmarshalJSON(data))
				}
			}
		case "totalOperatingExpenses":
			if in.IsNull() {
				in.Skip()
				out.TotalOperatingExpenses = nil
			} else {
				if out.TotalOperatingExpenses == nil {
					out.TotalOperatingExpenses = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TotalOperatingExpenses).UnmarshalJSON(data))
				}
			}
		case "costOfRevenue":
			if in.IsNull() {
				in.Skip()
				out.CostOfRevenue = nil
			} else {
				if out.CostOfRevenue == nil {
					out.CostOfRevenue = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CostOfRevenue).UnmarshalJSON(data))
				}
			}
		case "totalOtherIncomeExpenseNet":
			if in.IsNull() {
				in.Skip()
				out.TotalOtherIncomeExpenseNet = nil
			} else {
				if out.TotalOtherIncomeExpenseNet == nil {
					out.TotalOtherIncomeExpenseNet = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TotalOtherIncomeExpenseNet).UnmarshalJSON(data))
				}
			}
		case "discontinuedOperations":
			if in.IsNull() {
				in.Skip()
				out.DiscontinuedOperations = nil
			} else {
				if out.DiscontinuedOperations == nil {
					out.DiscontinuedOperations = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DiscontinuedOperations).UnmarshalJSON(data))
				}
			}
		case "netIncomeFromContinuingOps":
			if in.IsNull() {
				in.Skip()
				out.NetIncomeFromContinuingOps = nil
			} else {
				if out.NetIncomeFromContinuingOps == nil {
					out.NetIncomeFromContinuingOps = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NetIncomeFromContinuingOps).UnmarshalJSON(data))
				}
			}
		case "netIncomeApplicableToCommonShares":
			if in.IsNull() {
				in.Skip()
				out.NetIncomeApplicableToCommonShares = nil
			} else {
				if out.NetIncomeApplicableToCommonShares == nil {
					out.NetIncomeApplicableToCommonShares = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NetIncomeApplicableToCommonShares).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi5(out *jwriter.Writer, in IncomeStatementInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"filing_date\":"
		out.RawString(prefix)
		if in.FilingDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FilingDate))
		}
	}
	{
		const prefix string = ",\"researchDevelopment\":"
		out.RawString(prefix)
		if in.ResearchDevelopment == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ResearchDevelopment).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"effectOfAccountingCharges\":"
		out.RawString(prefix)
		if in.EffectOfAccountingCharges == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EffectOfAccountingCharges).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"incomeBeforeTax\":"
		out.RawString(prefix)
		if in.IncomeBeforeTax == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.IncomeBeforeTax).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"minorityInterest\":"
		out.RawString(prefix)
		if in.MinorityInterest == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.MinorityInterest).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"netIncome\":"
		out.RawString(prefix)
		if in.NetIncome == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NetIncome).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"sellingGeneralAdministrative\":"
		out.RawString(prefix)
		if in.SellingGeneralAdministrative == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.SellingGeneralAdministrative).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"grossProfit\":"
		out.RawString(prefix)
		if in.GrossProfit == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.GrossProfit).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ebit\":"
		out.RawString(prefix)
		if in.Ebit == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Ebit).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"operatingIncome\":"
		out.RawString(prefix)
		if in.OperatingIncome == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OperatingIncome).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"otherOperatingExpenses\":"
		out.RawString(prefix)
		if in.OtherOperatingExpenses == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OtherOperatingExpenses).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"interestExpense\":"
		out.RawString(prefix)
		if in.InterestExpense == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.InterestExpense).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"extraordinaryItems\":"
		out.RawString(prefix)
		if in.ExtraordinaryItems == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ExtraordinaryItems).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"nonRecurring\":"
		out.RawString(prefix)
		if in.NonRecurring == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NonRecurring).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"otherItems\":"
		out.RawString(prefix)
		if in.OtherItems == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OtherItems).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"incomeTaxExpense\":"
		out.RawString(prefix)
		if in.IncomeTaxExpense == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.IncomeTaxExpense).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"totalRevenue\":"
		out.RawString(prefix)
		if in.TotalRevenue == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TotalRevenue).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"totalOperatingExpenses\":"
		out.RawString(prefix)
		if in.TotalOperatingExpenses == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TotalOperatingExpenses).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"costOfRevenue\":"
		out.RawString(prefix)
		if in.CostOfRevenue == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CostOfRevenue).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"totalOtherIncomeExpenseNet\":"
		out.RawString(prefix)
		if in.TotalOtherIncomeExpenseNet == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TotalOtherIncomeExpenseNet).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"discontinuedOperations\":"
		out.RawString(prefix)
		if in.DiscontinuedOperations == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DiscontinuedOperations).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"netIncomeFromContinuingOps\":"
		out.RawString(prefix)
		if in.NetIncomeFromContinuingOps == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NetIncomeFromContinuingOps).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"netIncomeApplicableToCommonShares\":"
		out.RawString(prefix)
		if in.NetIncomeApplicableToCommonShares == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NetIncomeApplicableToCommonShares).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncomeStatementInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncomeStatementInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncomeStatementInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncomeStatementInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi5(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi6(in *jlexer.Lexer, out *IncomeStatement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency_symbol":
			out.CurrencySymbol = string(in.String())
		case "quarterly_last_0":
			(out.QuarterlyLast0).UnmarshalEasyJSON(in)
		case "quarterly_last_1":
			(out.QuarterlyLast1).UnmarshalEasyJSON(in)
		case "quarterly_last_2":
			(out.QuarterlyLast2).UnmarshalEasyJSON(in)
		case "quarterly_last_3":
			(out.QuarterlyLast3).UnmarshalEasyJSON(in)
		case "yearly_last_0":
			(out.YearlyLast0).UnmarshalEasyJSON(in)
		case "yearly_last_1":
			(out.YearlyLast1).UnmarshalEasyJSON(in)
		case "yearly_last_2":
			(out.YearlyLast2).UnmarshalEasyJSON(in)
		case "yearly_last_3":
			(out.YearlyLast3).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi6(out *jwriter.Writer, in IncomeStatement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currency_symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.CurrencySymbol))
	}
	{
		const prefix string = ",\"quarterly_last_0\":"
		out.RawString(prefix)
		(in.QuarterlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_1\":"
		out.RawString(prefix)
		(in.QuarterlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_2\":"
		out.RawString(prefix)
		(in.QuarterlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_3\":"
		out.RawString(prefix)
		(in.QuarterlyLast3).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_0\":"
		out.RawString(prefix)
		(in.YearlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_1\":"
		out.RawString(prefix)
		(in.YearlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_2\":"
		out.RawString(prefix)
		(in.YearlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_3\":"
		out.RawString(prefix)
		(in.YearlyLast3).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncomeStatement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncomeStatement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncomeStatement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncomeStatement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi6(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi7(in *jlexer.Lexer, out *Holding) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Assets_%":
			if in.IsNull() {
				in.Skip()
				out.AssetsPercent = nil
			} else {
				if out.AssetsPercent == nil {
					out.AssetsPercent = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.AssetsPercent).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi7(out *jwriter.Writer, in Holding) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Assets_%\":"
		out.RawString(prefix)
		if in.AssetsPercent == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.AssetsPercent).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Holding) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Holding) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Holding) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Holding) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi7(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi8(in *jlexer.Lexer, out *Highlights) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MarketCapitalization":
			if in.IsNull() {
				in.Skip()
				out.MarketCapitalization = nil
			} else {
				if out.MarketCapitalization == nil {
					out.MarketCapitalization = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MarketCapitalization).UnmarshalJSON(data))
				}
			}
		case "MarketCapitalizationMln":
			out.MarketCapitalizationMln = string(in.String())
		case "EBITDA":
			if in.IsNull() {
				in.Skip()
				out.EBITDA = nil
			} else {
				if out.EBITDA == nil {
					out.EBITDA = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EBITDA).UnmarshalJSON(data))
				}
			}
		case "PERatio":
			if in.IsNull() {
				in.Skip()
				out.PERatio = nil
			} else {
				if out.PERatio == nil {
					out.PERatio = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PERatio).UnmarshalJSON(data))
				}
			}
		case "PEGRatio":
			if in.IsNull() {
				in.Skip()
				out.PEGRatio = nil
			} else {
				if out.PEGRatio == nil {
					out.PEGRatio = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PEGRatio).UnmarshalJSON(data))
				}
			}
		case "WallStreetTargetPrice":
			if in.IsNull() {
				in.Skip()
				out.WallStreetTargetPrice = nil
			} else {
				if out.WallStreetTargetPrice == nil {
					out.WallStreetTargetPrice = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.WallStreetTargetPrice).UnmarshalJSON(data))
				}
			}
		case "BookValue":
			if in.IsNull() {
				in.Skip()
				out.BookValue = nil
			} else {
				if out.BookValue == nil {
					out.BookValue = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BookValue).UnmarshalJSON(data))
				}
			}
		case "DividendShare":
			if in.IsNull() {
				in.Skip()
				out.DividendShare = nil
			} else {
				if out.DividendShare == nil {
					out.DividendShare = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DividendShare).UnmarshalJSON(data))
				}
			}
		case "DividendYield":
			if in.IsNull() {
				in.Skip()
				out.DividendYield = nil
			} else {
				if out.DividendYield == nil {
					out.DividendYield = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DividendYield).UnmarshalJSON(data))
				}
			}
		case "EarningsShare":
			if in.IsNull() {
				in.Skip()
				out.EarningsShare = nil
			} else {
				if out.EarningsShare == nil {
					out.EarningsShare = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EarningsShare).UnmarshalJSON(data))
				}
			}
		case "EPSEstimateCurrentYear":
			if in.IsNull() {
				in.Skip()
				out.EPSEstimateCurrentYear = nil
			} else {
				if out.EPSEstimateCurrentYear == nil {
					out.EPSEstimateCurrentYear = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EPSEstimateCurrentYear).UnmarshalJSON(data))
				}
			}
		case "EPSEstimateNextYear":
			if in.IsNull() {
				in.Skip()
				out.EPSEstimateNextYear = nil
			} else {
				if out.EPSEstimateNextYear == nil {
					out.EPSEstimateNextYear = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EPSEstimateNextYear).UnmarshalJSON(data))
				}
			}
		case "EPSEstimateNextQuarter":
			if in.IsNull() {
				in.Skip()
				out.EPSEstimateNextQuarter = nil
			} else {
				if out.EPSEstimateNextQuarter == nil {
					out.EPSEstimateNextQuarter = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EPSEstimateNextQuarter).UnmarshalJSON(data))
				}
			}
		case "MostRecentQuarter":
			out.MostRecentQuarter = string(in.String())
		case "ProfitMargin":
			if in.IsNull() {
				in.Skip()
				out.ProfitMargin = nil
			} else {
				if out.ProfitMargin == nil {
					out.ProfitMargin = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ProfitMargin).UnmarshalJSON(data))
				}
			}
		case "OperatingMarginTTM":
			if in.IsNull() {
				in.Skip()
				out.OperatingMarginTTM = nil
			} else {
				if out.OperatingMarginTTM == nil {
					out.OperatingMarginTTM = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OperatingMarginTTM).UnmarshalJSON(data))
				}
			}
		case "ReturnOnAssetsTTM":
			if in.IsNull() {
				in.Skip()
				out.ReturnOnAssetsTTM = nil
			} else {
				if out.ReturnOnAssetsTTM == nil {
					out.ReturnOnAssetsTTM = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReturnOnAssetsTTM).UnmarshalJSON(data))
				}
			}
		case "ReturnOnEquityTTM":
			if in.IsNull() {
				in.Skip()
				out.ReturnOnEquityTTM = nil
			} else {
				if out.ReturnOnEquityTTM == nil {
					out.ReturnOnEquityTTM = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReturnOnEquityTTM).UnmarshalJSON(data))
				}
			}
		case "RevenueTTM":
			if in.IsNull() {
				in.Skip()
				out.RevenueTTM = nil
			} else {
				if out.RevenueTTM == nil {
					out.RevenueTTM = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.RevenueTTM).UnmarshalJSON(data))
				}
			}
		case "RevenuePerShareTTM":
			if in.IsNull() {
				in.Skip()
				out.RevenuePerShareTTM = nil
			} else {
				if out.RevenuePerShareTTM == nil {
					out.RevenuePerShareTTM = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.RevenuePerShareTTM).UnmarshalJSON(data))
				}
			}
		case "QuarterlyRevenueGrowthYOY":
			if in.IsNull() {
				in.Skip()
				out.QuarterlyRevenueGrowthYOY = nil
			} else {
				if out.QuarterlyRevenueGrowthYOY == nil {
					out.QuarterlyRevenueGrowthYOY = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.QuarterlyRevenueGrowthYOY).UnmarshalJSON(data))
				}
			}
		case "GrossProfitTTM":
			if in.IsNull() {
				in.Skip()
				out.GrossProfitTTM = nil
			} else {
				if out.GrossProfitTTM == nil {
					out.GrossProfitTTM = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.GrossProfitTTM).UnmarshalJSON(data))
				}
			}
		case "DilutedEpsTTM":
			if in.IsNull() {
				in.Skip()
				out.DilutedEpsTTM = nil
			} else {
				if out.DilutedEpsTTM == nil {
					out.DilutedEpsTTM = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DilutedEpsTTM).UnmarshalJSON(data))
				}
			}
		case "QuarterlyEarningsGrowthYOY":
			if in.IsNull() {
				in.Skip()
				out.QuarterlyEarningsGrowthYOY = nil
			} else {
				if out.QuarterlyEarningsGrowthYOY == nil {
					out.QuarterlyEarningsGrowthYOY = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.QuarterlyEarningsGrowthYOY).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi8(out *jwriter.Writer, in Highlights) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MarketCapitalization\":"
		out.RawString(prefix[1:])
		if in.MarketCapitalization == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.MarketCapitalization).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"MarketCapitalizationMln\":"
		out.RawString(prefix)
		out.String(string(in.MarketCapitalizationMln))
	}
	{
		const prefix string = ",\"EBITDA\":"
		out.RawString(prefix)
		if in.EBITDA == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EBITDA).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"PERatio\":"
		out.RawString(prefix)
		if in.PERatio == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PERatio).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"PEGRatio\":"
		out.RawString(prefix)
		if in.PEGRatio == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PEGRatio).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"WallStreetTargetPrice\":"
		out.RawString(prefix)
		if in.WallStreetTargetPrice == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.WallStreetTargetPrice).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"BookValue\":"
		out.RawString(prefix)
		if in.BookValue == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.BookValue).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"DividendShare\":"
		out.RawString(prefix)
		if in.DividendShare == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DividendShare).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"DividendYield\":"
		out.RawString(prefix)
		if in.DividendYield == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DividendYield).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"EarningsShare\":"
		out.RawString(prefix)
		if in.EarningsShare == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EarningsShare).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"EPSEstimateCurrentYear\":"
		out.RawString(prefix)
		if in.EPSEstimateCurrentYear == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EPSEstimateCurrentYear).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"EPSEstimateNextYear\":"
		out.RawString(prefix)
		if in.EPSEstimateNextYear == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EPSEstimateNextYear).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"EPSEstimateNextQuarter\":"
		out.RawString(prefix)
		if in.EPSEstimateNextQuarter == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EPSEstimateNextQuarter).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"MostRecentQuarter\":"
		out.RawString(prefix)
		out.String(string(in.MostRecentQuarter))
	}
	{
		const prefix string = ",\"ProfitMargin\":"
		out.RawString(prefix)
		if in.ProfitMargin == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ProfitMargin).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"OperatingMarginTTM\":"
		out.RawString(prefix)
		if in.OperatingMarginTTM == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OperatingMarginTTM).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ReturnOnAssetsTTM\":"
		out.RawString(prefix)
		if in.ReturnOnAssetsTTM == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReturnOnAssetsTTM).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ReturnOnEquityTTM\":"
		out.RawString(prefix)
		if in.ReturnOnEquityTTM == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReturnOnEquityTTM).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"RevenueTTM\":"
		out.RawString(prefix)
		if in.RevenueTTM == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.RevenueTTM).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"RevenuePerShareTTM\":"
		out.RawString(prefix)
		if in.RevenuePerShareTTM == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.RevenuePerShareTTM).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"QuarterlyRevenueGrowthYOY\":"
		out.RawString(prefix)
		if in.QuarterlyRevenueGrowthYOY == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.QuarterlyRevenueGrowthYOY).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"GrossProfitTTM\":"
		out.RawString(prefix)
		if in.GrossProfitTTM == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.GrossProfitTTM).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"DilutedEpsTTM\":"
		out.RawString(prefix)
		if in.DilutedEpsTTM == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DilutedEpsTTM).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"QuarterlyEarningsGrowthYOY\":"
		out.RawString(prefix)
		if in.QuarterlyEarningsGrowthYOY == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.QuarterlyEarningsGrowthYOY).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Highlights) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Highlights) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Highlights) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Highlights) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi8(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi9(in *jlexer.Lexer, out *General) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Exchange":
			out.Exchange = string(in.String())
		case "CurrencyCode":
			out.CurrencyCode = string(in.String())
		case "CurrencyName":
			out.CurrencyName = string(in.String())
		case "CurrencySymbol":
			out.CurrencySymbol = string(in.String())
		case "CountryName":
			out.CountryName = string(in.String())
		case "CountryISO":
			out.CountryISO = string(in.String())
		case "Sector":
			out.Sector = string(in.String())
		case "Industry":
			out.Industry = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "ISIN":
			if in.IsNull() {
				in.Skip()
				out.ISIN = nil
			} else {
				if out.ISIN == nil {
					out.ISIN = new(string)
				}
				*out.ISIN = string(in.String())
			}
		case "FullTimeEmployees":
			if in.IsNull() {
				in.Skip()
				out.FullTimeEmployees = nil
			} else {
				if out.FullTimeEmployees == nil {
					out.FullTimeEmployees = new(int)
				}
				*out.FullTimeEmployees = int(in.Int())
			}
		case "UpdatedAt":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(string)
				}
				*out.UpdatedAt = string(in.String())
			}
		case "CUSIP":
			if in.IsNull() {
				in.Skip()
				out.Cusip = nil
			} else {
				if out.Cusip == nil {
					out.Cusip = new(string)
				}
				*out.Cusip = string(in.String())
			}
		case "LogoURL":
			if in.IsNull() {
				in.Skip()
				out.LogoURL = nil
			} else {
				if out.LogoURL == nil {
					out.LogoURL = new(string)
				}
				*out.LogoURL = string(in.String())
			}
		case "CIK":
			if in.IsNull() {
				in.Skip()
				out.CIK = nil
			} else {
				if out.CIK == nil {
					out.CIK = new(string)
				}
				*out.CIK = string(in.String())
			}
		case "EmployerIdNumber":
			if in.IsNull() {
				in.Skip()
				out.EmployerIDNumber = nil
			} else {
				if out.EmployerIDNumber == nil {
					out.EmployerIDNumber = new(string)
				}
				*out.EmployerIDNumber = string(in.String())
			}
		case "FiscalYearEnd":
			if in.IsNull() {
				in.Skip()
				out.FiscalYearEnd = nil
			} else {
				if out.FiscalYearEnd == nil {
					out.FiscalYearEnd = new(string)
				}
				*out.FiscalYearEnd = string(in.String())
			}
		case "IPODate":
			if in.IsNull() {
				in.Skip()
				out.IPODate = nil
			} else {
				if out.IPODate == nil {
					out.IPODate = new(string)
				}
				*out.IPODate = string(in.String())
			}
		case "InternationalDomestic":
			if in.IsNull() {
				in.Skip()
				out.InternationalDomestic = nil
			} else {
				if out.InternationalDomestic == nil {
					out.InternationalDomestic = new(string)
				}
				*out.InternationalDomestic = string(in.String())
			}
		case "GicSector":
			if in.IsNull() {
				in.Skip()
				out.GicSector = nil
			} else {
				if out.GicSector == nil {
					out.GicSector = new(string)
				}
				*out.GicSector = string(in.String())
			}
		case "GicGroup":
			if in.IsNull() {
				in.Skip()
				out.GicGroup = nil
			} else {
				if out.GicGroup == nil {
					out.GicGroup = new(string)
				}
				*out.GicGroup = string(in.String())
			}
		case "GicIndustry":
			if in.IsNull() {
				in.Skip()
				out.GicIndustry = nil
			} else {
				if out.GicIndustry == nil {
					out.GicIndustry = new(string)
				}
				*out.GicIndustry = string(in.String())
			}
		case "GicSubIndustry":
			if in.IsNull() {
				in.Skip()
				out.GicSubIndustry = nil
			} else {
				if out.GicSubIndustry == nil {
					out.GicSubIndustry = new(string)
				}
				*out.GicSubIndustry = string(in.String())
			}
		case "Address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "Phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "WebURL":
			if in.IsNull() {
				in.Skip()
				out.WebURL = nil
			} else {
				if out.WebURL == nil {
					out.WebURL = new(string)
				}
				*out.WebURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi9(out *jwriter.Writer, in General) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Exchange\":"
		out.RawString(prefix)
		out.String(string(in.Exchange))
	}
	{
		const prefix string = ",\"CurrencyCode\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyCode))
	}
	{
		const prefix string = ",\"CurrencyName\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyName))
	}
	{
		const prefix string = ",\"CurrencySymbol\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbol))
	}
	{
		const prefix string = ",\"CountryName\":"
		out.RawString(prefix)
		out.String(string(in.CountryName))
	}
	{
		const prefix string = ",\"CountryISO\":"
		out.RawString(prefix)
		out.String(string(in.CountryISO))
	}
	{
		const prefix string = ",\"Sector\":"
		out.RawString(prefix)
		out.String(string(in.Sector))
	}
	{
		const prefix string = ",\"Industry\":"
		out.RawString(prefix)
		out.String(string(in.Industry))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"ISIN\":"
		out.RawString(prefix)
		if in.ISIN == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ISIN))
		}
	}
	{
		const prefix string = ",\"FullTimeEmployees\":"
		out.RawString(prefix)
		if in.FullTimeEmployees == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.FullTimeEmployees))
		}
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		if in.UpdatedAt == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.UpdatedAt))
		}
	}
	{
		const prefix string = ",\"CUSIP\":"
		out.RawString(prefix)
		if in.Cusip == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Cusip))
		}
	}
	{
		const prefix string = ",\"LogoURL\":"
		out.RawString(prefix)
		if in.LogoURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.LogoURL))
		}
	}
	{
		const prefix string = ",\"CIK\":"
		out.RawString(prefix)
		if in.CIK == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.CIK))
		}
	}
	{
		const prefix string = ",\"EmployerIdNumber\":"
		out.RawString(prefix)
		if in.EmployerIDNumber == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.EmployerIDNumber))
		}
	}
	{
		const prefix string = ",\"FiscalYearEnd\":"
		out.RawString(prefix)
		if in.FiscalYearEnd == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FiscalYearEnd))
		}
	}
	{
		const prefix string = ",\"IPODate\":"
		out.RawString(prefix)
		if in.IPODate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.IPODate))
		}
	}
	{
		const prefix string = ",\"InternationalDomestic\":"
		out.RawString(prefix)
		if in.InternationalDomestic == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.InternationalDomestic))
		}
	}
	{
		const prefix string = ",\"GicSector\":"
		out.RawString(prefix)
		if in.GicSector == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GicSector))
		}
	}
	{
		const prefix string = ",\"GicGroup\":"
		out.RawString(prefix)
		if in.GicGroup == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GicGroup))
		}
	}
	{
		const prefix string = ",\"GicIndustry\":"
		out.RawString(prefix)
		if in.GicIndustry == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GicIndustry))
		}
	}
	{
		const prefix string = ",\"GicSubIndustry\":"
		out.RawString(prefix)
		if in.GicSubIndustry == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GicSubIndustry))
		}
	}
	{
		const prefix string = ",\"Address\":"
		out.RawString(prefix)
		if in.Address == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Address))
		}
	}
	{
		const prefix string = ",\"Phone\":"
		out.RawString(prefix)
		if in.Phone == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Phone))
		}
	}
	{
		const prefix string = ",\"WebURL\":"
		out.RawString(prefix)
		if in.WebURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.WebURL))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v General) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v General) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *General) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *General) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi9(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi10(in *jlexer.Lexer, out *Fundamentals) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LastUpdate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastUpdate).UnmarshalJSON(data))
			}
		case "Ticker":
			out.Ticker = string(in.String())
		case "General":
			(out.General).UnmarshalEasyJSON(in)
		case "Highlights":
			(out.Highlights).UnmarshalEasyJSON(in)
		case "Valuation":
			(out.Valuation).UnmarshalEasyJSON(in)
		case "Technicals":
			(out.Technicals).UnmarshalEasyJSON(in)
		case "SplitsDividends":
			(out.SplitsDividends).UnmarshalEasyJSON(in)
		case "Earnings":
			(out.Earnings).UnmarshalEasyJSON(in)
		case "Financials":
			(out.Financials).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi10(out *jwriter.Writer, in Fundamentals) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LastUpdate\":"
		out.RawString(prefix[1:])
		out.Raw((in.LastUpdate).MarshalJSON())
	}
	{
		const prefix string = ",\"Ticker\":"
		out.RawString(prefix)
		out.String(string(in.Ticker))
	}
	{
		const prefix string = ",\"General\":"
		out.RawString(prefix)
		(in.General).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Highlights\":"
		out.RawString(prefix)
		(in.Highlights).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Valuation\":"
		out.RawString(prefix)
		(in.Valuation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Technicals\":"
		out.RawString(prefix)
		(in.Technicals).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"SplitsDividends\":"
		out.RawString(prefix)
		(in.SplitsDividends).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Earnings\":"
		out.RawString(prefix)
		(in.Earnings).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Financials\":"
		out.RawString(prefix)
		(in.Financials).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Fundamentals) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fundamentals) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Fundamentals) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fundamentals) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi10(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi11(in *jlexer.Lexer, out *Financials) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Balance_Sheet":
			(out.BalanceSheet).UnmarshalEasyJSON(in)
		case "Cash_Flow":
			(out.CashFlow).UnmarshalEasyJSON(in)
		case "Income_Statement":
			(out.IncomeStatement).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi11(out *jwriter.Writer, in Financials) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Balance_Sheet\":"
		out.RawString(prefix[1:])
		(in.BalanceSheet).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Cash_Flow\":"
		out.RawString(prefix)
		(in.CashFlow).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Income_Statement\":"
		out.RawString(prefix)
		(in.IncomeStatement).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Financials) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Financials) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Financials) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Financials) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi11(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi12(in *jlexer.Lexer, out *EarningsInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "epsActual":
			if in.IsNull() {
				in.Skip()
				out.EpsActual = nil
			} else {
				if out.EpsActual == nil {
					out.EpsActual = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EpsActual).UnmarshalJSON(data))
				}
			}
		case "epsEstimate":
			if in.IsNull() {
				in.Skip()
				out.EpsEstimate = nil
			} else {
				if out.EpsEstimate == nil {
					out.EpsEstimate = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EpsEstimate).UnmarshalJSON(data))
				}
			}
		case "epsDifference":
			if in.IsNull() {
				in.Skip()
				out.EpsDifference = nil
			} else {
				if out.EpsDifference == nil {
					out.EpsDifference = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EpsDifference).UnmarshalJSON(data))
				}
			}
		case "surprisePercent":
			if in.IsNull() {
				in.Skip()
				out.SurprisePercent = nil
			} else {
				if out.SurprisePercent == nil {
					out.SurprisePercent = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SurprisePercent).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi12(out *jwriter.Writer, in EarningsInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"epsActual\":"
		out.RawString(prefix)
		if in.EpsActual == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EpsActual).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"epsEstimate\":"
		out.RawString(prefix)
		if in.EpsEstimate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EpsEstimate).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"epsDifference\":"
		out.RawString(prefix)
		if in.EpsDifference == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EpsDifference).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"surprisePercent\":"
		out.RawString(prefix)
		if in.SurprisePercent == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.SurprisePercent).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EarningsInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EarningsInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EarningsInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EarningsInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi12(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi13(in *jlexer.Lexer, out *Earnings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Last_0":
			(out.Last0).UnmarshalEasyJSON(in)
		case "Last_1":
			(out.Last1).UnmarshalEasyJSON(in)
		case "Last_2":
			(out.Last2).UnmarshalEasyJSON(in)
		case "Last_3":
			(out.Last3).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi13(out *jwriter.Writer, in Earnings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Last_0\":"
		out.RawString(prefix[1:])
		(in.Last0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Last_1\":"
		out.RawString(prefix)
		(in.Last1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Last_2\":"
		out.RawString(prefix)
		(in.Last2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Last_3\":"
		out.RawString(prefix)
		(in.Last3).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Earnings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Earnings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Earnings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Earnings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi13(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi14(in *jlexer.Lexer, out *ETFData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ISIN":
			out.ISIN = string(in.String())
		case "Company_Name":
			out.CompanyName = string(in.String())
		case "Company_URL":
			out.CompanyURL = string(in.String())
		case "ETF_URL":
			out.ETFURL = string(in.String())
		case "Yield":
			out.Yield = string(in.String())
		case "Dividend_Paying_Frequency":
			out.DividendPayingFrequency = string(in.String())
		case "Inception_Date":
			out.InceptionDate = string(in.String())
		case "Max_Annual_Mgmt_Charge":
			out.MaxAnnualMgmtCharge = string(in.String())
		case "Ongoing_Charge":
			out.OngoingCharge = string(in.String())
		case "Date_Ongoing_Charge":
			out.DateOngoingCharge = string(in.String())
		case "NetExpenseRatio":
			out.NetExpenseRatio = string(in.String())
		case "AnnualHoldingsTurnover":
			out.AnnualHoldingsTurnover = string(in.String())
		case "TotalAssets":
			out.TotalAssets = string(in.String())
		case "Average_Mkt_Cap_Mil":
			out.AverageMktCapMil = string(in.String())
		case "Asset_Allocation":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AssetAllocation = make(map[string]Allocation)
				} else {
					out.AssetAllocation = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 Allocation
					(v1).UnmarshalEasyJSON(in)
					(out.AssetAllocation)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "World_Regions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.WorldRegions = make(map[string]Weight)
				} else {
					out.WorldRegions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 Weight
					(v2).UnmarshalEasyJSON(in)
					(out.WorldRegions)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Sector_Weights":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.SectorWeights = make(map[string]Weight)
				} else {
					out.SectorWeights = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 Weight
					(v3).UnmarshalEasyJSON(in)
					(out.SectorWeights)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Top_10_Holdings":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Top10Holdings = make(map[string]Holding)
				} else {
					out.Top10Holdings = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 Holding
					(v4).UnmarshalEasyJSON(in)
					(out.Top10Holdings)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Holdings":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Holdings = make(map[string]Holding)
				} else {
					out.Holdings = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 Holding
					(v5).UnmarshalEasyJSON(in)
					(out.Holdings)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "MorningStar":
			(out.MorningStar).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi14(out *jwriter.Writer, in ETFData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ISIN\":"
		out.RawString(prefix[1:])
		out.String(string(in.ISIN))
	}
	{
		const prefix string = ",\"Company_Name\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"Company_URL\":"
		out.RawString(prefix)
		out.String(string(in.CompanyURL))
	}
	{
		const prefix string = ",\"ETF_URL\":"
		out.RawString(prefix)
		out.String(string(in.ETFURL))
	}
	{
		const prefix string = ",\"Yield\":"
		out.RawString(prefix)
		out.String(string(in.Yield))
	}
	{
		const prefix string = ",\"Dividend_Paying_Frequency\":"
		out.RawString(prefix)
		out.String(string(in.DividendPayingFrequency))
	}
	{
		const prefix string = ",\"Inception_Date\":"
		out.RawString(prefix)
		out.String(string(in.InceptionDate))
	}
	{
		const prefix string = ",\"Max_Annual_Mgmt_Charge\":"
		out.RawString(prefix)
		out.String(string(in.MaxAnnualMgmtCharge))
	}
	{
		const prefix string = ",\"Ongoing_Charge\":"
		out.RawString(prefix)
		out.String(string(in.OngoingCharge))
	}
	{
		const prefix string = ",\"Date_Ongoing_Charge\":"
		out.RawString(prefix)
		out.String(string(in.DateOngoingCharge))
	}
	{
		const prefix string = ",\"NetExpenseRatio\":"
		out.RawString(prefix)
		out.String(string(in.NetExpenseRatio))
	}
	{
		const prefix string = ",\"AnnualHoldingsTurnover\":"
		out.RawString(prefix)
		out.String(string(in.AnnualHoldingsTurnover))
	}
	{
		const prefix string = ",\"TotalAssets\":"
		out.RawString(prefix)
		out.String(string(in.TotalAssets))
	}
	{
		const prefix string = ",\"Average_Mkt_Cap_Mil\":"
		out.RawString(prefix)
		out.String(string(in.AverageMktCapMil))
	}
	{
		const prefix string = ",\"Asset_Allocation\":"
		out.RawString(prefix)
		if in.AssetAllocation == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.AssetAllocation {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				(v6Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"World_Regions\":"
		out.RawString(prefix)
		if in.WorldRegions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.WorldRegions {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				(v7Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Sector_Weights\":"
		out.RawString(prefix)
		if in.SectorWeights == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.SectorWeights {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				(v8Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Top_10_Holdings\":"
		out.RawString(prefix)
		if in.Top10Holdings == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Top10Holdings {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				(v9Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Holdings\":"
		out.RawString(prefix)
		if in.Holdings == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Holdings {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				(v10Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"MorningStar\":"
		out.RawString(prefix)
		(in.MorningStar).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ETFData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ETFData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ETFData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ETFData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi14(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi15(in *jlexer.Lexer, out *CashFlowInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "filing_date":
			if in.IsNull() {
				in.Skip()
				out.FilingDate = nil
			} else {
				if out.FilingDate == nil {
					out.FilingDate = new(string)
				}
				*out.FilingDate = string(in.String())
			}
		case "investments":
			if in.IsNull() {
				in.Skip()
				out.Investments = nil
			} else {
				if out.Investments == nil {
					out.Investments = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Investments).UnmarshalJSON(data))
				}
			}
		case "changeToLiabilities":
			if in.IsNull() {
				in.Skip()
				out.ChangeToLiabilities = nil
			} else {
				if out.ChangeToLiabilities == nil {
					out.ChangeToLiabilities = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ChangeToLiabilities).UnmarshalJSON(data))
				}
			}
		case "totalCashflowsFromInvestingActivities":
			if in.IsNull() {
				in.Skip()
				out.TotalCashflowsFromInvestingActivities = nil
			} else {
				if out.TotalCashflowsFromInvestingActivities == nil {
					out.TotalCashflowsFromInvestingActivities = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TotalCashflowsFromInvestingActivities).UnmarshalJSON(data))
				}
			}
		case "netBorrowings":
			if in.IsNull() {
				in.Skip()
				out.NetBorrowings = nil
			} else {
				if out.NetBorrowings == nil {
					out.NetBorrowings = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NetBorrowings).UnmarshalJSON(data))
				}
			}
		case "totalCashFromFinancingActivities":
			if in.IsNull() {
				in.Skip()
				out.TotalCashFromFinancingActivities = nil
			} else {
				if out.TotalCashFromFinancingActivities == nil {
					out.TotalCashFromFinancingActivities = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TotalCashFromFinancingActivities).UnmarshalJSON(data))
				}
			}
		case "changeToOperatingActivities":
			if in.IsNull() {
				in.Skip()
				out.ChangeToOperatingActivities = nil
			} else {
				if out.ChangeToOperatingActivities == nil {
					out.ChangeToOperatingActivities = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ChangeToOperatingActivities).UnmarshalJSON(data))
				}
			}
		case "netIncome":
			if in.IsNull() {
				in.Skip()
				out.NetIncome = nil
			} else {
				if out.NetIncome == nil {
					out.NetIncome = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NetIncome).UnmarshalJSON(data))
				}
			}
		case "changeInCash":
			if in.IsNull() {
				in.Skip()
				out.ChangeInCash = nil
			} else {
				if out.ChangeInCash == nil {
					out.ChangeInCash = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ChangeInCash).UnmarshalJSON(data))
				}
			}
		case "totalCashFromOperatingActivities":
			if in.IsNull() {
				in.Skip()
				out.TotalCashFromOperatingActivities = nil
			} else {
				if out.TotalCashFromOperatingActivities == nil {
					out.TotalCashFromOperatingActivities = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TotalCashFromOperatingActivities).UnmarshalJSON(data))
				}
			}
		case "depreciation":
			if in.IsNull() {
				in.Skip()
				out.Depreciation = nil
			} else {
				if out.Depreciation == nil {
					out.Depreciation = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Depreciation).UnmarshalJSON(data))
				}
			}
		case "otherCashflowsFromInvestingActivities":
			if in.IsNull() {
				in.Skip()
				out.OtherCashflowsFromInvestingActivities = nil
			} else {
				if out.OtherCashflowsFromInvestingActivities == nil {
					out.OtherCashflowsFromInvestingActivities = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OtherCashflowsFromInvestingActivities).UnmarshalJSON(data))
				}
			}
		case "dividendsPaid":
			if in.IsNull() {
				in.Skip()
				out.DividendsPaid = nil
			} else {
				if out.DividendsPaid == nil {
					out.DividendsPaid = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DividendsPaid).UnmarshalJSON(data))
				}
			}
		case "changeToInventory":
			if in.IsNull() {
				in.Skip()
				out.ChangeToInventory = nil
			} else {
				if out.ChangeToInventory == nil {
					out.ChangeToInventory = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ChangeToInventory).UnmarshalJSON(data))
				}
			}
		case "changeToAccountReceivables":
			if in.IsNull() {
				in.Skip()
				out.ChangeToAccountReceivables = nil
			} else {
				if out.ChangeToAccountReceivables == nil {
					out.ChangeToAccountReceivables = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ChangeToAccountReceivables).UnmarshalJSON(data))
				}
			}
		case "salePurchaseOfStock":
			if in.IsNull() {
				in.Skip()
				out.SalePurchaseOfStock = nil
			} else {
				if out.SalePurchaseOfStock == nil {
					out.SalePurchaseOfStock = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SalePurchaseOfStock).UnmarshalJSON(data))
				}
			}
		case "otherCashflowsFromFinancingActivities":
			if in.IsNull() {
				in.Skip()
				out.OtherCashflowsFromFinancingActivities = nil
			} else {
				if out.OtherCashflowsFromFinancingActivities == nil {
					out.OtherCashflowsFromFinancingActivities = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OtherCashflowsFromFinancingActivities).UnmarshalJSON(data))
				}
			}
		case "changeToNetincome":
			if in.IsNull() {
				in.Skip()
				out.ChangeToNetincome = nil
			} else {
				if out.ChangeToNetincome == nil {
					out.ChangeToNetincome = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ChangeToNetincome).UnmarshalJSON(data))
				}
			}
		case "capitalExpenditures":
			if in.IsNull() {
				in.Skip()
				out.CapitalExpenditures = nil
			} else {
				if out.CapitalExpenditures == nil {
					out.CapitalExpenditures = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CapitalExpenditures).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi15(out *jwriter.Writer, in CashFlowInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"filing_date\":"
		out.RawString(prefix)
		if in.FilingDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FilingDate))
		}
	}
	{
		const prefix string = ",\"investments\":"
		out.RawString(prefix)
		if in.Investments == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Investments).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"changeToLiabilities\":"
		out.RawString(prefix)
		if in.ChangeToLiabilities == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ChangeToLiabilities).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"totalCashflowsFromInvestingActivities\":"
		out.RawString(prefix)
		if in.TotalCashflowsFromInvestingActivities == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TotalCashflowsFromInvestingActivities).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"netBorrowings\":"
		out.RawString(prefix)
		if in.NetBorrowings == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NetBorrowings).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"totalCashFromFinancingActivities\":"
		out.RawString(prefix)
		if in.TotalCashFromFinancingActivities == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TotalCashFromFinancingActivities).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"changeToOperatingActivities\":"
		out.RawString(prefix)
		if in.ChangeToOperatingActivities == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ChangeToOperatingActivities).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"netIncome\":"
		out.RawString(prefix)
		if in.NetIncome == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NetIncome).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"changeInCash\":"
		out.RawString(prefix)
		if in.ChangeInCash == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ChangeInCash).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"totalCashFromOperatingActivities\":"
		out.RawString(prefix)
		if in.TotalCashFromOperatingActivities == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TotalCashFromOperatingActivities).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"depreciation\":"
		out.RawString(prefix)
		if in.Depreciation == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Depreciation).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"otherCashflowsFromInvestingActivities\":"
		out.RawString(prefix)
		if in.OtherCashflowsFromInvestingActivities == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OtherCashflowsFromInvestingActivities).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"dividendsPaid\":"
		out.RawString(prefix)
		if in.DividendsPaid == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DividendsPaid).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"changeToInventory\":"
		out.RawString(prefix)
		if in.ChangeToInventory == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ChangeToInventory).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"changeToAccountReceivables\":"
		out.RawString(prefix)
		if in.ChangeToAccountReceivables == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ChangeToAccountReceivables).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"salePurchaseOfStock\":"
		out.RawString(prefix)
		if in.SalePurchaseOfStock == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.SalePurchaseOfStock).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"otherCashflowsFromFinancingActivities\":"
		out.RawString(prefix)
		if in.OtherCashflowsFromFinancingActivities == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OtherCashflowsFromFinancingActivities).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"changeToNetincome\":"
		out.RawString(prefix)
		if in.ChangeToNetincome == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ChangeToNetincome).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"capitalExpenditures\":"
		out.RawString(prefix)
		if in.CapitalExpenditures == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CapitalExpenditures).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CashFlowInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CashFlowInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CashFlowInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CashFlowInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi15(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi16(in *jlexer.Lexer, out *CashFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency_symbol":
			out.CurrencySymbol = string(in.String())
		case "quarterly_last_0":
			(out.QuarterlyLast0).UnmarshalEasyJSON(in)
		case "quarterly_last_1":
			(out.QuarterlyLast1).UnmarshalEasyJSON(in)
		case "quarterly_last_2":
			(out.QuarterlyLast2).UnmarshalEasyJSON(in)
		case "quarterly_last_3":
			(out.QuarterlyLast3).UnmarshalEasyJSON(in)
		case "yearly_last_0":
			(out.YearlyLast0).UnmarshalEasyJSON(in)
		case "yearly_last_1":
			(out.YearlyLast1).UnmarshalEasyJSON(in)
		case "yearly_last_2":
			(out.YearlyLast2).UnmarshalEasyJSON(in)
		case "yearly_last_3":
			(out.YearlyLast3).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi16(out *jwriter.Writer, in CashFlow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currency_symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.CurrencySymbol))
	}
	{
		const prefix string = ",\"quarterly_last_0\":"
		out.RawString(prefix)
		(in.QuarterlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_1\":"
		out.RawString(prefix)
		(in.QuarterlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_2\":"
		out.RawString(prefix)
		(in.QuarterlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_3\":"
		out.RawString(prefix)
		(in.QuarterlyLast3).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_0\":"
		out.RawString(prefix)
		(in.YearlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_1\":"
		out.RawString(prefix)
		(in.YearlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_2\":"
		out.RawString(prefix)
		(in.YearlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_3\":"
		out.RawString(prefix)
		(in.YearlyLast3).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CashFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CashFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CashFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CashFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi16(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi17(in *jlexer.Lexer, out *BalanceSheetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "filing_date":
			if in.IsNull() {
				in.Skip()
				out.FilingDate = nil
			} else {
				if out.FilingDate == nil {
					out.FilingDate = new(string)
				}
				*out.FilingDate = string(in.String())
			}
		case "intangibleAssets":
			if in.IsNull() {
				in.Skip()
				out.IntangibleAssets = nil
			} else {
				if out.IntangibleAssets == nil {
					out.IntangibleAssets = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.IntangibleAssets).UnmarshalJSON(data))
				}
			}
		case "totalLiab":
			if in.IsNull() {
				in.Skip()
				out.TotalLiab = nil
			} else {
				if out.TotalLiab == nil {
					out.TotalLiab = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TotalLiab).UnmarshalJSON(data))
				}
			}
		case "totalStockholderEquity":
			if in.IsNull() {
				in.Skip()
				out.TotalStockholderEquity = nil
			} else {
				if out.TotalStockholderEquity == nil {
					out.TotalStockholderEquity = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TotalStockholderEquity).UnmarshalJSON(data))
				}
			}
		case "deferredLongTermLiab":
			if in.IsNull() {
				in.Skip()
				out.DeferredLongTermLiab = nil
			} else {
				if out.DeferredLongTermLiab == nil {
					out.DeferredLongTermLiab = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeferredLongTermLiab).UnmarshalJSON(data))
				}
			}
		case "otherCurrentLiab":
			if in.IsNull() {
				in.Skip()
				out.OtherCurrentLiab = nil
			} else {
				if out.OtherCurrentLiab == nil {
					out.OtherCurrentLiab = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OtherCurrentLiab).UnmarshalJSON(data))
				}
			}
		case "totalAssets":
			if in.IsNull() {
				in.Skip()
				out.TotalAssets = nil
			} else {
				if out.TotalAssets == nil {
					out.TotalAssets = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TotalAssets).UnmarshalJSON(data))
				}
			}
		case "commonStock":
			if in.IsNull() {
				in.Skip()
				out.CommonStock = nil
			} else {
				if out.CommonStock == nil {
					out.CommonStock = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CommonStock).UnmarshalJSON(data))
				}
			}
		case "commonStockSharesOutStanding":
			if in.IsNull() {
				in.Skip()
				out.CommonStockSharesOutstanding = nil
			} else {
				if out.CommonStockSharesOutstanding == nil {
					out.CommonStockSharesOutstanding = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CommonStockSharesOutstanding).UnmarshalJSON(data))
				}
			}
		case "otherCurrentAssets":
			if in.IsNull() {
				in.Skip()
				out.OtherCurrentAssets = nil
			} else {
				if out.OtherCurrentAssets == nil {
					out.OtherCurrentAssets = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OtherCurrentAssets).UnmarshalJSON(data))
				}
			}
		case "retainedEarnings":
			if in.IsNull() {
				in.Skip()
				out.RetainedEarnings = nil
			} else {
				if out.RetainedEarnings == nil {
					out.RetainedEarnings = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.RetainedEarnings).UnmarshalJSON(data))
				}
			}
		case "otherLiab":
			if in.IsNull() {
				in.Skip()
				out.OtherLiab = nil
			} else {
				if out.OtherLiab == nil {
					out.OtherLiab = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OtherLiab).UnmarshalJSON(data))
				}
			}
		case "goodWill":
			if in.IsNull() {
				in.Skip()
				out.GoodWill = nil
			} else {
				if out.GoodWill == nil {
					out.GoodWill = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.GoodWill).UnmarshalJSON(data))
				}
			}
		case "otherAssets":
			if in.IsNull() {
				in.Skip()
				out.OtherAssets = nil
			} else {
				if out.OtherAssets == nil {
					out.OtherAssets = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OtherAssets).UnmarshalJSON(data))
				}
			}
		case "cash":
			if in.IsNull() {
				in.Skip()
				out.Cash = nil
			} else {
				if out.Cash == nil {
					out.Cash = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Cash).UnmarshalJSON(data))
				}
			}
		case "totalCurrentLiabilities":
			if in.IsNull() {
				in.Skip()
				out.TotalCurrentLiabilities = nil
			} else {
				if out.TotalCurrentLiabilities == nil {
					out.TotalCurrentLiabilities = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TotalCurrentLiabilities).UnmarshalJSON(data))
				}
			}
		case "shortLongTermDebt":
			if in.IsNull() {
				in.Skip()
				out.ShortLongTermDebt = nil
			} else {
				if out.ShortLongTermDebt == nil {
					out.ShortLongTermDebt = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ShortLongTermDebt).UnmarshalJSON(data))
				}
			}
		case "otherStockholderEquity":
			if in.IsNull() {
				in.Skip()
				out.OtherStockholderEquity = nil
			} else {
				if out.OtherStockholderEquity == nil {
					out.OtherStockholderEquity = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OtherStockholderEquity).UnmarshalJSON(data))
				}
			}
		case "propertyPlantEquipment":
			if in.IsNull() {
				in.Skip()
				out.PropertyPlantEquipment = nil
			} else {
				if out.PropertyPlantEquipment == nil {
					out.PropertyPlantEquipment = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PropertyPlantEquipment).UnmarshalJSON(data))
				}
			}
		case "totalCurrentAssets":
			if in.IsNull() {
				in.Skip()
				out.TotalCurrentAssets = nil
			} else {
				if out.TotalCurrentAssets == nil {
					out.TotalCurrentAssets = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TotalCurrentAssets).UnmarshalJSON(data))
				}
			}
		case "longTermInvestments":
			if in.IsNull() {
				in.Skip()
				out.LongTermInvestments = nil
			} else {
				if out.LongTermInvestments == nil {
					out.LongTermInvestments = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LongTermInvestments).UnmarshalJSON(data))
				}
			}
		case "netTangibleAssets":
			if in.IsNull() {
				in.Skip()
				out.NetTangibleAssets = nil
			} else {
				if out.NetTangibleAssets == nil {
					out.NetTangibleAssets = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NetTangibleAssets).UnmarshalJSON(data))
				}
			}
		case "shortTermInvestments":
			if in.IsNull() {
				in.Skip()
				out.ShortTermInvestments = nil
			} else {
				if out.ShortTermInvestments == nil {
					out.ShortTermInvestments = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ShortTermInvestments).UnmarshalJSON(data))
				}
			}
		case "netReceivables":
			if in.IsNull() {
				in.Skip()
				out.NetReceivables = nil
			} else {
				if out.NetReceivables == nil {
					out.NetReceivables = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NetReceivables).UnmarshalJSON(data))
				}
			}
		case "longTermDebt":
			if in.IsNull() {
				in.Skip()
				out.LongTermDebt = nil
			} else {
				if out.LongTermDebt == nil {
					out.LongTermDebt = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LongTermDebt).UnmarshalJSON(data))
				}
			}
		case "inventory":
			if in.IsNull() {
				in.Skip()
				out.Inventory = nil
			} else {
				if out.Inventory == nil {
					out.Inventory = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Inventory).UnmarshalJSON(data))
				}
			}
		case "accountsPayable":
			if in.IsNull() {
				in.Skip()
				out.AccountsPayable = nil
			} else {
				if out.AccountsPayable == nil {
					out.AccountsPayable = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.AccountsPayable).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi17(out *jwriter.Writer, in BalanceSheetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"filing_date\":"
		out.RawString(prefix)
		if in.FilingDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FilingDate))
		}
	}
	{
		const prefix string = ",\"intangibleAssets\":"
		out.RawString(prefix)
		if in.IntangibleAssets == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.IntangibleAssets).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"totalLiab\":"
		out.RawString(prefix)
		if in.TotalLiab == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TotalLiab).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"totalStockholderEquity\":"
		out.RawString(prefix)
		if in.TotalStockholderEquity == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TotalStockholderEquity).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"deferredLongTermLiab\":"
		out.RawString(prefix)
		if in.DeferredLongTermLiab == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeferredLongTermLiab).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"otherCurrentLiab\":"
		out.RawString(prefix)
		if in.OtherCurrentLiab == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OtherCurrentLiab).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"totalAssets\":"
		out.RawString(prefix)
		if in.TotalAssets == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TotalAssets).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"commonStock\":"
		out.RawString(prefix)
		if in.CommonStock == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CommonStock).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"commonStockSharesOutStanding\":"
		out.RawString(prefix)
		if in.CommonStockSharesOutstanding == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CommonStockSharesOutstanding).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"otherCurrentAssets\":"
		out.RawString(prefix)
		if in.OtherCurrentAssets == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OtherCurrentAssets).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"retainedEarnings\":"
		out.RawString(prefix)
		if in.RetainedEarnings == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.RetainedEarnings).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"otherLiab\":"
		out.RawString(prefix)
		if in.OtherLiab == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OtherLiab).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"goodWill\":"
		out.RawString(prefix)
		if in.GoodWill == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.GoodWill).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"otherAssets\":"
		out.RawString(prefix)
		if in.OtherAssets == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OtherAssets).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"cash\":"
		out.RawString(prefix)
		if in.Cash == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Cash).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"totalCurrentLiabilities\":"
		out.RawString(prefix)
		if in.TotalCurrentLiabilities == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TotalCurrentLiabilities).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"shortLongTermDebt\":"
		out.RawString(prefix)
		if in.ShortLongTermDebt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ShortLongTermDebt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"otherStockholderEquity\":"
		out.RawString(prefix)
		if in.OtherStockholderEquity == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OtherStockholderEquity).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"propertyPlantEquipment\":"
		out.RawString(prefix)
		if in.PropertyPlantEquipment == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PropertyPlantEquipment).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"totalCurrentAssets\":"
		out.RawString(prefix)
		if in.TotalCurrentAssets == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TotalCurrentAssets).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"longTermInvestments\":"
		out.RawString(prefix)
		if in.LongTermInvestments == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LongTermInvestments).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"netTangibleAssets\":"
		out.RawString(prefix)
		if in.NetTangibleAssets == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NetTangibleAssets).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"shortTermInvestments\":"
		out.RawString(prefix)
		if in.ShortTermInvestments == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ShortTermInvestments).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"netReceivables\":"
		out.RawString(prefix)
		if in.NetReceivables == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NetReceivables).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"longTermDebt\":"
		out.RawString(prefix)
		if in.LongTermDebt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LongTermDebt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"inventory\":"
		out.RawString(prefix)
		if in.Inventory == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Inventory).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"accountsPayable\":"
		out.RawString(prefix)
		if in.AccountsPayable == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.AccountsPayable).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceSheetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceSheetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceSheetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceSheetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi17(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi18(in *jlexer.Lexer, out *BalanceSheet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency_symbol":
			out.CurrencySymbol = string(in.String())
		case "quarterly_last_0":
			(out.QuarterlyLast0).UnmarshalEasyJSON(in)
		case "quarterly_last_1":
			(out.QuarterlyLast1).UnmarshalEasyJSON(in)
		case "quarterly_last_2":
			(out.QuarterlyLast2).UnmarshalEasyJSON(in)
		case "quarterly_last_3":
			(out.QuarterlyLast3).UnmarshalEasyJSON(in)
		case "yearly_last_0":
			(out.YearlyLast0).UnmarshalEasyJSON(in)
		case "yearly_last_1":
			(out.YearlyLast1).UnmarshalEasyJSON(in)
		case "yearly_last_2":
			(out.YearlyLast2).UnmarshalEasyJSON(in)
		case "yearly_last_3":
			(out.YearlyLast3).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi18(out *jwriter.Writer, in BalanceSheet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currency_symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.CurrencySymbol))
	}
	{
		const prefix string = ",\"quarterly_last_0\":"
		out.RawString(prefix)
		(in.QuarterlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_1\":"
		out.RawString(prefix)
		(in.QuarterlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_2\":"
		out.RawString(prefix)
		(in.QuarterlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_3\":"
		out.RawString(prefix)
		(in.QuarterlyLast3).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_0\":"
		out.RawString(prefix)
		(in.YearlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_1\":"
		out.RawString(prefix)
		(in.YearlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_2\":"
		out.RawString(prefix)
		(in.YearlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_3\":"
		out.RawString(prefix)
		(in.YearlyLast3).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceSheet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceSheet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceSheet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceSheet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi18(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi19(in *jlexer.Lexer, out *Allocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Long_%":
			if in.IsNull() {
				in.Skip()
				out.LongPercent = nil
			} else {
				if out.LongPercent == nil {
					out.LongPercent = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LongPercent).UnmarshalJSON(data))
				}
			}
		case "Short_%":
			if in.IsNull() {
				in.Skip()
				out.ShortPercent = nil
			} else {
				if out.ShortPercent == nil {
					out.ShortPercent = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ShortPercent).UnmarshalJSON(data))
				}
			}
		case "Net_Assets_%":
			if in.IsNull() {
				in.Skip()
				out.NetAssetsPercent = nil
			} else {
				if out.NetAssetsPercent == nil {
					out.NetAssetsPercent = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NetAssetsPercent).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi19(out *jwriter.Writer, in Allocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Long_%\":"
		out.RawString(prefix[1:])
		if in.LongPercent == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LongPercent).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"Short_%\":"
		out.RawString(prefix)
		if in.ShortPercent == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ShortPercent).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"Net_Assets_%\":"
		out.RawString(prefix)
		if in.NetAssetsPercent == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NetAssetsPercent).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Allocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Allocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Allocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Allocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi19(l, v)
}
