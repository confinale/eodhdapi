// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package eodhdapi

import (
	"encoding/json"
	"github.com/gitu/eodhdapi/tools"
	"github.com/mailru/easyjson"
	"github.com/mailru/easyjson/jlexer"
	"github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE48f2accDecodeGithubComGituEodhdapi(in *jlexer.Lexer, out *tools.Valuation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TrailingPE":
			if in.IsNull() {
				in.Skip()
				out.TrailingPE = nil
			} else {
				if out.TrailingPE == nil {
					out.TrailingPE = new(float64)
				}
				*out.TrailingPE = float64(in.Float64())
			}
		case "ForwardPE":
			if in.IsNull() {
				in.Skip()
				out.ForwardPE = nil
			} else {
				if out.ForwardPE == nil {
					out.ForwardPE = new(float64)
				}
				*out.ForwardPE = float64(in.Float64())
			}
		case "PriceSalesTTM":
			if in.IsNull() {
				in.Skip()
				out.PriceSalesTTM = nil
			} else {
				if out.PriceSalesTTM == nil {
					out.PriceSalesTTM = new(float64)
				}
				*out.PriceSalesTTM = float64(in.Float64())
			}
		case "PriceBookMRQ":
			if in.IsNull() {
				in.Skip()
				out.PriceBookMRQ = nil
			} else {
				if out.PriceBookMRQ == nil {
					out.PriceBookMRQ = new(float64)
				}
				*out.PriceBookMRQ = float64(in.Float64())
			}
		case "EnterpriseValueRevenue":
			if in.IsNull() {
				in.Skip()
				out.EnterpriseValueRevenue = nil
			} else {
				if out.EnterpriseValueRevenue == nil {
					out.EnterpriseValueRevenue = new(float64)
				}
				*out.EnterpriseValueRevenue = float64(in.Float64())
			}
		case "EnterpriseValueEbitda":
			if in.IsNull() {
				in.Skip()
				out.EnterpriseValueEbitda = nil
			} else {
				if out.EnterpriseValueEbitda == nil {
					out.EnterpriseValueEbitda = new(float64)
				}
				*out.EnterpriseValueEbitda = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi(out *jwriter.Writer, in tools.Valuation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TrailingPE\":"
		out.RawString(prefix[1:])
		if in.TrailingPE == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TrailingPE))
		}
	}
	{
		const prefix string = ",\"ForwardPE\":"
		out.RawString(prefix)
		if in.ForwardPE == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ForwardPE))
		}
	}
	{
		const prefix string = ",\"PriceSalesTTM\":"
		out.RawString(prefix)
		if in.PriceSalesTTM == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PriceSalesTTM))
		}
	}
	{
		const prefix string = ",\"PriceBookMRQ\":"
		out.RawString(prefix)
		if in.PriceBookMRQ == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PriceBookMRQ))
		}
	}
	{
		const prefix string = ",\"EnterpriseValueRevenue\":"
		out.RawString(prefix)
		if in.EnterpriseValueRevenue == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.EnterpriseValueRevenue))
		}
	}
	{
		const prefix string = ",\"EnterpriseValueEbitda\":"
		out.RawString(prefix)
		if in.EnterpriseValueEbitda == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.EnterpriseValueEbitda))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tools.Valuation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tools.Valuation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tools.Valuation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tools.Valuation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi1(in *jlexer.Lexer, out *tools.Technicals) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Beta":
			if in.IsNull() {
				in.Skip()
				out.Beta = nil
			} else {
				if out.Beta == nil {
					out.Beta = new(float64)
				}
				*out.Beta = float64(in.Float64())
			}
		case "52WeekHigh":
			if in.IsNull() {
				in.Skip()
				out.FiftyTwoWeekHigh = nil
			} else {
				if out.FiftyTwoWeekHigh == nil {
					out.FiftyTwoWeekHigh = new(float64)
				}
				*out.FiftyTwoWeekHigh = float64(in.Float64())
			}
		case "52WeekLow":
			if in.IsNull() {
				in.Skip()
				out.FiftyTwoWeekLow = nil
			} else {
				if out.FiftyTwoWeekLow == nil {
					out.FiftyTwoWeekLow = new(float64)
				}
				*out.FiftyTwoWeekLow = float64(in.Float64())
			}
		case "50DayMA":
			if in.IsNull() {
				in.Skip()
				out.FiftyDayMA = nil
			} else {
				if out.FiftyDayMA == nil {
					out.FiftyDayMA = new(float64)
				}
				*out.FiftyDayMA = float64(in.Float64())
			}
		case "200DayMA":
			if in.IsNull() {
				in.Skip()
				out.TwoHundredDayMA = nil
			} else {
				if out.TwoHundredDayMA == nil {
					out.TwoHundredDayMA = new(float64)
				}
				*out.TwoHundredDayMA = float64(in.Float64())
			}
		case "SharesShort":
			if in.IsNull() {
				in.Skip()
				out.SharesShort = nil
			} else {
				if out.SharesShort == nil {
					out.SharesShort = new(float64)
				}
				*out.SharesShort = float64(in.Float64())
			}
		case "SharesShortPriorMonth":
			if in.IsNull() {
				in.Skip()
				out.SharesShortPriorMonth = nil
			} else {
				if out.SharesShortPriorMonth == nil {
					out.SharesShortPriorMonth = new(float64)
				}
				*out.SharesShortPriorMonth = float64(in.Float64())
			}
		case "ShortRatio":
			if in.IsNull() {
				in.Skip()
				out.ShortRatio = nil
			} else {
				if out.ShortRatio == nil {
					out.ShortRatio = new(float64)
				}
				*out.ShortRatio = float64(in.Float64())
			}
		case "ShortPercent":
			if in.IsNull() {
				in.Skip()
				out.ShortPercent = nil
			} else {
				if out.ShortPercent == nil {
					out.ShortPercent = new(float64)
				}
				*out.ShortPercent = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi1(out *jwriter.Writer, in tools.Technicals) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Beta\":"
		out.RawString(prefix[1:])
		if in.Beta == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Beta))
		}
	}
	{
		const prefix string = ",\"52WeekHigh\":"
		out.RawString(prefix)
		if in.FiftyTwoWeekHigh == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.FiftyTwoWeekHigh))
		}
	}
	{
		const prefix string = ",\"52WeekLow\":"
		out.RawString(prefix)
		if in.FiftyTwoWeekLow == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.FiftyTwoWeekLow))
		}
	}
	{
		const prefix string = ",\"50DayMA\":"
		out.RawString(prefix)
		if in.FiftyDayMA == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.FiftyDayMA))
		}
	}
	{
		const prefix string = ",\"200DayMA\":"
		out.RawString(prefix)
		if in.TwoHundredDayMA == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TwoHundredDayMA))
		}
	}
	{
		const prefix string = ",\"SharesShort\":"
		out.RawString(prefix)
		if in.SharesShort == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.SharesShort))
		}
	}
	{
		const prefix string = ",\"SharesShortPriorMonth\":"
		out.RawString(prefix)
		if in.SharesShortPriorMonth == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.SharesShortPriorMonth))
		}
	}
	{
		const prefix string = ",\"ShortRatio\":"
		out.RawString(prefix)
		if in.ShortRatio == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ShortRatio))
		}
	}
	{
		const prefix string = ",\"ShortPercent\":"
		out.RawString(prefix)
		if in.ShortPercent == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ShortPercent))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tools.Technicals) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tools.Technicals) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tools.Technicals) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tools.Technicals) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi1(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi2(in *jlexer.Lexer, out *tools.SplitsDividends) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ForwardAnnualDividendRate":
			if in.IsNull() {
				in.Skip()
				out.ForwardAnnualDividendRate = nil
			} else {
				if out.ForwardAnnualDividendRate == nil {
					out.ForwardAnnualDividendRate = new(float64)
				}
				*out.ForwardAnnualDividendRate = float64(in.Float64())
			}
		case "ForwardAnnualDividendYield":
			if in.IsNull() {
				in.Skip()
				out.ForwardAnnualDividendYield = nil
			} else {
				if out.ForwardAnnualDividendYield == nil {
					out.ForwardAnnualDividendYield = new(float64)
				}
				*out.ForwardAnnualDividendYield = float64(in.Float64())
			}
		case "PayoutRatio":
			if in.IsNull() {
				in.Skip()
				out.PayoutRatio = nil
			} else {
				if out.PayoutRatio == nil {
					out.PayoutRatio = new(float64)
				}
				*out.PayoutRatio = float64(in.Float64())
			}
		case "DividendDate":
			out.DividendDate = string(in.String())
		case "ExDividendDate":
			out.ExDividendDate = string(in.String())
		case "LastSplitFactor":
			out.LastSplitFactor = string(in.String())
		case "LastSplitDate":
			out.LastSplitDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi2(out *jwriter.Writer, in tools.SplitsDividends) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ForwardAnnualDividendRate\":"
		out.RawString(prefix[1:])
		if in.ForwardAnnualDividendRate == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ForwardAnnualDividendRate))
		}
	}
	{
		const prefix string = ",\"ForwardAnnualDividendYield\":"
		out.RawString(prefix)
		if in.ForwardAnnualDividendYield == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ForwardAnnualDividendYield))
		}
	}
	{
		const prefix string = ",\"PayoutRatio\":"
		out.RawString(prefix)
		if in.PayoutRatio == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PayoutRatio))
		}
	}
	{
		const prefix string = ",\"DividendDate\":"
		out.RawString(prefix)
		out.String(string(in.DividendDate))
	}
	{
		const prefix string = ",\"ExDividendDate\":"
		out.RawString(prefix)
		out.String(string(in.ExDividendDate))
	}
	{
		const prefix string = ",\"LastSplitFactor\":"
		out.RawString(prefix)
		out.String(string(in.LastSplitFactor))
	}
	{
		const prefix string = ",\"LastSplitDate\":"
		out.RawString(prefix)
		out.String(string(in.LastSplitDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tools.SplitsDividends) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tools.SplitsDividends) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tools.SplitsDividends) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tools.SplitsDividends) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi2(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi3(in *jlexer.Lexer, out *IncomeStatementInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "filing_date":
			if in.IsNull() {
				in.Skip()
				out.FilingDate = nil
			} else {
				if out.FilingDate == nil {
					out.FilingDate = new(string)
				}
				*out.FilingDate = string(in.String())
			}
		case "researchDevelopment":
			if in.IsNull() {
				in.Skip()
				out.ResearchDevelopment = nil
			} else {
				if out.ResearchDevelopment == nil {
					out.ResearchDevelopment = new(float64)
				}
				*out.ResearchDevelopment = float64(in.Float64())
			}
		case "effectOfAccountingCharges":
			if in.IsNull() {
				in.Skip()
				out.EffectOfAccountingCharges = nil
			} else {
				if out.EffectOfAccountingCharges == nil {
					out.EffectOfAccountingCharges = new(float64)
				}
				*out.EffectOfAccountingCharges = float64(in.Float64())
			}
		case "incomeBeforeTax":
			if in.IsNull() {
				in.Skip()
				out.IncomeBeforeTax = nil
			} else {
				if out.IncomeBeforeTax == nil {
					out.IncomeBeforeTax = new(float64)
				}
				*out.IncomeBeforeTax = float64(in.Float64())
			}
		case "minorityInterest":
			if in.IsNull() {
				in.Skip()
				out.MinorityInterest = nil
			} else {
				if out.MinorityInterest == nil {
					out.MinorityInterest = new(float64)
				}
				*out.MinorityInterest = float64(in.Float64())
			}
		case "netIncome":
			if in.IsNull() {
				in.Skip()
				out.NetIncome = nil
			} else {
				if out.NetIncome == nil {
					out.NetIncome = new(float64)
				}
				*out.NetIncome = float64(in.Float64())
			}
		case "sellingGeneralAdministrative":
			if in.IsNull() {
				in.Skip()
				out.SellingGeneralAdministrative = nil
			} else {
				if out.SellingGeneralAdministrative == nil {
					out.SellingGeneralAdministrative = new(float64)
				}
				*out.SellingGeneralAdministrative = float64(in.Float64())
			}
		case "grossProfit":
			if in.IsNull() {
				in.Skip()
				out.GrossProfit = nil
			} else {
				if out.GrossProfit == nil {
					out.GrossProfit = new(float64)
				}
				*out.GrossProfit = float64(in.Float64())
			}
		case "ebit":
			if in.IsNull() {
				in.Skip()
				out.Ebit = nil
			} else {
				if out.Ebit == nil {
					out.Ebit = new(float64)
				}
				*out.Ebit = float64(in.Float64())
			}
		case "operatingIncome":
			if in.IsNull() {
				in.Skip()
				out.OperatingIncome = nil
			} else {
				if out.OperatingIncome == nil {
					out.OperatingIncome = new(float64)
				}
				*out.OperatingIncome = float64(in.Float64())
			}
		case "otherOperatingExpenses":
			if in.IsNull() {
				in.Skip()
				out.OtherOperatingExpenses = nil
			} else {
				if out.OtherOperatingExpenses == nil {
					out.OtherOperatingExpenses = new(float64)
				}
				*out.OtherOperatingExpenses = float64(in.Float64())
			}
		case "interestExpense":
			if in.IsNull() {
				in.Skip()
				out.InterestExpense = nil
			} else {
				if out.InterestExpense == nil {
					out.InterestExpense = new(float64)
				}
				*out.InterestExpense = float64(in.Float64())
			}
		case "extraordinaryItems":
			if in.IsNull() {
				in.Skip()
				out.ExtraordinaryItems = nil
			} else {
				if out.ExtraordinaryItems == nil {
					out.ExtraordinaryItems = new(float64)
				}
				*out.ExtraordinaryItems = float64(in.Float64())
			}
		case "nonRecurring":
			if in.IsNull() {
				in.Skip()
				out.NonRecurring = nil
			} else {
				if out.NonRecurring == nil {
					out.NonRecurring = new(float64)
				}
				*out.NonRecurring = float64(in.Float64())
			}
		case "otherItems":
			if in.IsNull() {
				in.Skip()
				out.OtherItems = nil
			} else {
				if out.OtherItems == nil {
					out.OtherItems = new(float64)
				}
				*out.OtherItems = float64(in.Float64())
			}
		case "incomeTaxExpense":
			if in.IsNull() {
				in.Skip()
				out.IncomeTaxExpense = nil
			} else {
				if out.IncomeTaxExpense == nil {
					out.IncomeTaxExpense = new(float64)
				}
				*out.IncomeTaxExpense = float64(in.Float64())
			}
		case "totalRevenue":
			if in.IsNull() {
				in.Skip()
				out.TotalRevenue = nil
			} else {
				if out.TotalRevenue == nil {
					out.TotalRevenue = new(float64)
				}
				*out.TotalRevenue = float64(in.Float64())
			}
		case "totalOperatingExpenses":
			if in.IsNull() {
				in.Skip()
				out.TotalOperatingExpenses = nil
			} else {
				if out.TotalOperatingExpenses == nil {
					out.TotalOperatingExpenses = new(float64)
				}
				*out.TotalOperatingExpenses = float64(in.Float64())
			}
		case "costOfRevenue":
			if in.IsNull() {
				in.Skip()
				out.CostOfRevenue = nil
			} else {
				if out.CostOfRevenue == nil {
					out.CostOfRevenue = new(float64)
				}
				*out.CostOfRevenue = float64(in.Float64())
			}
		case "totalOtherIncomeExpenseNet":
			if in.IsNull() {
				in.Skip()
				out.TotalOtherIncomeExpenseNet = nil
			} else {
				if out.TotalOtherIncomeExpenseNet == nil {
					out.TotalOtherIncomeExpenseNet = new(float64)
				}
				*out.TotalOtherIncomeExpenseNet = float64(in.Float64())
			}
		case "discontinuedOperations":
			if in.IsNull() {
				in.Skip()
				out.DiscontinuedOperations = nil
			} else {
				if out.DiscontinuedOperations == nil {
					out.DiscontinuedOperations = new(float64)
				}
				*out.DiscontinuedOperations = float64(in.Float64())
			}
		case "netIncomeFromContinuingOps":
			if in.IsNull() {
				in.Skip()
				out.NetIncomeFromContinuingOps = nil
			} else {
				if out.NetIncomeFromContinuingOps == nil {
					out.NetIncomeFromContinuingOps = new(float64)
				}
				*out.NetIncomeFromContinuingOps = float64(in.Float64())
			}
		case "netIncomeApplicableToCommonShares":
			if in.IsNull() {
				in.Skip()
				out.NetIncomeApplicableToCommonShares = nil
			} else {
				if out.NetIncomeApplicableToCommonShares == nil {
					out.NetIncomeApplicableToCommonShares = new(float64)
				}
				*out.NetIncomeApplicableToCommonShares = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi3(out *jwriter.Writer, in IncomeStatementInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"filing_date\":"
		out.RawString(prefix)
		if in.FilingDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FilingDate))
		}
	}
	{
		const prefix string = ",\"researchDevelopment\":"
		out.RawString(prefix)
		if in.ResearchDevelopment == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ResearchDevelopment))
		}
	}
	{
		const prefix string = ",\"effectOfAccountingCharges\":"
		out.RawString(prefix)
		if in.EffectOfAccountingCharges == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.EffectOfAccountingCharges))
		}
	}
	{
		const prefix string = ",\"incomeBeforeTax\":"
		out.RawString(prefix)
		if in.IncomeBeforeTax == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.IncomeBeforeTax))
		}
	}
	{
		const prefix string = ",\"minorityInterest\":"
		out.RawString(prefix)
		if in.MinorityInterest == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.MinorityInterest))
		}
	}
	{
		const prefix string = ",\"netIncome\":"
		out.RawString(prefix)
		if in.NetIncome == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.NetIncome))
		}
	}
	{
		const prefix string = ",\"sellingGeneralAdministrative\":"
		out.RawString(prefix)
		if in.SellingGeneralAdministrative == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.SellingGeneralAdministrative))
		}
	}
	{
		const prefix string = ",\"grossProfit\":"
		out.RawString(prefix)
		if in.GrossProfit == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.GrossProfit))
		}
	}
	{
		const prefix string = ",\"ebit\":"
		out.RawString(prefix)
		if in.Ebit == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Ebit))
		}
	}
	{
		const prefix string = ",\"operatingIncome\":"
		out.RawString(prefix)
		if in.OperatingIncome == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.OperatingIncome))
		}
	}
	{
		const prefix string = ",\"otherOperatingExpenses\":"
		out.RawString(prefix)
		if in.OtherOperatingExpenses == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.OtherOperatingExpenses))
		}
	}
	{
		const prefix string = ",\"interestExpense\":"
		out.RawString(prefix)
		if in.InterestExpense == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.InterestExpense))
		}
	}
	{
		const prefix string = ",\"extraordinaryItems\":"
		out.RawString(prefix)
		if in.ExtraordinaryItems == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ExtraordinaryItems))
		}
	}
	{
		const prefix string = ",\"nonRecurring\":"
		out.RawString(prefix)
		if in.NonRecurring == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.NonRecurring))
		}
	}
	{
		const prefix string = ",\"otherItems\":"
		out.RawString(prefix)
		if in.OtherItems == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.OtherItems))
		}
	}
	{
		const prefix string = ",\"incomeTaxExpense\":"
		out.RawString(prefix)
		if in.IncomeTaxExpense == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.IncomeTaxExpense))
		}
	}
	{
		const prefix string = ",\"totalRevenue\":"
		out.RawString(prefix)
		if in.TotalRevenue == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalRevenue))
		}
	}
	{
		const prefix string = ",\"totalOperatingExpenses\":"
		out.RawString(prefix)
		if in.TotalOperatingExpenses == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalOperatingExpenses))
		}
	}
	{
		const prefix string = ",\"costOfRevenue\":"
		out.RawString(prefix)
		if in.CostOfRevenue == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.CostOfRevenue))
		}
	}
	{
		const prefix string = ",\"totalOtherIncomeExpenseNet\":"
		out.RawString(prefix)
		if in.TotalOtherIncomeExpenseNet == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalOtherIncomeExpenseNet))
		}
	}
	{
		const prefix string = ",\"discontinuedOperations\":"
		out.RawString(prefix)
		if in.DiscontinuedOperations == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.DiscontinuedOperations))
		}
	}
	{
		const prefix string = ",\"netIncomeFromContinuingOps\":"
		out.RawString(prefix)
		if in.NetIncomeFromContinuingOps == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.NetIncomeFromContinuingOps))
		}
	}
	{
		const prefix string = ",\"netIncomeApplicableToCommonShares\":"
		out.RawString(prefix)
		if in.NetIncomeApplicableToCommonShares == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.NetIncomeApplicableToCommonShares))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncomeStatementInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncomeStatementInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncomeStatementInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncomeStatementInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi3(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi4(in *jlexer.Lexer, out *tools.IncomeStatement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency_symbol":
			out.CurrencySymbol = string(in.String())
		case "quarterly_last_0":
			(out.QuarterlyLast0).UnmarshalEasyJSON(in)
		case "quarterly_last_1":
			(out.QuarterlyLast1).UnmarshalEasyJSON(in)
		case "quarterly_last_2":
			(out.QuarterlyLast2).UnmarshalEasyJSON(in)
		case "quarterly_last_3":
			(out.QuarterlyLast3).UnmarshalEasyJSON(in)
		case "yearly_last_0":
			(out.YearlyLast0).UnmarshalEasyJSON(in)
		case "yearly_last_1":
			(out.YearlyLast1).UnmarshalEasyJSON(in)
		case "yearly_last_2":
			(out.YearlyLast2).UnmarshalEasyJSON(in)
		case "yearly_last_3":
			(out.YearlyLast3).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi4(out *jwriter.Writer, in tools.IncomeStatement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currency_symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.CurrencySymbol))
	}
	{
		const prefix string = ",\"quarterly_last_0\":"
		out.RawString(prefix)
		(in.QuarterlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_1\":"
		out.RawString(prefix)
		(in.QuarterlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_2\":"
		out.RawString(prefix)
		(in.QuarterlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_3\":"
		out.RawString(prefix)
		(in.QuarterlyLast3).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_0\":"
		out.RawString(prefix)
		(in.YearlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_1\":"
		out.RawString(prefix)
		(in.YearlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_2\":"
		out.RawString(prefix)
		(in.YearlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_3\":"
		out.RawString(prefix)
		(in.YearlyLast3).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tools.IncomeStatement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tools.IncomeStatement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tools.IncomeStatement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tools.IncomeStatement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi4(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi5(in *jlexer.Lexer, out *tools.Highlights) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MarketCapitalization":
			if in.IsNull() {
				in.Skip()
				out.MarketCapitalization = nil
			} else {
				if out.MarketCapitalization == nil {
					out.MarketCapitalization = new(float64)
				}
				*out.MarketCapitalization = float64(in.Float64())
			}
		case "MarketCapitalizationMln":
			out.MarketCapitalizationMln = string(in.String())
		case "EBITDA":
			if in.IsNull() {
				in.Skip()
				out.EBITDA = nil
			} else {
				if out.EBITDA == nil {
					out.EBITDA = new(float64)
				}
				*out.EBITDA = float64(in.Float64())
			}
		case "PERatio":
			if in.IsNull() {
				in.Skip()
				out.PERatio = nil
			} else {
				if out.PERatio == nil {
					out.PERatio = new(float64)
				}
				*out.PERatio = float64(in.Float64())
			}
		case "PEGRatio":
			if in.IsNull() {
				in.Skip()
				out.PEGRatio = nil
			} else {
				if out.PEGRatio == nil {
					out.PEGRatio = new(float64)
				}
				*out.PEGRatio = float64(in.Float64())
			}
		case "WallStreetTargetPrice":
			if in.IsNull() {
				in.Skip()
				out.WallStreetTargetPrice = nil
			} else {
				if out.WallStreetTargetPrice == nil {
					out.WallStreetTargetPrice = new(float64)
				}
				*out.WallStreetTargetPrice = float64(in.Float64())
			}
		case "BookValue":
			if in.IsNull() {
				in.Skip()
				out.BookValue = nil
			} else {
				if out.BookValue == nil {
					out.BookValue = new(float64)
				}
				*out.BookValue = float64(in.Float64())
			}
		case "DividendShare":
			if in.IsNull() {
				in.Skip()
				out.DividendShare = nil
			} else {
				if out.DividendShare == nil {
					out.DividendShare = new(float64)
				}
				*out.DividendShare = float64(in.Float64())
			}
		case "DividendYield":
			if in.IsNull() {
				in.Skip()
				out.DividendYield = nil
			} else {
				if out.DividendYield == nil {
					out.DividendYield = new(float64)
				}
				*out.DividendYield = float64(in.Float64())
			}
		case "EarningsShare":
			if in.IsNull() {
				in.Skip()
				out.EarningsShare = nil
			} else {
				if out.EarningsShare == nil {
					out.EarningsShare = new(float64)
				}
				*out.EarningsShare = float64(in.Float64())
			}
		case "EPSEstimateCurrentYear":
			if in.IsNull() {
				in.Skip()
				out.EPSEstimateCurrentYear = nil
			} else {
				if out.EPSEstimateCurrentYear == nil {
					out.EPSEstimateCurrentYear = new(float64)
				}
				*out.EPSEstimateCurrentYear = float64(in.Float64())
			}
		case "EPSEstimateNextYear":
			if in.IsNull() {
				in.Skip()
				out.EPSEstimateNextYear = nil
			} else {
				if out.EPSEstimateNextYear == nil {
					out.EPSEstimateNextYear = new(float64)
				}
				*out.EPSEstimateNextYear = float64(in.Float64())
			}
		case "EPSEstimateNextQuarter":
			if in.IsNull() {
				in.Skip()
				out.EPSEstimateNextQuarter = nil
			} else {
				if out.EPSEstimateNextQuarter == nil {
					out.EPSEstimateNextQuarter = new(float64)
				}
				*out.EPSEstimateNextQuarter = float64(in.Float64())
			}
		case "MostRecentQuarter":
			out.MostRecentQuarter = string(in.String())
		case "ProfitMargin":
			if in.IsNull() {
				in.Skip()
				out.ProfitMargin = nil
			} else {
				if out.ProfitMargin == nil {
					out.ProfitMargin = new(float64)
				}
				*out.ProfitMargin = float64(in.Float64())
			}
		case "OperatingMarginTTM":
			if in.IsNull() {
				in.Skip()
				out.OperatingMarginTTM = nil
			} else {
				if out.OperatingMarginTTM == nil {
					out.OperatingMarginTTM = new(float64)
				}
				*out.OperatingMarginTTM = float64(in.Float64())
			}
		case "ReturnOnAssetsTTM":
			if in.IsNull() {
				in.Skip()
				out.ReturnOnAssetsTTM = nil
			} else {
				if out.ReturnOnAssetsTTM == nil {
					out.ReturnOnAssetsTTM = new(float64)
				}
				*out.ReturnOnAssetsTTM = float64(in.Float64())
			}
		case "ReturnOnEquityTTM":
			if in.IsNull() {
				in.Skip()
				out.ReturnOnEquityTTM = nil
			} else {
				if out.ReturnOnEquityTTM == nil {
					out.ReturnOnEquityTTM = new(float64)
				}
				*out.ReturnOnEquityTTM = float64(in.Float64())
			}
		case "RevenueTTM":
			if in.IsNull() {
				in.Skip()
				out.RevenueTTM = nil
			} else {
				if out.RevenueTTM == nil {
					out.RevenueTTM = new(float64)
				}
				*out.RevenueTTM = float64(in.Float64())
			}
		case "RevenuePerShareTTM":
			if in.IsNull() {
				in.Skip()
				out.RevenuePerShareTTM = nil
			} else {
				if out.RevenuePerShareTTM == nil {
					out.RevenuePerShareTTM = new(float64)
				}
				*out.RevenuePerShareTTM = float64(in.Float64())
			}
		case "QuarterlyRevenueGrowthYOY":
			if in.IsNull() {
				in.Skip()
				out.QuarterlyRevenueGrowthYOY = nil
			} else {
				if out.QuarterlyRevenueGrowthYOY == nil {
					out.QuarterlyRevenueGrowthYOY = new(float64)
				}
				*out.QuarterlyRevenueGrowthYOY = float64(in.Float64())
			}
		case "GrossProfitTTM":
			if in.IsNull() {
				in.Skip()
				out.GrossProfitTTM = nil
			} else {
				if out.GrossProfitTTM == nil {
					out.GrossProfitTTM = new(float64)
				}
				*out.GrossProfitTTM = float64(in.Float64())
			}
		case "DilutedEpsTTM":
			if in.IsNull() {
				in.Skip()
				out.DilutedEpsTTM = nil
			} else {
				if out.DilutedEpsTTM == nil {
					out.DilutedEpsTTM = new(float64)
				}
				*out.DilutedEpsTTM = float64(in.Float64())
			}
		case "QuarterlyEarningsGrowthYOY":
			if in.IsNull() {
				in.Skip()
				out.QuarterlyEarningsGrowthYOY = nil
			} else {
				if out.QuarterlyEarningsGrowthYOY == nil {
					out.QuarterlyEarningsGrowthYOY = new(float64)
				}
				*out.QuarterlyEarningsGrowthYOY = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi5(out *jwriter.Writer, in tools.Highlights) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MarketCapitalization\":"
		out.RawString(prefix[1:])
		if in.MarketCapitalization == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.MarketCapitalization))
		}
	}
	{
		const prefix string = ",\"MarketCapitalizationMln\":"
		out.RawString(prefix)
		out.String(string(in.MarketCapitalizationMln))
	}
	{
		const prefix string = ",\"EBITDA\":"
		out.RawString(prefix)
		if in.EBITDA == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.EBITDA))
		}
	}
	{
		const prefix string = ",\"PERatio\":"
		out.RawString(prefix)
		if in.PERatio == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PERatio))
		}
	}
	{
		const prefix string = ",\"PEGRatio\":"
		out.RawString(prefix)
		if in.PEGRatio == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PEGRatio))
		}
	}
	{
		const prefix string = ",\"WallStreetTargetPrice\":"
		out.RawString(prefix)
		if in.WallStreetTargetPrice == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.WallStreetTargetPrice))
		}
	}
	{
		const prefix string = ",\"BookValue\":"
		out.RawString(prefix)
		if in.BookValue == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.BookValue))
		}
	}
	{
		const prefix string = ",\"DividendShare\":"
		out.RawString(prefix)
		if in.DividendShare == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.DividendShare))
		}
	}
	{
		const prefix string = ",\"DividendYield\":"
		out.RawString(prefix)
		if in.DividendYield == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.DividendYield))
		}
	}
	{
		const prefix string = ",\"EarningsShare\":"
		out.RawString(prefix)
		if in.EarningsShare == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.EarningsShare))
		}
	}
	{
		const prefix string = ",\"EPSEstimateCurrentYear\":"
		out.RawString(prefix)
		if in.EPSEstimateCurrentYear == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.EPSEstimateCurrentYear))
		}
	}
	{
		const prefix string = ",\"EPSEstimateNextYear\":"
		out.RawString(prefix)
		if in.EPSEstimateNextYear == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.EPSEstimateNextYear))
		}
	}
	{
		const prefix string = ",\"EPSEstimateNextQuarter\":"
		out.RawString(prefix)
		if in.EPSEstimateNextQuarter == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.EPSEstimateNextQuarter))
		}
	}
	{
		const prefix string = ",\"MostRecentQuarter\":"
		out.RawString(prefix)
		out.String(string(in.MostRecentQuarter))
	}
	{
		const prefix string = ",\"ProfitMargin\":"
		out.RawString(prefix)
		if in.ProfitMargin == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ProfitMargin))
		}
	}
	{
		const prefix string = ",\"OperatingMarginTTM\":"
		out.RawString(prefix)
		if in.OperatingMarginTTM == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.OperatingMarginTTM))
		}
	}
	{
		const prefix string = ",\"ReturnOnAssetsTTM\":"
		out.RawString(prefix)
		if in.ReturnOnAssetsTTM == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ReturnOnAssetsTTM))
		}
	}
	{
		const prefix string = ",\"ReturnOnEquityTTM\":"
		out.RawString(prefix)
		if in.ReturnOnEquityTTM == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ReturnOnEquityTTM))
		}
	}
	{
		const prefix string = ",\"RevenueTTM\":"
		out.RawString(prefix)
		if in.RevenueTTM == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.RevenueTTM))
		}
	}
	{
		const prefix string = ",\"RevenuePerShareTTM\":"
		out.RawString(prefix)
		if in.RevenuePerShareTTM == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.RevenuePerShareTTM))
		}
	}
	{
		const prefix string = ",\"QuarterlyRevenueGrowthYOY\":"
		out.RawString(prefix)
		if in.QuarterlyRevenueGrowthYOY == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.QuarterlyRevenueGrowthYOY))
		}
	}
	{
		const prefix string = ",\"GrossProfitTTM\":"
		out.RawString(prefix)
		if in.GrossProfitTTM == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.GrossProfitTTM))
		}
	}
	{
		const prefix string = ",\"DilutedEpsTTM\":"
		out.RawString(prefix)
		if in.DilutedEpsTTM == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.DilutedEpsTTM))
		}
	}
	{
		const prefix string = ",\"QuarterlyEarningsGrowthYOY\":"
		out.RawString(prefix)
		if in.QuarterlyEarningsGrowthYOY == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.QuarterlyEarningsGrowthYOY))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tools.Highlights) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tools.Highlights) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tools.Highlights) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tools.Highlights) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi5(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi6(in *jlexer.Lexer, out *tools.General) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Exchange":
			out.Exchange = string(in.String())
		case "CurrencyCode":
			out.CurrencyCode = string(in.String())
		case "CurrencyName":
			out.CurrencyName = string(in.String())
		case "CurrencySymbol":
			out.CurrencySymbol = string(in.String())
		case "CountryName":
			out.CountryName = string(in.String())
		case "CountryISO":
			out.CountryISO = string(in.String())
		case "ISIN":
			if in.IsNull() {
				in.Skip()
				out.ISIN = nil
			} else {
				if out.ISIN == nil {
					out.ISIN = new(string)
				}
				*out.ISIN = string(in.String())
			}
		case "Sector":
			out.Sector = string(in.String())
		case "Industry":
			out.Industry = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "FullTimeEmployees":
			if in.IsNull() {
				in.Skip()
				out.FullTimeEmployees = nil
			} else {
				if out.FullTimeEmployees == nil {
					out.FullTimeEmployees = new(int)
				}
				*out.FullTimeEmployees = int(in.Int())
			}
		case "UpdatedAt":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(string)
				}
				*out.UpdatedAt = string(in.String())
			}
		case "CUSIP":
			if in.IsNull() {
				in.Skip()
				out.Cusip = nil
			} else {
				if out.Cusip == nil {
					out.Cusip = new(string)
				}
				*out.Cusip = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi6(out *jwriter.Writer, in tools.General) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Exchange\":"
		out.RawString(prefix)
		out.String(string(in.Exchange))
	}
	{
		const prefix string = ",\"CurrencyCode\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyCode))
	}
	{
		const prefix string = ",\"CurrencyName\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyName))
	}
	{
		const prefix string = ",\"CurrencySymbol\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbol))
	}
	{
		const prefix string = ",\"CountryName\":"
		out.RawString(prefix)
		out.String(string(in.CountryName))
	}
	{
		const prefix string = ",\"CountryISO\":"
		out.RawString(prefix)
		out.String(string(in.CountryISO))
	}
	{
		const prefix string = ",\"ISIN\":"
		out.RawString(prefix)
		if in.ISIN == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ISIN))
		}
	}
	{
		const prefix string = ",\"Sector\":"
		out.RawString(prefix)
		out.String(string(in.Sector))
	}
	{
		const prefix string = ",\"Industry\":"
		out.RawString(prefix)
		out.String(string(in.Industry))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"FullTimeEmployees\":"
		out.RawString(prefix)
		if in.FullTimeEmployees == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.FullTimeEmployees))
		}
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		if in.UpdatedAt == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.UpdatedAt))
		}
	}
	{
		const prefix string = ",\"CUSIP\":"
		out.RawString(prefix)
		if in.Cusip == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Cusip))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tools.General) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tools.General) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tools.General) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tools.General) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi6(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi7(in *jlexer.Lexer, out *Fundamentals) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LastUpdate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastUpdate).UnmarshalJSON(data))
			}
		case "Ticker":
			out.Ticker = string(in.String())
		case "General":
			(out.General).UnmarshalEasyJSON(in)
		case "Highlights":
			(out.Highlights).UnmarshalEasyJSON(in)
		case "Valuation":
			(out.Valuation).UnmarshalEasyJSON(in)
		case "Technicals":
			(out.Technicals).UnmarshalEasyJSON(in)
		case "SplitsDividends":
			(out.SplitsDividends).UnmarshalEasyJSON(in)
		case "Earnings":
			(out.Earnings).UnmarshalEasyJSON(in)
		case "Financials":
			(out.Financials).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi7(out *jwriter.Writer, in Fundamentals) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LastUpdate\":"
		out.RawString(prefix[1:])
		out.Raw((in.LastUpdate).MarshalJSON())
	}
	{
		const prefix string = ",\"Ticker\":"
		out.RawString(prefix)
		out.String(string(in.Ticker))
	}
	{
		const prefix string = ",\"General\":"
		out.RawString(prefix)
		(in.General).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Highlights\":"
		out.RawString(prefix)
		(in.Highlights).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Valuation\":"
		out.RawString(prefix)
		(in.Valuation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Technicals\":"
		out.RawString(prefix)
		(in.Technicals).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"SplitsDividends\":"
		out.RawString(prefix)
		(in.SplitsDividends).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Earnings\":"
		out.RawString(prefix)
		(in.Earnings).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Financials\":"
		out.RawString(prefix)
		(in.Financials).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Fundamentals) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fundamentals) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Fundamentals) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fundamentals) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi7(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi8(in *jlexer.Lexer, out *tools.Financials) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Balance_Sheet":
			(out.BalanceSheet).UnmarshalEasyJSON(in)
		case "Cash_Flow":
			(out.CashFlow).UnmarshalEasyJSON(in)
		case "Income_Statement":
			(out.IncomeStatement).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi8(out *jwriter.Writer, in tools.Financials) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Balance_Sheet\":"
		out.RawString(prefix[1:])
		(in.BalanceSheet).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Cash_Flow\":"
		out.RawString(prefix)
		(in.CashFlow).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Income_Statement\":"
		out.RawString(prefix)
		(in.IncomeStatement).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tools.Financials) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tools.Financials) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tools.Financials) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tools.Financials) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi8(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi9(in *jlexer.Lexer, out *EarningsInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "epsActual":
			if in.IsNull() {
				in.Skip()
				out.EpsActual = nil
			} else {
				if out.EpsActual == nil {
					out.EpsActual = new(float64)
				}
				*out.EpsActual = float64(in.Float64())
			}
		case "epsEstimate":
			if in.IsNull() {
				in.Skip()
				out.EpsEstimate = nil
			} else {
				if out.EpsEstimate == nil {
					out.EpsEstimate = new(float64)
				}
				*out.EpsEstimate = float64(in.Float64())
			}
		case "epsDifference":
			if in.IsNull() {
				in.Skip()
				out.EpsDifference = nil
			} else {
				if out.EpsDifference == nil {
					out.EpsDifference = new(float64)
				}
				*out.EpsDifference = float64(in.Float64())
			}
		case "surprisePercent":
			if in.IsNull() {
				in.Skip()
				out.SurprisePercent = nil
			} else {
				if out.SurprisePercent == nil {
					out.SurprisePercent = new(float64)
				}
				*out.SurprisePercent = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi9(out *jwriter.Writer, in EarningsInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"epsActual\":"
		out.RawString(prefix)
		if in.EpsActual == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.EpsActual))
		}
	}
	{
		const prefix string = ",\"epsEstimate\":"
		out.RawString(prefix)
		if in.EpsEstimate == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.EpsEstimate))
		}
	}
	{
		const prefix string = ",\"epsDifference\":"
		out.RawString(prefix)
		if in.EpsDifference == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.EpsDifference))
		}
	}
	{
		const prefix string = ",\"surprisePercent\":"
		out.RawString(prefix)
		if in.SurprisePercent == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.SurprisePercent))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EarningsInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EarningsInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EarningsInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EarningsInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi9(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi10(in *jlexer.Lexer, out *tools.Earnings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Last_0":
			(out.Last0).UnmarshalEasyJSON(in)
		case "Last_1":
			(out.Last1).UnmarshalEasyJSON(in)
		case "Last_2":
			(out.Last2).UnmarshalEasyJSON(in)
		case "Last_3":
			(out.Last3).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi10(out *jwriter.Writer, in tools.Earnings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Last_0\":"
		out.RawString(prefix[1:])
		(in.Last0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Last_1\":"
		out.RawString(prefix)
		(in.Last1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Last_2\":"
		out.RawString(prefix)
		(in.Last2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Last_3\":"
		out.RawString(prefix)
		(in.Last3).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tools.Earnings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tools.Earnings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tools.Earnings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tools.Earnings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi10(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi11(in *jlexer.Lexer, out *CashFlowInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "filing_date":
			if in.IsNull() {
				in.Skip()
				out.FilingDate = nil
			} else {
				if out.FilingDate == nil {
					out.FilingDate = new(string)
				}
				*out.FilingDate = string(in.String())
			}
		case "investments":
			if in.IsNull() {
				in.Skip()
				out.Investments = nil
			} else {
				if out.Investments == nil {
					out.Investments = new(float64)
				}
				*out.Investments = float64(in.Float64())
			}
		case "changeToLiabilities":
			if in.IsNull() {
				in.Skip()
				out.ChangeToLiabilities = nil
			} else {
				if out.ChangeToLiabilities == nil {
					out.ChangeToLiabilities = new(float64)
				}
				*out.ChangeToLiabilities = float64(in.Float64())
			}
		case "totalCashflowsFromInvestingActivities":
			if in.IsNull() {
				in.Skip()
				out.TotalCashflowsFromInvestingActivities = nil
			} else {
				if out.TotalCashflowsFromInvestingActivities == nil {
					out.TotalCashflowsFromInvestingActivities = new(float64)
				}
				*out.TotalCashflowsFromInvestingActivities = float64(in.Float64())
			}
		case "netBorrowings":
			if in.IsNull() {
				in.Skip()
				out.NetBorrowings = nil
			} else {
				if out.NetBorrowings == nil {
					out.NetBorrowings = new(float64)
				}
				*out.NetBorrowings = float64(in.Float64())
			}
		case "totalCashFromFinancingActivities":
			if in.IsNull() {
				in.Skip()
				out.TotalCashFromFinancingActivities = nil
			} else {
				if out.TotalCashFromFinancingActivities == nil {
					out.TotalCashFromFinancingActivities = new(float64)
				}
				*out.TotalCashFromFinancingActivities = float64(in.Float64())
			}
		case "changeToOperatingActivities":
			if in.IsNull() {
				in.Skip()
				out.ChangeToOperatingActivities = nil
			} else {
				if out.ChangeToOperatingActivities == nil {
					out.ChangeToOperatingActivities = new(float64)
				}
				*out.ChangeToOperatingActivities = float64(in.Float64())
			}
		case "netIncome":
			if in.IsNull() {
				in.Skip()
				out.NetIncome = nil
			} else {
				if out.NetIncome == nil {
					out.NetIncome = new(float64)
				}
				*out.NetIncome = float64(in.Float64())
			}
		case "changeInCash":
			if in.IsNull() {
				in.Skip()
				out.ChangeInCash = nil
			} else {
				if out.ChangeInCash == nil {
					out.ChangeInCash = new(float64)
				}
				*out.ChangeInCash = float64(in.Float64())
			}
		case "totalCashFromOperatingActivities":
			if in.IsNull() {
				in.Skip()
				out.TotalCashFromOperatingActivities = nil
			} else {
				if out.TotalCashFromOperatingActivities == nil {
					out.TotalCashFromOperatingActivities = new(float64)
				}
				*out.TotalCashFromOperatingActivities = float64(in.Float64())
			}
		case "depreciation":
			if in.IsNull() {
				in.Skip()
				out.Depreciation = nil
			} else {
				if out.Depreciation == nil {
					out.Depreciation = new(float64)
				}
				*out.Depreciation = float64(in.Float64())
			}
		case "otherCashflowsFromInvestingActivities":
			if in.IsNull() {
				in.Skip()
				out.OtherCashflowsFromInvestingActivities = nil
			} else {
				if out.OtherCashflowsFromInvestingActivities == nil {
					out.OtherCashflowsFromInvestingActivities = new(float64)
				}
				*out.OtherCashflowsFromInvestingActivities = float64(in.Float64())
			}
		case "dividendsPaid":
			if in.IsNull() {
				in.Skip()
				out.DividendsPaid = nil
			} else {
				if out.DividendsPaid == nil {
					out.DividendsPaid = new(float64)
				}
				*out.DividendsPaid = float64(in.Float64())
			}
		case "changeToInventory":
			if in.IsNull() {
				in.Skip()
				out.ChangeToInventory = nil
			} else {
				if out.ChangeToInventory == nil {
					out.ChangeToInventory = new(float64)
				}
				*out.ChangeToInventory = float64(in.Float64())
			}
		case "changeToAccountReceivables":
			if in.IsNull() {
				in.Skip()
				out.ChangeToAccountReceivables = nil
			} else {
				if out.ChangeToAccountReceivables == nil {
					out.ChangeToAccountReceivables = new(float64)
				}
				*out.ChangeToAccountReceivables = float64(in.Float64())
			}
		case "salePurchaseOfStock":
			if in.IsNull() {
				in.Skip()
				out.SalePurchaseOfStock = nil
			} else {
				if out.SalePurchaseOfStock == nil {
					out.SalePurchaseOfStock = new(float64)
				}
				*out.SalePurchaseOfStock = float64(in.Float64())
			}
		case "otherCashflowsFromFinancingActivities":
			if in.IsNull() {
				in.Skip()
				out.OtherCashflowsFromFinancingActivities = nil
			} else {
				if out.OtherCashflowsFromFinancingActivities == nil {
					out.OtherCashflowsFromFinancingActivities = new(float64)
				}
				*out.OtherCashflowsFromFinancingActivities = float64(in.Float64())
			}
		case "changeToNetincome":
			if in.IsNull() {
				in.Skip()
				out.ChangeToNetincome = nil
			} else {
				if out.ChangeToNetincome == nil {
					out.ChangeToNetincome = new(float64)
				}
				*out.ChangeToNetincome = float64(in.Float64())
			}
		case "capitalExpenditures":
			if in.IsNull() {
				in.Skip()
				out.CapitalExpenditures = nil
			} else {
				if out.CapitalExpenditures == nil {
					out.CapitalExpenditures = new(float64)
				}
				*out.CapitalExpenditures = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi11(out *jwriter.Writer, in CashFlowInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"filing_date\":"
		out.RawString(prefix)
		if in.FilingDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FilingDate))
		}
	}
	{
		const prefix string = ",\"investments\":"
		out.RawString(prefix)
		if in.Investments == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Investments))
		}
	}
	{
		const prefix string = ",\"changeToLiabilities\":"
		out.RawString(prefix)
		if in.ChangeToLiabilities == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ChangeToLiabilities))
		}
	}
	{
		const prefix string = ",\"totalCashflowsFromInvestingActivities\":"
		out.RawString(prefix)
		if in.TotalCashflowsFromInvestingActivities == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalCashflowsFromInvestingActivities))
		}
	}
	{
		const prefix string = ",\"netBorrowings\":"
		out.RawString(prefix)
		if in.NetBorrowings == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.NetBorrowings))
		}
	}
	{
		const prefix string = ",\"totalCashFromFinancingActivities\":"
		out.RawString(prefix)
		if in.TotalCashFromFinancingActivities == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalCashFromFinancingActivities))
		}
	}
	{
		const prefix string = ",\"changeToOperatingActivities\":"
		out.RawString(prefix)
		if in.ChangeToOperatingActivities == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ChangeToOperatingActivities))
		}
	}
	{
		const prefix string = ",\"netIncome\":"
		out.RawString(prefix)
		if in.NetIncome == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.NetIncome))
		}
	}
	{
		const prefix string = ",\"changeInCash\":"
		out.RawString(prefix)
		if in.ChangeInCash == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ChangeInCash))
		}
	}
	{
		const prefix string = ",\"totalCashFromOperatingActivities\":"
		out.RawString(prefix)
		if in.TotalCashFromOperatingActivities == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalCashFromOperatingActivities))
		}
	}
	{
		const prefix string = ",\"depreciation\":"
		out.RawString(prefix)
		if in.Depreciation == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Depreciation))
		}
	}
	{
		const prefix string = ",\"otherCashflowsFromInvestingActivities\":"
		out.RawString(prefix)
		if in.OtherCashflowsFromInvestingActivities == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.OtherCashflowsFromInvestingActivities))
		}
	}
	{
		const prefix string = ",\"dividendsPaid\":"
		out.RawString(prefix)
		if in.DividendsPaid == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.DividendsPaid))
		}
	}
	{
		const prefix string = ",\"changeToInventory\":"
		out.RawString(prefix)
		if in.ChangeToInventory == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ChangeToInventory))
		}
	}
	{
		const prefix string = ",\"changeToAccountReceivables\":"
		out.RawString(prefix)
		if in.ChangeToAccountReceivables == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ChangeToAccountReceivables))
		}
	}
	{
		const prefix string = ",\"salePurchaseOfStock\":"
		out.RawString(prefix)
		if in.SalePurchaseOfStock == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.SalePurchaseOfStock))
		}
	}
	{
		const prefix string = ",\"otherCashflowsFromFinancingActivities\":"
		out.RawString(prefix)
		if in.OtherCashflowsFromFinancingActivities == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.OtherCashflowsFromFinancingActivities))
		}
	}
	{
		const prefix string = ",\"changeToNetincome\":"
		out.RawString(prefix)
		if in.ChangeToNetincome == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ChangeToNetincome))
		}
	}
	{
		const prefix string = ",\"capitalExpenditures\":"
		out.RawString(prefix)
		if in.CapitalExpenditures == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.CapitalExpenditures))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CashFlowInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CashFlowInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CashFlowInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CashFlowInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi11(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi12(in *jlexer.Lexer, out *tools.CashFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency_symbol":
			out.CurrencySymbol = string(in.String())
		case "quarterly_last_0":
			(out.QuarterlyLast0).UnmarshalEasyJSON(in)
		case "quarterly_last_1":
			(out.QuarterlyLast1).UnmarshalEasyJSON(in)
		case "quarterly_last_2":
			(out.QuarterlyLast2).UnmarshalEasyJSON(in)
		case "quarterly_last_3":
			(out.QuarterlyLast3).UnmarshalEasyJSON(in)
		case "yearly_last_0":
			(out.YearlyLast0).UnmarshalEasyJSON(in)
		case "yearly_last_1":
			(out.YearlyLast1).UnmarshalEasyJSON(in)
		case "yearly_last_2":
			(out.YearlyLast2).UnmarshalEasyJSON(in)
		case "yearly_last_3":
			(out.YearlyLast3).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi12(out *jwriter.Writer, in tools.CashFlow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currency_symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.CurrencySymbol))
	}
	{
		const prefix string = ",\"quarterly_last_0\":"
		out.RawString(prefix)
		(in.QuarterlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_1\":"
		out.RawString(prefix)
		(in.QuarterlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_2\":"
		out.RawString(prefix)
		(in.QuarterlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_3\":"
		out.RawString(prefix)
		(in.QuarterlyLast3).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_0\":"
		out.RawString(prefix)
		(in.YearlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_1\":"
		out.RawString(prefix)
		(in.YearlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_2\":"
		out.RawString(prefix)
		(in.YearlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_3\":"
		out.RawString(prefix)
		(in.YearlyLast3).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tools.CashFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tools.CashFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tools.CashFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tools.CashFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi12(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi13(in *jlexer.Lexer, out *BalanceSheetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "filing_date":
			if in.IsNull() {
				in.Skip()
				out.FilingDate = nil
			} else {
				if out.FilingDate == nil {
					out.FilingDate = new(string)
				}
				*out.FilingDate = string(in.String())
			}
		case "intangibleAssets":
			if in.IsNull() {
				in.Skip()
				out.IntangibleAssets = nil
			} else {
				if out.IntangibleAssets == nil {
					out.IntangibleAssets = new(float64)
				}
				*out.IntangibleAssets = float64(in.Float64())
			}
		case "totalLiab":
			if in.IsNull() {
				in.Skip()
				out.TotalLiab = nil
			} else {
				if out.TotalLiab == nil {
					out.TotalLiab = new(float64)
				}
				*out.TotalLiab = float64(in.Float64())
			}
		case "totalStockholderEquity":
			if in.IsNull() {
				in.Skip()
				out.TotalStockholderEquity = nil
			} else {
				if out.TotalStockholderEquity == nil {
					out.TotalStockholderEquity = new(float64)
				}
				*out.TotalStockholderEquity = float64(in.Float64())
			}
		case "deferredLongTermLiab":
			if in.IsNull() {
				in.Skip()
				out.DeferredLongTermLiab = nil
			} else {
				if out.DeferredLongTermLiab == nil {
					out.DeferredLongTermLiab = new(float64)
				}
				*out.DeferredLongTermLiab = float64(in.Float64())
			}
		case "otherCurrentLiab":
			if in.IsNull() {
				in.Skip()
				out.OtherCurrentLiab = nil
			} else {
				if out.OtherCurrentLiab == nil {
					out.OtherCurrentLiab = new(float64)
				}
				*out.OtherCurrentLiab = float64(in.Float64())
			}
		case "totalAssets":
			if in.IsNull() {
				in.Skip()
				out.TotalAssets = nil
			} else {
				if out.TotalAssets == nil {
					out.TotalAssets = new(float64)
				}
				*out.TotalAssets = float64(in.Float64())
			}
		case "commonStock":
			if in.IsNull() {
				in.Skip()
				out.CommonStock = nil
			} else {
				if out.CommonStock == nil {
					out.CommonStock = new(float64)
				}
				*out.CommonStock = float64(in.Float64())
			}
		case "commonStockSharesOutStanding":
			if in.IsNull() {
				in.Skip()
				out.CommonStockSharesOutstanding = nil
			} else {
				if out.CommonStockSharesOutstanding == nil {
					out.CommonStockSharesOutstanding = new(float64)
				}
				*out.CommonStockSharesOutstanding = float64(in.Float64())
			}
		case "otherCurrentAssets":
			if in.IsNull() {
				in.Skip()
				out.OtherCurrentAssets = nil
			} else {
				if out.OtherCurrentAssets == nil {
					out.OtherCurrentAssets = new(float64)
				}
				*out.OtherCurrentAssets = float64(in.Float64())
			}
		case "retainedEarnings":
			if in.IsNull() {
				in.Skip()
				out.RetainedEarnings = nil
			} else {
				if out.RetainedEarnings == nil {
					out.RetainedEarnings = new(float64)
				}
				*out.RetainedEarnings = float64(in.Float64())
			}
		case "otherLiab":
			if in.IsNull() {
				in.Skip()
				out.OtherLiab = nil
			} else {
				if out.OtherLiab == nil {
					out.OtherLiab = new(float64)
				}
				*out.OtherLiab = float64(in.Float64())
			}
		case "goodWill":
			if in.IsNull() {
				in.Skip()
				out.GoodWill = nil
			} else {
				if out.GoodWill == nil {
					out.GoodWill = new(float64)
				}
				*out.GoodWill = float64(in.Float64())
			}
		case "otherAssets":
			if in.IsNull() {
				in.Skip()
				out.OtherAssets = nil
			} else {
				if out.OtherAssets == nil {
					out.OtherAssets = new(float64)
				}
				*out.OtherAssets = float64(in.Float64())
			}
		case "cash":
			if in.IsNull() {
				in.Skip()
				out.Cash = nil
			} else {
				if out.Cash == nil {
					out.Cash = new(float64)
				}
				*out.Cash = float64(in.Float64())
			}
		case "totalCurrentLiabilities":
			if in.IsNull() {
				in.Skip()
				out.TotalCurrentLiabilities = nil
			} else {
				if out.TotalCurrentLiabilities == nil {
					out.TotalCurrentLiabilities = new(float64)
				}
				*out.TotalCurrentLiabilities = float64(in.Float64())
			}
		case "shortLongTermDebt":
			if in.IsNull() {
				in.Skip()
				out.ShortLongTermDebt = nil
			} else {
				if out.ShortLongTermDebt == nil {
					out.ShortLongTermDebt = new(float64)
				}
				*out.ShortLongTermDebt = float64(in.Float64())
			}
		case "otherStockholderEquity":
			if in.IsNull() {
				in.Skip()
				out.OtherStockholderEquity = nil
			} else {
				if out.OtherStockholderEquity == nil {
					out.OtherStockholderEquity = new(float64)
				}
				*out.OtherStockholderEquity = float64(in.Float64())
			}
		case "propertyPlantEquipment":
			if in.IsNull() {
				in.Skip()
				out.PropertyPlantEquipment = nil
			} else {
				if out.PropertyPlantEquipment == nil {
					out.PropertyPlantEquipment = new(float64)
				}
				*out.PropertyPlantEquipment = float64(in.Float64())
			}
		case "totalCurrentAssets":
			if in.IsNull() {
				in.Skip()
				out.TotalCurrentAssets = nil
			} else {
				if out.TotalCurrentAssets == nil {
					out.TotalCurrentAssets = new(float64)
				}
				*out.TotalCurrentAssets = float64(in.Float64())
			}
		case "longTermInvestments":
			if in.IsNull() {
				in.Skip()
				out.LongTermInvestments = nil
			} else {
				if out.LongTermInvestments == nil {
					out.LongTermInvestments = new(float64)
				}
				*out.LongTermInvestments = float64(in.Float64())
			}
		case "netTangibleAssets":
			if in.IsNull() {
				in.Skip()
				out.NetTangibleAssets = nil
			} else {
				if out.NetTangibleAssets == nil {
					out.NetTangibleAssets = new(float64)
				}
				*out.NetTangibleAssets = float64(in.Float64())
			}
		case "shortTermInvestments":
			if in.IsNull() {
				in.Skip()
				out.ShortTermInvestments = nil
			} else {
				if out.ShortTermInvestments == nil {
					out.ShortTermInvestments = new(float64)
				}
				*out.ShortTermInvestments = float64(in.Float64())
			}
		case "netReceivables":
			if in.IsNull() {
				in.Skip()
				out.NetReceivables = nil
			} else {
				if out.NetReceivables == nil {
					out.NetReceivables = new(float64)
				}
				*out.NetReceivables = float64(in.Float64())
			}
		case "longTermDebt":
			if in.IsNull() {
				in.Skip()
				out.LongTermDebt = nil
			} else {
				if out.LongTermDebt == nil {
					out.LongTermDebt = new(float64)
				}
				*out.LongTermDebt = float64(in.Float64())
			}
		case "inventory":
			if in.IsNull() {
				in.Skip()
				out.Inventory = nil
			} else {
				if out.Inventory == nil {
					out.Inventory = new(float64)
				}
				*out.Inventory = float64(in.Float64())
			}
		case "accountsPayable":
			if in.IsNull() {
				in.Skip()
				out.AccountsPayable = nil
			} else {
				if out.AccountsPayable == nil {
					out.AccountsPayable = new(float64)
				}
				*out.AccountsPayable = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi13(out *jwriter.Writer, in BalanceSheetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"filing_date\":"
		out.RawString(prefix)
		if in.FilingDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FilingDate))
		}
	}
	{
		const prefix string = ",\"intangibleAssets\":"
		out.RawString(prefix)
		if in.IntangibleAssets == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.IntangibleAssets))
		}
	}
	{
		const prefix string = ",\"totalLiab\":"
		out.RawString(prefix)
		if in.TotalLiab == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalLiab))
		}
	}
	{
		const prefix string = ",\"totalStockholderEquity\":"
		out.RawString(prefix)
		if in.TotalStockholderEquity == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalStockholderEquity))
		}
	}
	{
		const prefix string = ",\"deferredLongTermLiab\":"
		out.RawString(prefix)
		if in.DeferredLongTermLiab == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.DeferredLongTermLiab))
		}
	}
	{
		const prefix string = ",\"otherCurrentLiab\":"
		out.RawString(prefix)
		if in.OtherCurrentLiab == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.OtherCurrentLiab))
		}
	}
	{
		const prefix string = ",\"totalAssets\":"
		out.RawString(prefix)
		if in.TotalAssets == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalAssets))
		}
	}
	{
		const prefix string = ",\"commonStock\":"
		out.RawString(prefix)
		if in.CommonStock == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.CommonStock))
		}
	}
	{
		const prefix string = ",\"commonStockSharesOutStanding\":"
		out.RawString(prefix)
		if in.CommonStockSharesOutstanding == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.CommonStockSharesOutstanding))
		}
	}
	{
		const prefix string = ",\"otherCurrentAssets\":"
		out.RawString(prefix)
		if in.OtherCurrentAssets == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.OtherCurrentAssets))
		}
	}
	{
		const prefix string = ",\"retainedEarnings\":"
		out.RawString(prefix)
		if in.RetainedEarnings == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.RetainedEarnings))
		}
	}
	{
		const prefix string = ",\"otherLiab\":"
		out.RawString(prefix)
		if in.OtherLiab == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.OtherLiab))
		}
	}
	{
		const prefix string = ",\"goodWill\":"
		out.RawString(prefix)
		if in.GoodWill == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.GoodWill))
		}
	}
	{
		const prefix string = ",\"otherAssets\":"
		out.RawString(prefix)
		if in.OtherAssets == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.OtherAssets))
		}
	}
	{
		const prefix string = ",\"cash\":"
		out.RawString(prefix)
		if in.Cash == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Cash))
		}
	}
	{
		const prefix string = ",\"totalCurrentLiabilities\":"
		out.RawString(prefix)
		if in.TotalCurrentLiabilities == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalCurrentLiabilities))
		}
	}
	{
		const prefix string = ",\"shortLongTermDebt\":"
		out.RawString(prefix)
		if in.ShortLongTermDebt == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ShortLongTermDebt))
		}
	}
	{
		const prefix string = ",\"otherStockholderEquity\":"
		out.RawString(prefix)
		if in.OtherStockholderEquity == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.OtherStockholderEquity))
		}
	}
	{
		const prefix string = ",\"propertyPlantEquipment\":"
		out.RawString(prefix)
		if in.PropertyPlantEquipment == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PropertyPlantEquipment))
		}
	}
	{
		const prefix string = ",\"totalCurrentAssets\":"
		out.RawString(prefix)
		if in.TotalCurrentAssets == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalCurrentAssets))
		}
	}
	{
		const prefix string = ",\"longTermInvestments\":"
		out.RawString(prefix)
		if in.LongTermInvestments == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.LongTermInvestments))
		}
	}
	{
		const prefix string = ",\"netTangibleAssets\":"
		out.RawString(prefix)
		if in.NetTangibleAssets == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.NetTangibleAssets))
		}
	}
	{
		const prefix string = ",\"shortTermInvestments\":"
		out.RawString(prefix)
		if in.ShortTermInvestments == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.ShortTermInvestments))
		}
	}
	{
		const prefix string = ",\"netReceivables\":"
		out.RawString(prefix)
		if in.NetReceivables == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.NetReceivables))
		}
	}
	{
		const prefix string = ",\"longTermDebt\":"
		out.RawString(prefix)
		if in.LongTermDebt == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.LongTermDebt))
		}
	}
	{
		const prefix string = ",\"inventory\":"
		out.RawString(prefix)
		if in.Inventory == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Inventory))
		}
	}
	{
		const prefix string = ",\"accountsPayable\":"
		out.RawString(prefix)
		if in.AccountsPayable == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.AccountsPayable))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceSheetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceSheetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceSheetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceSheetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi13(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi14(in *jlexer.Lexer, out *tools.BalanceSheet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency_symbol":
			out.CurrencySymbol = string(in.String())
		case "quarterly_last_0":
			(out.QuarterlyLast0).UnmarshalEasyJSON(in)
		case "quarterly_last_1":
			(out.QuarterlyLast1).UnmarshalEasyJSON(in)
		case "quarterly_last_2":
			(out.QuarterlyLast2).UnmarshalEasyJSON(in)
		case "quarterly_last_3":
			(out.QuarterlyLast3).UnmarshalEasyJSON(in)
		case "yearly_last_0":
			(out.YearlyLast0).UnmarshalEasyJSON(in)
		case "yearly_last_1":
			(out.YearlyLast1).UnmarshalEasyJSON(in)
		case "yearly_last_2":
			(out.YearlyLast2).UnmarshalEasyJSON(in)
		case "yearly_last_3":
			(out.YearlyLast3).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi14(out *jwriter.Writer, in tools.BalanceSheet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currency_symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.CurrencySymbol))
	}
	{
		const prefix string = ",\"quarterly_last_0\":"
		out.RawString(prefix)
		(in.QuarterlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_1\":"
		out.RawString(prefix)
		(in.QuarterlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_2\":"
		out.RawString(prefix)
		(in.QuarterlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"quarterly_last_3\":"
		out.RawString(prefix)
		(in.QuarterlyLast3).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_0\":"
		out.RawString(prefix)
		(in.YearlyLast0).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_1\":"
		out.RawString(prefix)
		(in.YearlyLast1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_2\":"
		out.RawString(prefix)
		(in.YearlyLast2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearly_last_3\":"
		out.RawString(prefix)
		(in.YearlyLast3).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tools.BalanceSheet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tools.BalanceSheet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tools.BalanceSheet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tools.BalanceSheet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi14(l, v)
}
