// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package eodhdapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE48f2accDecodeGithubComGituEodhdapi(in *jlexer.Lexer, out *YearCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Year":
			out.Year = int(in.Int())
		case "Count":
			out.Count = int(in.Int())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi(out *jwriter.Writer, in YearCount) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Year != 0 {
		const prefix string = ",\"Year\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Year))
	}
	if in.Count != 0 {
		const prefix string = ",\"Count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v YearCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v YearCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *YearCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *YearCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi1(in *jlexer.Lexer, out *Weight) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Category":
			out.Category = string(in.String())
		case "Equity_%":
			out.EquityPercent = string(in.String())
		case "Relative_to_Category":
			if in.IsNull() {
				in.Skip()
				out.RelativeToCategory = nil
			} else {
				if out.RelativeToCategory == nil {
					out.RelativeToCategory = new(Decimal)
				}
				(*out.RelativeToCategory).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi1(out *jwriter.Writer, in Weight) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Category != "" {
		const prefix string = ",\"Category\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Category))
	}
	if in.EquityPercent != "" {
		const prefix string = ",\"Equity_%\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EquityPercent))
	}
	if in.RelativeToCategory != nil {
		const prefix string = ",\"Relative_to_Category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RelativeToCategory).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Weight) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Weight) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Weight) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Weight) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi1(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi2(in *jlexer.Lexer, out *ValueGrowth) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Category_Average":
			if in.IsNull() {
				in.Skip()
				out.CategoryAverage = nil
			} else {
				if out.CategoryAverage == nil {
					out.CategoryAverage = new(Decimal)
				}
				(*out.CategoryAverage).UnmarshalEasyJSON(in)
			}
		case "Benchmark":
			if in.IsNull() {
				in.Skip()
				out.Benchmark = nil
			} else {
				if out.Benchmark == nil {
					out.Benchmark = new(Decimal)
				}
				(*out.Benchmark).UnmarshalEasyJSON(in)
			}
		case "Stock_Portfolio":
			if in.IsNull() {
				in.Skip()
				out.StockPortfolio = nil
			} else {
				if out.StockPortfolio == nil {
					out.StockPortfolio = new(Decimal)
				}
				(*out.StockPortfolio).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi2(out *jwriter.Writer, in ValueGrowth) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.CategoryAverage != nil {
		const prefix string = ",\"Category_Average\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CategoryAverage).MarshalEasyJSON(out)
	}
	if in.Benchmark != nil {
		const prefix string = ",\"Benchmark\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Benchmark).MarshalEasyJSON(out)
	}
	if in.StockPortfolio != nil {
		const prefix string = ",\"Stock_Portfolio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.StockPortfolio).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ValueGrowth) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ValueGrowth) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ValueGrowth) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ValueGrowth) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi2(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi3(in *jlexer.Lexer, out *Valuation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TrailingPE":
			if in.IsNull() {
				in.Skip()
				out.TrailingPE = nil
			} else {
				if out.TrailingPE == nil {
					out.TrailingPE = new(Decimal)
				}
				(*out.TrailingPE).UnmarshalEasyJSON(in)
			}
		case "ForwardPE":
			if in.IsNull() {
				in.Skip()
				out.ForwardPE = nil
			} else {
				if out.ForwardPE == nil {
					out.ForwardPE = new(Decimal)
				}
				(*out.ForwardPE).UnmarshalEasyJSON(in)
			}
		case "PriceSalesTTM":
			if in.IsNull() {
				in.Skip()
				out.PriceSalesTTM = nil
			} else {
				if out.PriceSalesTTM == nil {
					out.PriceSalesTTM = new(Decimal)
				}
				(*out.PriceSalesTTM).UnmarshalEasyJSON(in)
			}
		case "PriceBookMRQ":
			if in.IsNull() {
				in.Skip()
				out.PriceBookMRQ = nil
			} else {
				if out.PriceBookMRQ == nil {
					out.PriceBookMRQ = new(Decimal)
				}
				(*out.PriceBookMRQ).UnmarshalEasyJSON(in)
			}
		case "EnterpriseValueRevenue":
			if in.IsNull() {
				in.Skip()
				out.EnterpriseValueRevenue = nil
			} else {
				if out.EnterpriseValueRevenue == nil {
					out.EnterpriseValueRevenue = new(Decimal)
				}
				(*out.EnterpriseValueRevenue).UnmarshalEasyJSON(in)
			}
		case "EnterpriseValueEbitda":
			if in.IsNull() {
				in.Skip()
				out.EnterpriseValueEbitda = nil
			} else {
				if out.EnterpriseValueEbitda == nil {
					out.EnterpriseValueEbitda = new(Decimal)
				}
				(*out.EnterpriseValueEbitda).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi3(out *jwriter.Writer, in Valuation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TrailingPE != nil {
		const prefix string = ",\"TrailingPE\":"
		first = false
		out.RawString(prefix[1:])
		(*in.TrailingPE).MarshalEasyJSON(out)
	}
	if in.ForwardPE != nil {
		const prefix string = ",\"ForwardPE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ForwardPE).MarshalEasyJSON(out)
	}
	if in.PriceSalesTTM != nil {
		const prefix string = ",\"PriceSalesTTM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PriceSalesTTM).MarshalEasyJSON(out)
	}
	if in.PriceBookMRQ != nil {
		const prefix string = ",\"PriceBookMRQ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PriceBookMRQ).MarshalEasyJSON(out)
	}
	if in.EnterpriseValueRevenue != nil {
		const prefix string = ",\"EnterpriseValueRevenue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EnterpriseValueRevenue).MarshalEasyJSON(out)
	}
	if in.EnterpriseValueEbitda != nil {
		const prefix string = ",\"EnterpriseValueEbitda\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EnterpriseValueEbitda).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Valuation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Valuation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Valuation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Valuation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi3(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi4(in *jlexer.Lexer, out *TopHolding) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Owned":
			if in.IsNull() {
				in.Skip()
				out.Owned = nil
			} else {
				if out.Owned == nil {
					out.Owned = new(string)
				}
				*out.Owned = string(in.String())
			}
		case "Change":
			if in.IsNull() {
				in.Skip()
				out.Change = nil
			} else {
				if out.Change == nil {
					out.Change = new(string)
				}
				*out.Change = string(in.String())
			}
		case "Weight":
			if in.IsNull() {
				in.Skip()
				out.Weight = nil
			} else {
				if out.Weight == nil {
					out.Weight = new(string)
				}
				*out.Weight = string(in.String())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi4(out *jwriter.Writer, in TopHolding) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Owned != nil {
		const prefix string = ",\"Owned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Owned))
	}
	if in.Change != nil {
		const prefix string = ",\"Change\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Change))
	}
	if in.Weight != nil {
		const prefix string = ",\"Weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Weight))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopHolding) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopHolding) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopHolding) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopHolding) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi4(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi5(in *jlexer.Lexer, out *Technicals) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Beta":
			if in.IsNull() {
				in.Skip()
				out.Beta = nil
			} else {
				if out.Beta == nil {
					out.Beta = new(Decimal)
				}
				(*out.Beta).UnmarshalEasyJSON(in)
			}
		case "52WeekHigh":
			if in.IsNull() {
				in.Skip()
				out.FiftyTwoWeekHigh = nil
			} else {
				if out.FiftyTwoWeekHigh == nil {
					out.FiftyTwoWeekHigh = new(Decimal)
				}
				(*out.FiftyTwoWeekHigh).UnmarshalEasyJSON(in)
			}
		case "52WeekLow":
			if in.IsNull() {
				in.Skip()
				out.FiftyTwoWeekLow = nil
			} else {
				if out.FiftyTwoWeekLow == nil {
					out.FiftyTwoWeekLow = new(Decimal)
				}
				(*out.FiftyTwoWeekLow).UnmarshalEasyJSON(in)
			}
		case "50DayMA":
			if in.IsNull() {
				in.Skip()
				out.FiftyDayMA = nil
			} else {
				if out.FiftyDayMA == nil {
					out.FiftyDayMA = new(Decimal)
				}
				(*out.FiftyDayMA).UnmarshalEasyJSON(in)
			}
		case "200DayMA":
			if in.IsNull() {
				in.Skip()
				out.TwoHundredDayMA = nil
			} else {
				if out.TwoHundredDayMA == nil {
					out.TwoHundredDayMA = new(Decimal)
				}
				(*out.TwoHundredDayMA).UnmarshalEasyJSON(in)
			}
		case "SharesShort":
			if in.IsNull() {
				in.Skip()
				out.SharesShort = nil
			} else {
				if out.SharesShort == nil {
					out.SharesShort = new(Decimal)
				}
				(*out.SharesShort).UnmarshalEasyJSON(in)
			}
		case "SharesShortPriorMonth":
			if in.IsNull() {
				in.Skip()
				out.SharesShortPriorMonth = nil
			} else {
				if out.SharesShortPriorMonth == nil {
					out.SharesShortPriorMonth = new(Decimal)
				}
				(*out.SharesShortPriorMonth).UnmarshalEasyJSON(in)
			}
		case "ShortRatio":
			if in.IsNull() {
				in.Skip()
				out.ShortRatio = nil
			} else {
				if out.ShortRatio == nil {
					out.ShortRatio = new(Decimal)
				}
				(*out.ShortRatio).UnmarshalEasyJSON(in)
			}
		case "ShortPercent":
			if in.IsNull() {
				in.Skip()
				out.ShortPercent = nil
			} else {
				if out.ShortPercent == nil {
					out.ShortPercent = new(Decimal)
				}
				(*out.ShortPercent).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi5(out *jwriter.Writer, in Technicals) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Beta != nil {
		const prefix string = ",\"Beta\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Beta).MarshalEasyJSON(out)
	}
	if in.FiftyTwoWeekHigh != nil {
		const prefix string = ",\"52WeekHigh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FiftyTwoWeekHigh).MarshalEasyJSON(out)
	}
	if in.FiftyTwoWeekLow != nil {
		const prefix string = ",\"52WeekLow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FiftyTwoWeekLow).MarshalEasyJSON(out)
	}
	if in.FiftyDayMA != nil {
		const prefix string = ",\"50DayMA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FiftyDayMA).MarshalEasyJSON(out)
	}
	if in.TwoHundredDayMA != nil {
		const prefix string = ",\"200DayMA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TwoHundredDayMA).MarshalEasyJSON(out)
	}
	if in.SharesShort != nil {
		const prefix string = ",\"SharesShort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SharesShort).MarshalEasyJSON(out)
	}
	if in.SharesShortPriorMonth != nil {
		const prefix string = ",\"SharesShortPriorMonth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SharesShortPriorMonth).MarshalEasyJSON(out)
	}
	if in.ShortRatio != nil {
		const prefix string = ",\"ShortRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShortRatio).MarshalEasyJSON(out)
	}
	if in.ShortPercent != nil {
		const prefix string = ",\"ShortPercent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShortPercent).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Technicals) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Technicals) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Technicals) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Technicals) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi5(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi6(in *jlexer.Lexer, out *SplitsDividends) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ForwardAnnualDividendRate":
			if in.IsNull() {
				in.Skip()
				out.ForwardAnnualDividendRate = nil
			} else {
				if out.ForwardAnnualDividendRate == nil {
					out.ForwardAnnualDividendRate = new(Decimal)
				}
				(*out.ForwardAnnualDividendRate).UnmarshalEasyJSON(in)
			}
		case "ForwardAnnualDividendYield":
			if in.IsNull() {
				in.Skip()
				out.ForwardAnnualDividendYield = nil
			} else {
				if out.ForwardAnnualDividendYield == nil {
					out.ForwardAnnualDividendYield = new(Decimal)
				}
				(*out.ForwardAnnualDividendYield).UnmarshalEasyJSON(in)
			}
		case "PayoutRatio":
			if in.IsNull() {
				in.Skip()
				out.PayoutRatio = nil
			} else {
				if out.PayoutRatio == nil {
					out.PayoutRatio = new(Decimal)
				}
				(*out.PayoutRatio).UnmarshalEasyJSON(in)
			}
		case "DividendDate":
			out.DividendDate = string(in.String())
		case "ExDividendDate":
			out.ExDividendDate = string(in.String())
		case "LastSplitFactor":
			out.LastSplitFactor = string(in.String())
		case "LastSplitDate":
			out.LastSplitDate = string(in.String())
		case "NumberDividendsByYear":
			(out.NumberDividendsByYear).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi6(out *jwriter.Writer, in SplitsDividends) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ForwardAnnualDividendRate != nil {
		const prefix string = ",\"ForwardAnnualDividendRate\":"
		first = false
		out.RawString(prefix[1:])
		(*in.ForwardAnnualDividendRate).MarshalEasyJSON(out)
	}
	if in.ForwardAnnualDividendYield != nil {
		const prefix string = ",\"ForwardAnnualDividendYield\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ForwardAnnualDividendYield).MarshalEasyJSON(out)
	}
	if in.PayoutRatio != nil {
		const prefix string = ",\"PayoutRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PayoutRatio).MarshalEasyJSON(out)
	}
	if in.DividendDate != "" {
		const prefix string = ",\"DividendDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DividendDate))
	}
	if in.ExDividendDate != "" {
		const prefix string = ",\"ExDividendDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExDividendDate))
	}
	if in.LastSplitFactor != "" {
		const prefix string = ",\"LastSplitFactor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastSplitFactor))
	}
	if in.LastSplitDate != "" {
		const prefix string = ",\"LastSplitDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastSplitDate))
	}
	if len(in.NumberDividendsByYear) != 0 {
		const prefix string = ",\"NumberDividendsByYear\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v1, v2 := range in.NumberDividendsByYear {
				if v1 > 0 {
					out.RawByte(',')
				}
				(v2).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SplitsDividends) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SplitsDividends) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SplitsDividends) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SplitsDividends) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi6(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi7(in *jlexer.Lexer, out *SharesStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SharesOutstanding":
			if in.IsNull() {
				in.Skip()
				out.SharesOutstanding = nil
			} else {
				if out.SharesOutstanding == nil {
					out.SharesOutstanding = new(Decimal)
				}
				(*out.SharesOutstanding).UnmarshalEasyJSON(in)
			}
		case "SharesFloat":
			if in.IsNull() {
				in.Skip()
				out.SharesFloat = nil
			} else {
				if out.SharesFloat == nil {
					out.SharesFloat = new(Decimal)
				}
				(*out.SharesFloat).UnmarshalEasyJSON(in)
			}
		case "PercentInsiders":
			if in.IsNull() {
				in.Skip()
				out.PercentInsiders = nil
			} else {
				if out.PercentInsiders == nil {
					out.PercentInsiders = new(Decimal)
				}
				(*out.PercentInsiders).UnmarshalEasyJSON(in)
			}
		case "PercentInstitutions":
			if in.IsNull() {
				in.Skip()
				out.PercentInstitutions = nil
			} else {
				if out.PercentInstitutions == nil {
					out.PercentInstitutions = new(Decimal)
				}
				(*out.PercentInstitutions).UnmarshalEasyJSON(in)
			}
		case "SharesShort":
			if in.IsNull() {
				in.Skip()
				out.SharesShort = nil
			} else {
				if out.SharesShort == nil {
					out.SharesShort = new(Decimal)
				}
				(*out.SharesShort).UnmarshalEasyJSON(in)
			}
		case "SharesShortPriorMonth":
			if in.IsNull() {
				in.Skip()
				out.SharesShortPriorMonth = nil
			} else {
				if out.SharesShortPriorMonth == nil {
					out.SharesShortPriorMonth = new(Decimal)
				}
				(*out.SharesShortPriorMonth).UnmarshalEasyJSON(in)
			}
		case "ShortRatio":
			if in.IsNull() {
				in.Skip()
				out.ShortRatio = nil
			} else {
				if out.ShortRatio == nil {
					out.ShortRatio = new(Decimal)
				}
				(*out.ShortRatio).UnmarshalEasyJSON(in)
			}
		case "ShortPercentOutstanding":
			if in.IsNull() {
				in.Skip()
				out.ShortPercentOutstanding = nil
			} else {
				if out.ShortPercentOutstanding == nil {
					out.ShortPercentOutstanding = new(Decimal)
				}
				(*out.ShortPercentOutstanding).UnmarshalEasyJSON(in)
			}
		case "ShortPercentFloat":
			if in.IsNull() {
				in.Skip()
				out.ShortPercentFloat = nil
			} else {
				if out.ShortPercentFloat == nil {
					out.ShortPercentFloat = new(Decimal)
				}
				(*out.ShortPercentFloat).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi7(out *jwriter.Writer, in SharesStats) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SharesOutstanding != nil {
		const prefix string = ",\"SharesOutstanding\":"
		first = false
		out.RawString(prefix[1:])
		(*in.SharesOutstanding).MarshalEasyJSON(out)
	}
	if in.SharesFloat != nil {
		const prefix string = ",\"SharesFloat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SharesFloat).MarshalEasyJSON(out)
	}
	if in.PercentInsiders != nil {
		const prefix string = ",\"PercentInsiders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PercentInsiders).MarshalEasyJSON(out)
	}
	if in.PercentInstitutions != nil {
		const prefix string = ",\"PercentInstitutions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PercentInstitutions).MarshalEasyJSON(out)
	}
	if in.SharesShort != nil {
		const prefix string = ",\"SharesShort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SharesShort).MarshalEasyJSON(out)
	}
	if in.SharesShortPriorMonth != nil {
		const prefix string = ",\"SharesShortPriorMonth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SharesShortPriorMonth).MarshalEasyJSON(out)
	}
	if in.ShortRatio != nil {
		const prefix string = ",\"ShortRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShortRatio).MarshalEasyJSON(out)
	}
	if in.ShortPercentOutstanding != nil {
		const prefix string = ",\"ShortPercentOutstanding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShortPercentOutstanding).MarshalEasyJSON(out)
	}
	if in.ShortPercentFloat != nil {
		const prefix string = ",\"ShortPercentFloat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShortPercentFloat).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SharesStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SharesStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SharesStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SharesStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi7(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi8(in *jlexer.Lexer, out *SharesOutstanding) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "sharesMln":
			out.SharesMln = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi8(out *jwriter.Writer, in SharesOutstanding) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Date != "" {
		const prefix string = ",\"date\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	if in.SharesMln != "" {
		const prefix string = ",\"sharesMln\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SharesMln))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SharesOutstanding) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SharesOutstanding) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SharesOutstanding) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SharesOutstanding) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi8(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi9(in *jlexer.Lexer, out *SectorWeightsGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Cyclical":
			(out.Cyclical).UnmarshalEasyJSON(in)
		case "Defensive":
			(out.Defensive).UnmarshalEasyJSON(in)
		case "Sensitive":
			(out.Sensitive).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi9(out *jwriter.Writer, in SectorWeightsGroup) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Cyclical) != 0 {
		const prefix string = ",\"Cyclical\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v3, v4 := range in.Cyclical {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Defensive) != 0 {
		const prefix string = ",\"Defensive\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Defensive {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Sensitive) != 0 {
		const prefix string = ",\"Sensitive\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Sensitive {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SectorWeightsGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SectorWeightsGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SectorWeightsGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SectorWeightsGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi9(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi10(in *jlexer.Lexer, out *SectorWeight) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = string(in.String())
		case "Category_Average":
			out.CategoryAverage = string(in.String())
		case "Amount_%":
			out.Amount = string(in.String())
		case "Benchmark":
			out.Benchmark = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi10(out *jwriter.Writer, in SectorWeight) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"Type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.CategoryAverage != "" {
		const prefix string = ",\"Category_Average\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CategoryAverage))
	}
	if in.Amount != "" {
		const prefix string = ",\"Amount_%\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Amount))
	}
	if in.Benchmark != "" {
		const prefix string = ",\"Benchmark\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Benchmark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SectorWeight) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SectorWeight) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SectorWeight) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SectorWeight) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi10(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi11(in *jlexer.Lexer, out *RegionWeight) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Category":
			out.Category = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Category_Average":
			out.CategoryAverage = string(in.String())
		case "Stocks_%":
			out.Stocks = string(in.String())
		case "Benchmark":
			out.Benchmark = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi11(out *jwriter.Writer, in RegionWeight) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Category != "" {
		const prefix string = ",\"Category\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Category))
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.CategoryAverage != "" {
		const prefix string = ",\"Category_Average\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CategoryAverage))
	}
	if in.Stocks != "" {
		const prefix string = ",\"Stocks_%\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stocks))
	}
	if in.Benchmark != "" {
		const prefix string = ",\"Benchmark\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Benchmark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegionWeight) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegionWeight) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegionWeight) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegionWeight) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi11(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi12(in *jlexer.Lexer, out *Performance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "3y_Volatility":
			if in.IsNull() {
				in.Skip()
				out.ThreeYVolatility = nil
			} else {
				if out.ThreeYVolatility == nil {
					out.ThreeYVolatility = new(Decimal)
				}
				(*out.ThreeYVolatility).UnmarshalEasyJSON(in)
			}
		case "3y_ExpReturn":
			if in.IsNull() {
				in.Skip()
				out.ThreeYExpReturn = nil
			} else {
				if out.ThreeYExpReturn == nil {
					out.ThreeYExpReturn = new(Decimal)
				}
				(*out.ThreeYExpReturn).UnmarshalEasyJSON(in)
			}
		case "3y_SharpRatio":
			if in.IsNull() {
				in.Skip()
				out.ThreeYSharpRatio = nil
			} else {
				if out.ThreeYSharpRatio == nil {
					out.ThreeYSharpRatio = new(Decimal)
				}
				(*out.ThreeYSharpRatio).UnmarshalEasyJSON(in)
			}
		case "Returns_YTD":
			if in.IsNull() {
				in.Skip()
				out.ReturnsYTD = nil
			} else {
				if out.ReturnsYTD == nil {
					out.ReturnsYTD = new(Decimal)
				}
				(*out.ReturnsYTD).UnmarshalEasyJSON(in)
			}
		case "Returns_3Y":
			if in.IsNull() {
				in.Skip()
				out.Returns3Y = nil
			} else {
				if out.Returns3Y == nil {
					out.Returns3Y = new(Decimal)
				}
				(*out.Returns3Y).UnmarshalEasyJSON(in)
			}
		case "Returns_5Y":
			if in.IsNull() {
				in.Skip()
				out.Returns5Y = nil
			} else {
				if out.Returns5Y == nil {
					out.Returns5Y = new(Decimal)
				}
				(*out.Returns5Y).UnmarshalEasyJSON(in)
			}
		case "Returns_10Y":
			if in.IsNull() {
				in.Skip()
				out.Returns10Y = nil
			} else {
				if out.Returns10Y == nil {
					out.Returns10Y = new(Decimal)
				}
				(*out.Returns10Y).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi12(out *jwriter.Writer, in Performance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ThreeYVolatility != nil {
		const prefix string = ",\"3y_Volatility\":"
		first = false
		out.RawString(prefix[1:])
		(*in.ThreeYVolatility).MarshalEasyJSON(out)
	}
	if in.ThreeYExpReturn != nil {
		const prefix string = ",\"3y_ExpReturn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ThreeYExpReturn).MarshalEasyJSON(out)
	}
	if in.ThreeYSharpRatio != nil {
		const prefix string = ",\"3y_SharpRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ThreeYSharpRatio).MarshalEasyJSON(out)
	}
	if in.ReturnsYTD != nil {
		const prefix string = ",\"Returns_YTD\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReturnsYTD).MarshalEasyJSON(out)
	}
	if in.Returns3Y != nil {
		const prefix string = ",\"Returns_3Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Returns3Y).MarshalEasyJSON(out)
	}
	if in.Returns5Y != nil {
		const prefix string = ",\"Returns_5Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Returns5Y).MarshalEasyJSON(out)
	}
	if in.Returns10Y != nil {
		const prefix string = ",\"Returns_10Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Returns10Y).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Performance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Performance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Performance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Performance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi12(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi13(in *jlexer.Lexer, out *OutstandingShares) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "annual":
			(out.Annual).UnmarshalEasyJSON(in)
		case "quarterly":
			(out.Quarterly).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi13(out *jwriter.Writer, in OutstandingShares) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Annual) != 0 {
		const prefix string = ",\"annual\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v9, v10 := range in.Annual {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Quarterly) != 0 {
		const prefix string = ",\"quarterly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Quarterly {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutstandingShares) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutstandingShares) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutstandingShares) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutstandingShares) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi13(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi14(in *jlexer.Lexer, out *MutualFundData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Nav":
			out.Nav = string(in.String())
		case "Prev_Close_Price":
			out.PrevClosePrice = string(in.String())
		case "Update_Date":
			out.UpdateDate = string(in.String())
		case "Portfolio_Net_Assets":
			out.PortfolioNetAssets = string(in.String())
		case "Share_Class_Net_Assets":
			out.ShareClassNetAssets = string(in.String())
		case "Morning_Star_Rating":
			out.MorningStarRating = int(in.Int())
		case "Morning_Star_Risk_Rating":
			out.MorningStarRiskRating = int(in.Int())
		case "Morning_Star_Category":
			out.MorningStarCategory = string(in.String())
		case "Incepton_Date":
			out.InceptonDate = string(in.String())
		case "Currency":
			out.Currency = string(in.String())
		case "Domicile":
			out.Domicile = string(in.String())
		case "Yield":
			out.Yield = string(in.String())
		case "Yield_YTD":
			out.YieldYTD = string(in.String())
		case "Yield_1Year_YTD":
			out.Yield1YearYTD = string(in.String())
		case "Yield_3Year_YTD":
			out.Yield3YearYTD = string(in.String())
		case "Yield_5Year_YTD":
			out.Yield5YearYTD = string(in.String())
		case "Expense_Ratio":
			out.ExpenseRatio = string(in.String())
		case "Expense_Ratio_Date":
			out.ExpenseRatioDate = string(in.String())
		case "Asset_Allocation":
			(out.AssetAllocation).UnmarshalEasyJSON(in)
		case "Value_Growth":
			(out.ValueGrowth).UnmarshalEasyJSON(in)
		case "Top_Holdings":
			(out.TopHoldings).UnmarshalEasyJSON(in)
		case "Market_Capitalization":
			(out.MarketCapitalization).UnmarshalEasyJSON(in)
		case "Sector_Weights":
			(out.SectorWeights).UnmarshalEasyJSON(in)
		case "World_Regions":
			(out.WorldRegions).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi14(out *jwriter.Writer, in MutualFundData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Nav != "" {
		const prefix string = ",\"Nav\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Nav))
	}
	if in.PrevClosePrice != "" {
		const prefix string = ",\"Prev_Close_Price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevClosePrice))
	}
	if in.UpdateDate != "" {
		const prefix string = ",\"Update_Date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UpdateDate))
	}
	if in.PortfolioNetAssets != "" {
		const prefix string = ",\"Portfolio_Net_Assets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PortfolioNetAssets))
	}
	if in.ShareClassNetAssets != "" {
		const prefix string = ",\"Share_Class_Net_Assets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShareClassNetAssets))
	}
	if in.MorningStarRating != 0 {
		const prefix string = ",\"Morning_Star_Rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MorningStarRating))
	}
	if in.MorningStarRiskRating != 0 {
		const prefix string = ",\"Morning_Star_Risk_Rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MorningStarRiskRating))
	}
	if in.MorningStarCategory != "" {
		const prefix string = ",\"Morning_Star_Category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MorningStarCategory))
	}
	if in.InceptonDate != "" {
		const prefix string = ",\"Incepton_Date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InceptonDate))
	}
	if in.Currency != "" {
		const prefix string = ",\"Currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.Domicile != "" {
		const prefix string = ",\"Domicile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domicile))
	}
	if in.Yield != "" {
		const prefix string = ",\"Yield\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Yield))
	}
	if in.YieldYTD != "" {
		const prefix string = ",\"Yield_YTD\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.YieldYTD))
	}
	if in.Yield1YearYTD != "" {
		const prefix string = ",\"Yield_1Year_YTD\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Yield1YearYTD))
	}
	if in.Yield3YearYTD != "" {
		const prefix string = ",\"Yield_3Year_YTD\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Yield3YearYTD))
	}
	if in.Yield5YearYTD != "" {
		const prefix string = ",\"Yield_5Year_YTD\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Yield5YearYTD))
	}
	if in.ExpenseRatio != "" {
		const prefix string = ",\"Expense_Ratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExpenseRatio))
	}
	if in.ExpenseRatioDate != "" {
		const prefix string = ",\"Expense_Ratio_Date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExpenseRatioDate))
	}
	if len(in.AssetAllocation) != 0 {
		const prefix string = ",\"Asset_Allocation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.AssetAllocation {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.ValueGrowth) != 0 {
		const prefix string = ",\"Value_Growth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.ValueGrowth {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.TopHoldings) != 0 {
		const prefix string = ",\"Top_Holdings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.TopHoldings {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.MarketCapitalization) != 0 {
		const prefix string = ",\"Market_Capitalization\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.MarketCapitalization {
				if v19 > 0 {
					out.RawByte(',')
				}
				(v20).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"Sector_Weights\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.SectorWeights).MarshalEasyJSON(out)
	}
	if len(in.WorldRegions) != 0 {
		const prefix string = ",\"World_Regions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.WorldRegions {
				if v21 > 0 {
					out.RawByte(',')
				}
				(v22).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MutualFundData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MutualFundData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MutualFundData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MutualFundData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi14(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi15(in *jlexer.Lexer, out *MorningStar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ratio":
			out.Ratio = int(in.IntStr())
		case "Category_Benchmark":
			out.CategoryBenchmark = string(in.String())
		case "Sustainability_Ratio":
			out.SustainabilityRatio = int(in.IntStr())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi15(out *jwriter.Writer, in MorningStar) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ratio != 0 {
		const prefix string = ",\"Ratio\":"
		first = false
		out.RawString(prefix[1:])
		out.IntStr(int(in.Ratio))
	}
	if in.CategoryBenchmark != "" {
		const prefix string = ",\"Category_Benchmark\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CategoryBenchmark))
	}
	if in.SustainabilityRatio != 0 {
		const prefix string = ",\"Sustainability_Ratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.IntStr(int(in.SustainabilityRatio))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MorningStar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MorningStar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MorningStar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MorningStar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi15(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi16(in *jlexer.Lexer, out *MarketCapitalization) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Category":
			out.Category = string(in.String())
		case "Size":
			out.Size = string(in.String())
		case "Category_Average":
			if in.IsNull() {
				in.Skip()
				out.CategoryAverage = nil
			} else {
				if out.CategoryAverage == nil {
					out.CategoryAverage = new(Decimal)
				}
				(*out.CategoryAverage).UnmarshalEasyJSON(in)
			}
		case "Benchmark":
			if in.IsNull() {
				in.Skip()
				out.Benchmark = nil
			} else {
				if out.Benchmark == nil {
					out.Benchmark = new(Decimal)
				}
				(*out.Benchmark).UnmarshalEasyJSON(in)
			}
		case "Portfolio_%":
			if in.IsNull() {
				in.Skip()
				out.Portfolio = nil
			} else {
				if out.Portfolio == nil {
					out.Portfolio = new(Decimal)
				}
				(*out.Portfolio).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi16(out *jwriter.Writer, in MarketCapitalization) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Category != "" {
		const prefix string = ",\"Category\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Category))
	}
	if in.Size != "" {
		const prefix string = ",\"Size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Size))
	}
	if in.CategoryAverage != nil {
		const prefix string = ",\"Category_Average\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CategoryAverage).MarshalEasyJSON(out)
	}
	if in.Benchmark != nil {
		const prefix string = ",\"Benchmark\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Benchmark).MarshalEasyJSON(out)
	}
	if in.Portfolio != nil {
		const prefix string = ",\"Portfolio_%\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Portfolio).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCapitalization) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCapitalization) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCapitalization) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCapitalization) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi16(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi17(in *jlexer.Lexer, out *IncomeStatementInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "filing_date":
			if in.IsNull() {
				in.Skip()
				out.FilingDate = nil
			} else {
				if out.FilingDate == nil {
					out.FilingDate = new(string)
				}
				*out.FilingDate = string(in.String())
			}
		case "researchDevelopment":
			if in.IsNull() {
				in.Skip()
				out.ResearchDevelopment = nil
			} else {
				if out.ResearchDevelopment == nil {
					out.ResearchDevelopment = new(Decimal)
				}
				(*out.ResearchDevelopment).UnmarshalEasyJSON(in)
			}
		case "effectOfAccountingCharges":
			if in.IsNull() {
				in.Skip()
				out.EffectOfAccountingCharges = nil
			} else {
				if out.EffectOfAccountingCharges == nil {
					out.EffectOfAccountingCharges = new(Decimal)
				}
				(*out.EffectOfAccountingCharges).UnmarshalEasyJSON(in)
			}
		case "incomeBeforeTax":
			if in.IsNull() {
				in.Skip()
				out.IncomeBeforeTax = nil
			} else {
				if out.IncomeBeforeTax == nil {
					out.IncomeBeforeTax = new(Decimal)
				}
				(*out.IncomeBeforeTax).UnmarshalEasyJSON(in)
			}
		case "minorityInterest":
			if in.IsNull() {
				in.Skip()
				out.MinorityInterest = nil
			} else {
				if out.MinorityInterest == nil {
					out.MinorityInterest = new(Decimal)
				}
				(*out.MinorityInterest).UnmarshalEasyJSON(in)
			}
		case "netIncome":
			if in.IsNull() {
				in.Skip()
				out.NetIncome = nil
			} else {
				if out.NetIncome == nil {
					out.NetIncome = new(Decimal)
				}
				(*out.NetIncome).UnmarshalEasyJSON(in)
			}
		case "sellingGeneralAdministrative":
			if in.IsNull() {
				in.Skip()
				out.SellingGeneralAdministrative = nil
			} else {
				if out.SellingGeneralAdministrative == nil {
					out.SellingGeneralAdministrative = new(Decimal)
				}
				(*out.SellingGeneralAdministrative).UnmarshalEasyJSON(in)
			}
		case "grossProfit":
			if in.IsNull() {
				in.Skip()
				out.GrossProfit = nil
			} else {
				if out.GrossProfit == nil {
					out.GrossProfit = new(Decimal)
				}
				(*out.GrossProfit).UnmarshalEasyJSON(in)
			}
		case "ebit":
			if in.IsNull() {
				in.Skip()
				out.Ebit = nil
			} else {
				if out.Ebit == nil {
					out.Ebit = new(Decimal)
				}
				(*out.Ebit).UnmarshalEasyJSON(in)
			}
		case "nonOperatingIncomeNetOther":
			if in.IsNull() {
				in.Skip()
				out.NonOperatingIncomeNetOther = nil
			} else {
				if out.NonOperatingIncomeNetOther == nil {
					out.NonOperatingIncomeNetOther = new(Decimal)
				}
				(*out.NonOperatingIncomeNetOther).UnmarshalEasyJSON(in)
			}
		case "operatingIncome":
			if in.IsNull() {
				in.Skip()
				out.OperatingIncome = nil
			} else {
				if out.OperatingIncome == nil {
					out.OperatingIncome = new(Decimal)
				}
				(*out.OperatingIncome).UnmarshalEasyJSON(in)
			}
		case "otherOperatingExpenses":
			if in.IsNull() {
				in.Skip()
				out.OtherOperatingExpenses = nil
			} else {
				if out.OtherOperatingExpenses == nil {
					out.OtherOperatingExpenses = new(Decimal)
				}
				(*out.OtherOperatingExpenses).UnmarshalEasyJSON(in)
			}
		case "interestExpense":
			if in.IsNull() {
				in.Skip()
				out.InterestExpense = nil
			} else {
				if out.InterestExpense == nil {
					out.InterestExpense = new(Decimal)
				}
				(*out.InterestExpense).UnmarshalEasyJSON(in)
			}
		case "extraordinaryItems":
			if in.IsNull() {
				in.Skip()
				out.ExtraordinaryItems = nil
			} else {
				if out.ExtraordinaryItems == nil {
					out.ExtraordinaryItems = new(Decimal)
				}
				(*out.ExtraordinaryItems).UnmarshalEasyJSON(in)
			}
		case "nonRecurring":
			if in.IsNull() {
				in.Skip()
				out.NonRecurring = nil
			} else {
				if out.NonRecurring == nil {
					out.NonRecurring = new(Decimal)
				}
				(*out.NonRecurring).UnmarshalEasyJSON(in)
			}
		case "otherItems":
			if in.IsNull() {
				in.Skip()
				out.OtherItems = nil
			} else {
				if out.OtherItems == nil {
					out.OtherItems = new(Decimal)
				}
				(*out.OtherItems).UnmarshalEasyJSON(in)
			}
		case "incomeTaxExpense":
			if in.IsNull() {
				in.Skip()
				out.IncomeTaxExpense = nil
			} else {
				if out.IncomeTaxExpense == nil {
					out.IncomeTaxExpense = new(Decimal)
				}
				(*out.IncomeTaxExpense).UnmarshalEasyJSON(in)
			}
		case "totalRevenue":
			if in.IsNull() {
				in.Skip()
				out.TotalRevenue = nil
			} else {
				if out.TotalRevenue == nil {
					out.TotalRevenue = new(Decimal)
				}
				(*out.TotalRevenue).UnmarshalEasyJSON(in)
			}
		case "totalOperatingExpenses":
			if in.IsNull() {
				in.Skip()
				out.TotalOperatingExpenses = nil
			} else {
				if out.TotalOperatingExpenses == nil {
					out.TotalOperatingExpenses = new(Decimal)
				}
				(*out.TotalOperatingExpenses).UnmarshalEasyJSON(in)
			}
		case "costOfRevenue":
			if in.IsNull() {
				in.Skip()
				out.CostOfRevenue = nil
			} else {
				if out.CostOfRevenue == nil {
					out.CostOfRevenue = new(Decimal)
				}
				(*out.CostOfRevenue).UnmarshalEasyJSON(in)
			}
		case "totalOtherIncomeExpenseNet":
			if in.IsNull() {
				in.Skip()
				out.TotalOtherIncomeExpenseNet = nil
			} else {
				if out.TotalOtherIncomeExpenseNet == nil {
					out.TotalOtherIncomeExpenseNet = new(Decimal)
				}
				(*out.TotalOtherIncomeExpenseNet).UnmarshalEasyJSON(in)
			}
		case "discontinuedOperations":
			if in.IsNull() {
				in.Skip()
				out.DiscontinuedOperations = nil
			} else {
				if out.DiscontinuedOperations == nil {
					out.DiscontinuedOperations = new(Decimal)
				}
				(*out.DiscontinuedOperations).UnmarshalEasyJSON(in)
			}
		case "netIncomeFromContinuingOps":
			if in.IsNull() {
				in.Skip()
				out.NetIncomeFromContinuingOps = nil
			} else {
				if out.NetIncomeFromContinuingOps == nil {
					out.NetIncomeFromContinuingOps = new(Decimal)
				}
				(*out.NetIncomeFromContinuingOps).UnmarshalEasyJSON(in)
			}
		case "netIncomeApplicableToCommonShares":
			if in.IsNull() {
				in.Skip()
				out.NetIncomeApplicableToCommonShares = nil
			} else {
				if out.NetIncomeApplicableToCommonShares == nil {
					out.NetIncomeApplicableToCommonShares = new(Decimal)
				}
				(*out.NetIncomeApplicableToCommonShares).UnmarshalEasyJSON(in)
			}
		case "preferredStockAndOtherAdjustments":
			if in.IsNull() {
				in.Skip()
				out.PreferredStockAndOtherAdjustments = nil
			} else {
				if out.PreferredStockAndOtherAdjustments == nil {
					out.PreferredStockAndOtherAdjustments = new(Decimal)
				}
				(*out.PreferredStockAndOtherAdjustments).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi17(out *jwriter.Writer, in IncomeStatementInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Date != "" {
		const prefix string = ",\"date\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	if in.FilingDate != nil {
		const prefix string = ",\"filing_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FilingDate))
	}
	if in.ResearchDevelopment != nil {
		const prefix string = ",\"researchDevelopment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ResearchDevelopment).MarshalEasyJSON(out)
	}
	if in.EffectOfAccountingCharges != nil {
		const prefix string = ",\"effectOfAccountingCharges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EffectOfAccountingCharges).MarshalEasyJSON(out)
	}
	if in.IncomeBeforeTax != nil {
		const prefix string = ",\"incomeBeforeTax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IncomeBeforeTax).MarshalEasyJSON(out)
	}
	if in.MinorityInterest != nil {
		const prefix string = ",\"minorityInterest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.MinorityInterest).MarshalEasyJSON(out)
	}
	if in.NetIncome != nil {
		const prefix string = ",\"netIncome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NetIncome).MarshalEasyJSON(out)
	}
	if in.SellingGeneralAdministrative != nil {
		const prefix string = ",\"sellingGeneralAdministrative\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SellingGeneralAdministrative).MarshalEasyJSON(out)
	}
	if in.GrossProfit != nil {
		const prefix string = ",\"grossProfit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GrossProfit).MarshalEasyJSON(out)
	}
	if in.Ebit != nil {
		const prefix string = ",\"ebit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ebit).MarshalEasyJSON(out)
	}
	if in.NonOperatingIncomeNetOther != nil {
		const prefix string = ",\"nonOperatingIncomeNetOther\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NonOperatingIncomeNetOther).MarshalEasyJSON(out)
	}
	if in.OperatingIncome != nil {
		const prefix string = ",\"operatingIncome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OperatingIncome).MarshalEasyJSON(out)
	}
	if in.OtherOperatingExpenses != nil {
		const prefix string = ",\"otherOperatingExpenses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OtherOperatingExpenses).MarshalEasyJSON(out)
	}
	if in.InterestExpense != nil {
		const prefix string = ",\"interestExpense\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.InterestExpense).MarshalEasyJSON(out)
	}
	if in.ExtraordinaryItems != nil {
		const prefix string = ",\"extraordinaryItems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ExtraordinaryItems).MarshalEasyJSON(out)
	}
	if in.NonRecurring != nil {
		const prefix string = ",\"nonRecurring\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NonRecurring).MarshalEasyJSON(out)
	}
	if in.OtherItems != nil {
		const prefix string = ",\"otherItems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OtherItems).MarshalEasyJSON(out)
	}
	if in.IncomeTaxExpense != nil {
		const prefix string = ",\"incomeTaxExpense\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IncomeTaxExpense).MarshalEasyJSON(out)
	}
	if in.TotalRevenue != nil {
		const prefix string = ",\"totalRevenue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalRevenue).MarshalEasyJSON(out)
	}
	if in.TotalOperatingExpenses != nil {
		const prefix string = ",\"totalOperatingExpenses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalOperatingExpenses).MarshalEasyJSON(out)
	}
	if in.CostOfRevenue != nil {
		const prefix string = ",\"costOfRevenue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CostOfRevenue).MarshalEasyJSON(out)
	}
	if in.TotalOtherIncomeExpenseNet != nil {
		const prefix string = ",\"totalOtherIncomeExpenseNet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalOtherIncomeExpenseNet).MarshalEasyJSON(out)
	}
	if in.DiscontinuedOperations != nil {
		const prefix string = ",\"discontinuedOperations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DiscontinuedOperations).MarshalEasyJSON(out)
	}
	if in.NetIncomeFromContinuingOps != nil {
		const prefix string = ",\"netIncomeFromContinuingOps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NetIncomeFromContinuingOps).MarshalEasyJSON(out)
	}
	if in.NetIncomeApplicableToCommonShares != nil {
		const prefix string = ",\"netIncomeApplicableToCommonShares\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NetIncomeApplicableToCommonShares).MarshalEasyJSON(out)
	}
	if in.PreferredStockAndOtherAdjustments != nil {
		const prefix string = ",\"preferredStockAndOtherAdjustments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PreferredStockAndOtherAdjustments).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncomeStatementInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncomeStatementInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncomeStatementInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncomeStatementInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi17(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi18(in *jlexer.Lexer, out *IncomeStatement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency_symbol":
			out.CurrencySymbol = string(in.String())
		case "quarterly":
			(out.Quarterly).UnmarshalEasyJSON(in)
		case "yearly":
			(out.Yearly).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi18(out *jwriter.Writer, in IncomeStatement) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CurrencySymbol != "" {
		const prefix string = ",\"currency_symbol\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CurrencySymbol))
	}
	if len(in.Quarterly) != 0 {
		const prefix string = ",\"quarterly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Quarterly {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Yearly) != 0 {
		const prefix string = ",\"yearly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v25, v26 := range in.Yearly {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncomeStatement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncomeStatement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncomeStatement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncomeStatement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi18(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi19(in *jlexer.Lexer, out *Holding) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Assets_%":
			if in.IsNull() {
				in.Skip()
				out.AssetsPercent = nil
			} else {
				if out.AssetsPercent == nil {
					out.AssetsPercent = new(Decimal)
				}
				(*out.AssetsPercent).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi19(out *jwriter.Writer, in Holding) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.AssetsPercent != nil {
		const prefix string = ",\"Assets_%\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AssetsPercent).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Holding) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Holding) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Holding) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Holding) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi19(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi20(in *jlexer.Lexer, out *Highlights) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MarketCapitalization":
			if in.IsNull() {
				in.Skip()
				out.MarketCapitalization = nil
			} else {
				if out.MarketCapitalization == nil {
					out.MarketCapitalization = new(Decimal)
				}
				(*out.MarketCapitalization).UnmarshalEasyJSON(in)
			}
		case "MarketCapitalizationMln":
			out.MarketCapitalizationMln = string(in.String())
		case "EBITDA":
			if in.IsNull() {
				in.Skip()
				out.EBITDA = nil
			} else {
				if out.EBITDA == nil {
					out.EBITDA = new(Decimal)
				}
				(*out.EBITDA).UnmarshalEasyJSON(in)
			}
		case "PERatio":
			if in.IsNull() {
				in.Skip()
				out.PERatio = nil
			} else {
				if out.PERatio == nil {
					out.PERatio = new(Decimal)
				}
				(*out.PERatio).UnmarshalEasyJSON(in)
			}
		case "PEGRatio":
			if in.IsNull() {
				in.Skip()
				out.PEGRatio = nil
			} else {
				if out.PEGRatio == nil {
					out.PEGRatio = new(Decimal)
				}
				(*out.PEGRatio).UnmarshalEasyJSON(in)
			}
		case "WallStreetTargetPrice":
			if in.IsNull() {
				in.Skip()
				out.WallStreetTargetPrice = nil
			} else {
				if out.WallStreetTargetPrice == nil {
					out.WallStreetTargetPrice = new(Decimal)
				}
				(*out.WallStreetTargetPrice).UnmarshalEasyJSON(in)
			}
		case "BookValue":
			if in.IsNull() {
				in.Skip()
				out.BookValue = nil
			} else {
				if out.BookValue == nil {
					out.BookValue = new(Decimal)
				}
				(*out.BookValue).UnmarshalEasyJSON(in)
			}
		case "DividendShare":
			if in.IsNull() {
				in.Skip()
				out.DividendShare = nil
			} else {
				if out.DividendShare == nil {
					out.DividendShare = new(Decimal)
				}
				(*out.DividendShare).UnmarshalEasyJSON(in)
			}
		case "DividendYield":
			if in.IsNull() {
				in.Skip()
				out.DividendYield = nil
			} else {
				if out.DividendYield == nil {
					out.DividendYield = new(Decimal)
				}
				(*out.DividendYield).UnmarshalEasyJSON(in)
			}
		case "EarningsShare":
			if in.IsNull() {
				in.Skip()
				out.EarningsShare = nil
			} else {
				if out.EarningsShare == nil {
					out.EarningsShare = new(Decimal)
				}
				(*out.EarningsShare).UnmarshalEasyJSON(in)
			}
		case "EPSEstimateCurrentYear":
			if in.IsNull() {
				in.Skip()
				out.EPSEstimateCurrentYear = nil
			} else {
				if out.EPSEstimateCurrentYear == nil {
					out.EPSEstimateCurrentYear = new(Decimal)
				}
				(*out.EPSEstimateCurrentYear).UnmarshalEasyJSON(in)
			}
		case "EPSEstimateNextYear":
			if in.IsNull() {
				in.Skip()
				out.EPSEstimateNextYear = nil
			} else {
				if out.EPSEstimateNextYear == nil {
					out.EPSEstimateNextYear = new(Decimal)
				}
				(*out.EPSEstimateNextYear).UnmarshalEasyJSON(in)
			}
		case "EPSEstimateNextQuarter":
			if in.IsNull() {
				in.Skip()
				out.EPSEstimateNextQuarter = nil
			} else {
				if out.EPSEstimateNextQuarter == nil {
					out.EPSEstimateNextQuarter = new(Decimal)
				}
				(*out.EPSEstimateNextQuarter).UnmarshalEasyJSON(in)
			}
		case "MostRecentQuarter":
			out.MostRecentQuarter = string(in.String())
		case "ProfitMargin":
			if in.IsNull() {
				in.Skip()
				out.ProfitMargin = nil
			} else {
				if out.ProfitMargin == nil {
					out.ProfitMargin = new(Decimal)
				}
				(*out.ProfitMargin).UnmarshalEasyJSON(in)
			}
		case "OperatingMarginTTM":
			if in.IsNull() {
				in.Skip()
				out.OperatingMarginTTM = nil
			} else {
				if out.OperatingMarginTTM == nil {
					out.OperatingMarginTTM = new(Decimal)
				}
				(*out.OperatingMarginTTM).UnmarshalEasyJSON(in)
			}
		case "ReturnOnAssetsTTM":
			if in.IsNull() {
				in.Skip()
				out.ReturnOnAssetsTTM = nil
			} else {
				if out.ReturnOnAssetsTTM == nil {
					out.ReturnOnAssetsTTM = new(Decimal)
				}
				(*out.ReturnOnAssetsTTM).UnmarshalEasyJSON(in)
			}
		case "ReturnOnEquityTTM":
			if in.IsNull() {
				in.Skip()
				out.ReturnOnEquityTTM = nil
			} else {
				if out.ReturnOnEquityTTM == nil {
					out.ReturnOnEquityTTM = new(Decimal)
				}
				(*out.ReturnOnEquityTTM).UnmarshalEasyJSON(in)
			}
		case "RevenueTTM":
			if in.IsNull() {
				in.Skip()
				out.RevenueTTM = nil
			} else {
				if out.RevenueTTM == nil {
					out.RevenueTTM = new(Decimal)
				}
				(*out.RevenueTTM).UnmarshalEasyJSON(in)
			}
		case "RevenuePerShareTTM":
			if in.IsNull() {
				in.Skip()
				out.RevenuePerShareTTM = nil
			} else {
				if out.RevenuePerShareTTM == nil {
					out.RevenuePerShareTTM = new(Decimal)
				}
				(*out.RevenuePerShareTTM).UnmarshalEasyJSON(in)
			}
		case "QuarterlyRevenueGrowthYOY":
			if in.IsNull() {
				in.Skip()
				out.QuarterlyRevenueGrowthYOY = nil
			} else {
				if out.QuarterlyRevenueGrowthYOY == nil {
					out.QuarterlyRevenueGrowthYOY = new(Decimal)
				}
				(*out.QuarterlyRevenueGrowthYOY).UnmarshalEasyJSON(in)
			}
		case "GrossProfitTTM":
			if in.IsNull() {
				in.Skip()
				out.GrossProfitTTM = nil
			} else {
				if out.GrossProfitTTM == nil {
					out.GrossProfitTTM = new(Decimal)
				}
				(*out.GrossProfitTTM).UnmarshalEasyJSON(in)
			}
		case "DilutedEpsTTM":
			if in.IsNull() {
				in.Skip()
				out.DilutedEpsTTM = nil
			} else {
				if out.DilutedEpsTTM == nil {
					out.DilutedEpsTTM = new(Decimal)
				}
				(*out.DilutedEpsTTM).UnmarshalEasyJSON(in)
			}
		case "QuarterlyEarningsGrowthYOY":
			if in.IsNull() {
				in.Skip()
				out.QuarterlyEarningsGrowthYOY = nil
			} else {
				if out.QuarterlyEarningsGrowthYOY == nil {
					out.QuarterlyEarningsGrowthYOY = new(Decimal)
				}
				(*out.QuarterlyEarningsGrowthYOY).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi20(out *jwriter.Writer, in Highlights) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketCapitalization != nil {
		const prefix string = ",\"MarketCapitalization\":"
		first = false
		out.RawString(prefix[1:])
		(*in.MarketCapitalization).MarshalEasyJSON(out)
	}
	if in.MarketCapitalizationMln != "" {
		const prefix string = ",\"MarketCapitalizationMln\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketCapitalizationMln))
	}
	if in.EBITDA != nil {
		const prefix string = ",\"EBITDA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EBITDA).MarshalEasyJSON(out)
	}
	if in.PERatio != nil {
		const prefix string = ",\"PERatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PERatio).MarshalEasyJSON(out)
	}
	if in.PEGRatio != nil {
		const prefix string = ",\"PEGRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PEGRatio).MarshalEasyJSON(out)
	}
	if in.WallStreetTargetPrice != nil {
		const prefix string = ",\"WallStreetTargetPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.WallStreetTargetPrice).MarshalEasyJSON(out)
	}
	if in.BookValue != nil {
		const prefix string = ",\"BookValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BookValue).MarshalEasyJSON(out)
	}
	if in.DividendShare != nil {
		const prefix string = ",\"DividendShare\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DividendShare).MarshalEasyJSON(out)
	}
	if in.DividendYield != nil {
		const prefix string = ",\"DividendYield\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DividendYield).MarshalEasyJSON(out)
	}
	if in.EarningsShare != nil {
		const prefix string = ",\"EarningsShare\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EarningsShare).MarshalEasyJSON(out)
	}
	if in.EPSEstimateCurrentYear != nil {
		const prefix string = ",\"EPSEstimateCurrentYear\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EPSEstimateCurrentYear).MarshalEasyJSON(out)
	}
	if in.EPSEstimateNextYear != nil {
		const prefix string = ",\"EPSEstimateNextYear\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EPSEstimateNextYear).MarshalEasyJSON(out)
	}
	if in.EPSEstimateNextQuarter != nil {
		const prefix string = ",\"EPSEstimateNextQuarter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EPSEstimateNextQuarter).MarshalEasyJSON(out)
	}
	if in.MostRecentQuarter != "" {
		const prefix string = ",\"MostRecentQuarter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MostRecentQuarter))
	}
	if in.ProfitMargin != nil {
		const prefix string = ",\"ProfitMargin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ProfitMargin).MarshalEasyJSON(out)
	}
	if in.OperatingMarginTTM != nil {
		const prefix string = ",\"OperatingMarginTTM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OperatingMarginTTM).MarshalEasyJSON(out)
	}
	if in.ReturnOnAssetsTTM != nil {
		const prefix string = ",\"ReturnOnAssetsTTM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReturnOnAssetsTTM).MarshalEasyJSON(out)
	}
	if in.ReturnOnEquityTTM != nil {
		const prefix string = ",\"ReturnOnEquityTTM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ReturnOnEquityTTM).MarshalEasyJSON(out)
	}
	if in.RevenueTTM != nil {
		const prefix string = ",\"RevenueTTM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RevenueTTM).MarshalEasyJSON(out)
	}
	if in.RevenuePerShareTTM != nil {
		const prefix string = ",\"RevenuePerShareTTM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RevenuePerShareTTM).MarshalEasyJSON(out)
	}
	if in.QuarterlyRevenueGrowthYOY != nil {
		const prefix string = ",\"QuarterlyRevenueGrowthYOY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.QuarterlyRevenueGrowthYOY).MarshalEasyJSON(out)
	}
	if in.GrossProfitTTM != nil {
		const prefix string = ",\"GrossProfitTTM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GrossProfitTTM).MarshalEasyJSON(out)
	}
	if in.DilutedEpsTTM != nil {
		const prefix string = ",\"DilutedEpsTTM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DilutedEpsTTM).MarshalEasyJSON(out)
	}
	if in.QuarterlyEarningsGrowthYOY != nil {
		const prefix string = ",\"QuarterlyEarningsGrowthYOY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.QuarterlyEarningsGrowthYOY).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Highlights) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Highlights) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Highlights) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Highlights) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi20(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi21(in *jlexer.Lexer, out *General) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Exchange":
			out.Exchange = string(in.String())
		case "CurrencyCode":
			out.CurrencyCode = string(in.String())
		case "CurrencyName":
			out.CurrencyName = string(in.String())
		case "CurrencySymbol":
			out.CurrencySymbol = string(in.String())
		case "CountryName":
			out.CountryName = string(in.String())
		case "CountryISO":
			out.CountryISO = string(in.String())
		case "Sector":
			out.Sector = string(in.String())
		case "Industry":
			out.Industry = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "ISIN":
			if in.IsNull() {
				in.Skip()
				out.ISIN = nil
			} else {
				if out.ISIN == nil {
					out.ISIN = new(string)
				}
				*out.ISIN = string(in.String())
			}
		case "FullTimeEmployees":
			if in.IsNull() {
				in.Skip()
				out.FullTimeEmployees = nil
			} else {
				if out.FullTimeEmployees == nil {
					out.FullTimeEmployees = new(int)
				}
				*out.FullTimeEmployees = int(in.Int())
			}
		case "UpdatedAt":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(string)
				}
				*out.UpdatedAt = string(in.String())
			}
		case "CUSIP":
			if in.IsNull() {
				in.Skip()
				out.Cusip = nil
			} else {
				if out.Cusip == nil {
					out.Cusip = new(string)
				}
				*out.Cusip = string(in.String())
			}
		case "LogoURL":
			if in.IsNull() {
				in.Skip()
				out.LogoURL = nil
			} else {
				if out.LogoURL == nil {
					out.LogoURL = new(string)
				}
				*out.LogoURL = string(in.String())
			}
		case "CIK":
			if in.IsNull() {
				in.Skip()
				out.CIK = nil
			} else {
				if out.CIK == nil {
					out.CIK = new(string)
				}
				*out.CIK = string(in.String())
			}
		case "EmployerIdNumber":
			if in.IsNull() {
				in.Skip()
				out.EmployerIDNumber = nil
			} else {
				if out.EmployerIDNumber == nil {
					out.EmployerIDNumber = new(string)
				}
				*out.EmployerIDNumber = string(in.String())
			}
		case "FiscalYearEnd":
			if in.IsNull() {
				in.Skip()
				out.FiscalYearEnd = nil
			} else {
				if out.FiscalYearEnd == nil {
					out.FiscalYearEnd = new(string)
				}
				*out.FiscalYearEnd = string(in.String())
			}
		case "IPODate":
			if in.IsNull() {
				in.Skip()
				out.IPODate = nil
			} else {
				if out.IPODate == nil {
					out.IPODate = new(string)
				}
				*out.IPODate = string(in.String())
			}
		case "InternationalDomestic":
			if in.IsNull() {
				in.Skip()
				out.InternationalDomestic = nil
			} else {
				if out.InternationalDomestic == nil {
					out.InternationalDomestic = new(string)
				}
				*out.InternationalDomestic = string(in.String())
			}
		case "GicSector":
			if in.IsNull() {
				in.Skip()
				out.GicSector = nil
			} else {
				if out.GicSector == nil {
					out.GicSector = new(string)
				}
				*out.GicSector = string(in.String())
			}
		case "GicGroup":
			if in.IsNull() {
				in.Skip()
				out.GicGroup = nil
			} else {
				if out.GicGroup == nil {
					out.GicGroup = new(string)
				}
				*out.GicGroup = string(in.String())
			}
		case "GicIndustry":
			if in.IsNull() {
				in.Skip()
				out.GicIndustry = nil
			} else {
				if out.GicIndustry == nil {
					out.GicIndustry = new(string)
				}
				*out.GicIndustry = string(in.String())
			}
		case "GicSubIndustry":
			if in.IsNull() {
				in.Skip()
				out.GicSubIndustry = nil
			} else {
				if out.GicSubIndustry == nil {
					out.GicSubIndustry = new(string)
				}
				*out.GicSubIndustry = string(in.String())
			}
		case "Address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "Phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "WebURL":
			if in.IsNull() {
				in.Skip()
				out.WebURL = nil
			} else {
				if out.WebURL == nil {
					out.WebURL = new(string)
				}
				*out.WebURL = string(in.String())
			}
		case "Category":
			if in.IsNull() {
				in.Skip()
				out.Category = nil
			} else {
				if out.Category == nil {
					out.Category = new(string)
				}
				*out.Category = string(in.String())
			}
		case "Fund_Summary":
			if in.IsNull() {
				in.Skip()
				out.FundSummary = nil
			} else {
				if out.FundSummary == nil {
					out.FundSummary = new(string)
				}
				*out.FundSummary = string(in.String())
			}
		case "Fund_Family":
			if in.IsNull() {
				in.Skip()
				out.FundFamily = nil
			} else {
				if out.FundFamily == nil {
					out.FundFamily = new(string)
				}
				*out.FundFamily = string(in.String())
			}
		case "Fiscal_Year_End":
			if in.IsNull() {
				in.Skip()
				out.FundFiscalYearEnd = nil
			} else {
				if out.FundFiscalYearEnd == nil {
					out.FundFiscalYearEnd = new(string)
				}
				*out.FundFiscalYearEnd = string(in.String())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi21(out *jwriter.Writer, in General) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != "" {
		const prefix string = ",\"Code\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	if in.Type != "" {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Exchange != "" {
		const prefix string = ",\"Exchange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Exchange))
	}
	if in.CurrencyCode != "" {
		const prefix string = ",\"CurrencyCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CurrencyCode))
	}
	if in.CurrencyName != "" {
		const prefix string = ",\"CurrencyName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CurrencyName))
	}
	if in.CurrencySymbol != "" {
		const prefix string = ",\"CurrencySymbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CurrencySymbol))
	}
	if in.CountryName != "" {
		const prefix string = ",\"CountryName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryName))
	}
	if in.CountryISO != "" {
		const prefix string = ",\"CountryISO\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryISO))
	}
	if in.Sector != "" {
		const prefix string = ",\"Sector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sector))
	}
	if in.Industry != "" {
		const prefix string = ",\"Industry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Industry))
	}
	if in.Description != "" {
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ISIN != nil {
		const prefix string = ",\"ISIN\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ISIN))
	}
	if in.FullTimeEmployees != nil {
		const prefix string = ",\"FullTimeEmployees\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.FullTimeEmployees))
	}
	if in.UpdatedAt != nil {
		const prefix string = ",\"UpdatedAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UpdatedAt))
	}
	if in.Cusip != nil {
		const prefix string = ",\"CUSIP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Cusip))
	}
	if in.LogoURL != nil {
		const prefix string = ",\"LogoURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LogoURL))
	}
	if in.CIK != nil {
		const prefix string = ",\"CIK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CIK))
	}
	if in.EmployerIDNumber != nil {
		const prefix string = ",\"EmployerIdNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EmployerIDNumber))
	}
	if in.FiscalYearEnd != nil {
		const prefix string = ",\"FiscalYearEnd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FiscalYearEnd))
	}
	if in.IPODate != nil {
		const prefix string = ",\"IPODate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IPODate))
	}
	if in.InternationalDomestic != nil {
		const prefix string = ",\"InternationalDomestic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InternationalDomestic))
	}
	if in.GicSector != nil {
		const prefix string = ",\"GicSector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GicSector))
	}
	if in.GicGroup != nil {
		const prefix string = ",\"GicGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GicGroup))
	}
	if in.GicIndustry != nil {
		const prefix string = ",\"GicIndustry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GicIndustry))
	}
	if in.GicSubIndustry != nil {
		const prefix string = ",\"GicSubIndustry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GicSubIndustry))
	}
	if in.Address != nil {
		const prefix string = ",\"Address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Address))
	}
	if in.Phone != nil {
		const prefix string = ",\"Phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Phone))
	}
	if in.WebURL != nil {
		const prefix string = ",\"WebURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.WebURL))
	}
	if in.Category != nil {
		const prefix string = ",\"Category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Category))
	}
	if in.FundSummary != nil {
		const prefix string = ",\"Fund_Summary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FundSummary))
	}
	if in.FundFamily != nil {
		const prefix string = ",\"Fund_Family\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FundFamily))
	}
	if in.FundFiscalYearEnd != nil {
		const prefix string = ",\"Fiscal_Year_End\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FundFiscalYearEnd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v General) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v General) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *General) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *General) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi21(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi22(in *jlexer.Lexer, out *Fundamentals) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LastUpdate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastUpdate).UnmarshalJSON(data))
			}
		case "Ticker":
			out.Ticker = string(in.String())
		case "General":
			(out.General).UnmarshalEasyJSON(in)
		case "Highlights":
			if in.IsNull() {
				in.Skip()
				out.Highlights = nil
			} else {
				if out.Highlights == nil {
					out.Highlights = new(Highlights)
				}
				(*out.Highlights).UnmarshalEasyJSON(in)
			}
		case "Valuation":
			if in.IsNull() {
				in.Skip()
				out.Valuation = nil
			} else {
				if out.Valuation == nil {
					out.Valuation = new(Valuation)
				}
				(*out.Valuation).UnmarshalEasyJSON(in)
			}
		case "Technicals":
			if in.IsNull() {
				in.Skip()
				out.Technicals = nil
			} else {
				if out.Technicals == nil {
					out.Technicals = new(Technicals)
				}
				(*out.Technicals).UnmarshalEasyJSON(in)
			}
		case "SplitsDividends":
			if in.IsNull() {
				in.Skip()
				out.SplitsDividends = nil
			} else {
				if out.SplitsDividends == nil {
					out.SplitsDividends = new(SplitsDividends)
				}
				(*out.SplitsDividends).UnmarshalEasyJSON(in)
			}
		case "Earnings":
			if in.IsNull() {
				in.Skip()
				out.Earnings = nil
			} else {
				if out.Earnings == nil {
					out.Earnings = new(Earnings)
				}
				(*out.Earnings).UnmarshalEasyJSON(in)
			}
		case "Financials":
			if in.IsNull() {
				in.Skip()
				out.Financials = nil
			} else {
				if out.Financials == nil {
					out.Financials = new(Financials)
				}
				(*out.Financials).UnmarshalEasyJSON(in)
			}
		case "ETF_Data":
			if in.IsNull() {
				in.Skip()
				out.ETFData = nil
			} else {
				if out.ETFData == nil {
					out.ETFData = new(ETFData)
				}
				(*out.ETFData).UnmarshalEasyJSON(in)
			}
		case "SharesStats":
			if in.IsNull() {
				in.Skip()
				out.SharesStats = nil
			} else {
				if out.SharesStats == nil {
					out.SharesStats = new(SharesStats)
				}
				(*out.SharesStats).UnmarshalEasyJSON(in)
			}
		case "outstandingShares":
			if in.IsNull() {
				in.Skip()
				out.OutstandingShares = nil
			} else {
				if out.OutstandingShares == nil {
					out.OutstandingShares = new(OutstandingShares)
				}
				(*out.OutstandingShares).UnmarshalEasyJSON(in)
			}
		case "Components":
			(out.Components).UnmarshalEasyJSON(in)
		case "MutualFund_Data":
			if in.IsNull() {
				in.Skip()
				out.MutualFundData = nil
			} else {
				if out.MutualFundData == nil {
					out.MutualFundData = new(MutualFundData)
				}
				(*out.MutualFundData).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi22(out *jwriter.Writer, in Fundamentals) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"LastUpdate\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.LastUpdate).MarshalJSON())
	}
	if in.Ticker != "" {
		const prefix string = ",\"Ticker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ticker))
	}
	if true {
		const prefix string = ",\"General\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.General).MarshalEasyJSON(out)
	}
	if in.Highlights != nil {
		const prefix string = ",\"Highlights\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Highlights).MarshalEasyJSON(out)
	}
	if in.Valuation != nil {
		const prefix string = ",\"Valuation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Valuation).MarshalEasyJSON(out)
	}
	if in.Technicals != nil {
		const prefix string = ",\"Technicals\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Technicals).MarshalEasyJSON(out)
	}
	if in.SplitsDividends != nil {
		const prefix string = ",\"SplitsDividends\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SplitsDividends).MarshalEasyJSON(out)
	}
	if in.Earnings != nil {
		const prefix string = ",\"Earnings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Earnings).MarshalEasyJSON(out)
	}
	if in.Financials != nil {
		const prefix string = ",\"Financials\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Financials).MarshalEasyJSON(out)
	}
	if in.ETFData != nil {
		const prefix string = ",\"ETF_Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ETFData).MarshalEasyJSON(out)
	}
	if in.SharesStats != nil {
		const prefix string = ",\"SharesStats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SharesStats).MarshalEasyJSON(out)
	}
	if in.OutstandingShares != nil {
		const prefix string = ",\"outstandingShares\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OutstandingShares).MarshalEasyJSON(out)
	}
	if len(in.Components) != 0 {
		const prefix string = ",\"Components\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v27, v28 := range in.Components {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.MutualFundData != nil {
		const prefix string = ",\"MutualFund_Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.MutualFundData).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Fundamentals) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fundamentals) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Fundamentals) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fundamentals) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi22(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi23(in *jlexer.Lexer, out *Financials) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Balance_Sheet":
			(out.BalanceSheet).UnmarshalEasyJSON(in)
		case "Cash_Flow":
			(out.CashFlow).UnmarshalEasyJSON(in)
		case "Income_Statement":
			(out.IncomeStatement).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi23(out *jwriter.Writer, in Financials) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"Balance_Sheet\":"
		first = false
		out.RawString(prefix[1:])
		(in.BalanceSheet).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Cash_Flow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.CashFlow).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Income_Statement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.IncomeStatement).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Financials) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Financials) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Financials) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Financials) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi23(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi24(in *jlexer.Lexer, out *EarningsInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "reportDate":
			out.ReportDate = string(in.String())
		case "epsActual":
			if in.IsNull() {
				in.Skip()
				out.EpsActual = nil
			} else {
				if out.EpsActual == nil {
					out.EpsActual = new(Decimal)
				}
				(*out.EpsActual).UnmarshalEasyJSON(in)
			}
		case "epsEstimate":
			if in.IsNull() {
				in.Skip()
				out.EpsEstimate = nil
			} else {
				if out.EpsEstimate == nil {
					out.EpsEstimate = new(Decimal)
				}
				(*out.EpsEstimate).UnmarshalEasyJSON(in)
			}
		case "epsDifference":
			if in.IsNull() {
				in.Skip()
				out.EpsDifference = nil
			} else {
				if out.EpsDifference == nil {
					out.EpsDifference = new(Decimal)
				}
				(*out.EpsDifference).UnmarshalEasyJSON(in)
			}
		case "surprisePercent":
			if in.IsNull() {
				in.Skip()
				out.SurprisePercent = nil
			} else {
				if out.SurprisePercent == nil {
					out.SurprisePercent = new(Decimal)
				}
				(*out.SurprisePercent).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi24(out *jwriter.Writer, in EarningsInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Date != "" {
		const prefix string = ",\"date\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	if in.ReportDate != "" {
		const prefix string = ",\"reportDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReportDate))
	}
	if in.EpsActual != nil {
		const prefix string = ",\"epsActual\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsActual).MarshalEasyJSON(out)
	}
	if in.EpsEstimate != nil {
		const prefix string = ",\"epsEstimate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsEstimate).MarshalEasyJSON(out)
	}
	if in.EpsDifference != nil {
		const prefix string = ",\"epsDifference\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsDifference).MarshalEasyJSON(out)
	}
	if in.SurprisePercent != nil {
		const prefix string = ",\"surprisePercent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SurprisePercent).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EarningsInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EarningsInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EarningsInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EarningsInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi24(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi25(in *jlexer.Lexer, out *EarningsEstimateInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "period":
			out.Period = string(in.String())
		case "growth":
			if in.IsNull() {
				in.Skip()
				out.Growth = nil
			} else {
				if out.Growth == nil {
					out.Growth = new(Decimal)
				}
				(*out.Growth).UnmarshalEasyJSON(in)
			}
		case "earningsEstimateAvg":
			if in.IsNull() {
				in.Skip()
				out.EarningsEstimateAvg = nil
			} else {
				if out.EarningsEstimateAvg == nil {
					out.EarningsEstimateAvg = new(Decimal)
				}
				(*out.EarningsEstimateAvg).UnmarshalEasyJSON(in)
			}
		case "earningsEstimateLow":
			if in.IsNull() {
				in.Skip()
				out.EarningsEstimateLow = nil
			} else {
				if out.EarningsEstimateLow == nil {
					out.EarningsEstimateLow = new(Decimal)
				}
				(*out.EarningsEstimateLow).UnmarshalEasyJSON(in)
			}
		case "earningsEstimateHigh":
			if in.IsNull() {
				in.Skip()
				out.EarningsEstimateHigh = nil
			} else {
				if out.EarningsEstimateHigh == nil {
					out.EarningsEstimateHigh = new(Decimal)
				}
				(*out.EarningsEstimateHigh).UnmarshalEasyJSON(in)
			}
		case "earningsEstimateYearAgoEps":
			if in.IsNull() {
				in.Skip()
				out.EarningsEstimateYearAgoEps = nil
			} else {
				if out.EarningsEstimateYearAgoEps == nil {
					out.EarningsEstimateYearAgoEps = new(Decimal)
				}
				(*out.EarningsEstimateYearAgoEps).UnmarshalEasyJSON(in)
			}
		case "earningsEstimateNumberOfAnalysts":
			if in.IsNull() {
				in.Skip()
				out.EarningsEstimateNumberOfAnalysts = nil
			} else {
				if out.EarningsEstimateNumberOfAnalysts == nil {
					out.EarningsEstimateNumberOfAnalysts = new(Decimal)
				}
				(*out.EarningsEstimateNumberOfAnalysts).UnmarshalEasyJSON(in)
			}
		case "earningsEstimateGrowth":
			if in.IsNull() {
				in.Skip()
				out.EarningsEstimateGrowth = nil
			} else {
				if out.EarningsEstimateGrowth == nil {
					out.EarningsEstimateGrowth = new(Decimal)
				}
				(*out.EarningsEstimateGrowth).UnmarshalEasyJSON(in)
			}
		case "revenueEstimateAvg":
			if in.IsNull() {
				in.Skip()
				out.RevenueEstimateAvg = nil
			} else {
				if out.RevenueEstimateAvg == nil {
					out.RevenueEstimateAvg = new(Decimal)
				}
				(*out.RevenueEstimateAvg).UnmarshalEasyJSON(in)
			}
		case "revenueEstimateLow":
			if in.IsNull() {
				in.Skip()
				out.RevenueEstimateLow = nil
			} else {
				if out.RevenueEstimateLow == nil {
					out.RevenueEstimateLow = new(Decimal)
				}
				(*out.RevenueEstimateLow).UnmarshalEasyJSON(in)
			}
		case "revenueEstimateHigh":
			if in.IsNull() {
				in.Skip()
				out.RevenueEstimateHigh = nil
			} else {
				if out.RevenueEstimateHigh == nil {
					out.RevenueEstimateHigh = new(Decimal)
				}
				(*out.RevenueEstimateHigh).UnmarshalEasyJSON(in)
			}
		case "revenueEstimateYearAgoEps":
			if in.IsNull() {
				in.Skip()
				out.RevenueEstimateYearAgoEps = nil
			} else {
				if out.RevenueEstimateYearAgoEps == nil {
					out.RevenueEstimateYearAgoEps = new(Decimal)
				}
				(*out.RevenueEstimateYearAgoEps).UnmarshalEasyJSON(in)
			}
		case "revenueEstimateNumberOfAnalysts":
			if in.IsNull() {
				in.Skip()
				out.RevenueEstimateNumberOfAnalysts = nil
			} else {
				if out.RevenueEstimateNumberOfAnalysts == nil {
					out.RevenueEstimateNumberOfAnalysts = new(Decimal)
				}
				(*out.RevenueEstimateNumberOfAnalysts).UnmarshalEasyJSON(in)
			}
		case "revenueEstimateGrowth":
			if in.IsNull() {
				in.Skip()
				out.RevenueEstimateGrowth = nil
			} else {
				if out.RevenueEstimateGrowth == nil {
					out.RevenueEstimateGrowth = new(Decimal)
				}
				(*out.RevenueEstimateGrowth).UnmarshalEasyJSON(in)
			}
		case "epsTrendCurrent":
			if in.IsNull() {
				in.Skip()
				out.EpsTrendCurrent = nil
			} else {
				if out.EpsTrendCurrent == nil {
					out.EpsTrendCurrent = new(Decimal)
				}
				(*out.EpsTrendCurrent).UnmarshalEasyJSON(in)
			}
		case "epsTrend7daysAgo":
			if in.IsNull() {
				in.Skip()
				out.EpsTrend7DaysAgo = nil
			} else {
				if out.EpsTrend7DaysAgo == nil {
					out.EpsTrend7DaysAgo = new(Decimal)
				}
				(*out.EpsTrend7DaysAgo).UnmarshalEasyJSON(in)
			}
		case "epsTrend30daysAgo":
			if in.IsNull() {
				in.Skip()
				out.EpsTrend30DaysAgo = nil
			} else {
				if out.EpsTrend30DaysAgo == nil {
					out.EpsTrend30DaysAgo = new(Decimal)
				}
				(*out.EpsTrend30DaysAgo).UnmarshalEasyJSON(in)
			}
		case "epsTrend60daysAgo":
			if in.IsNull() {
				in.Skip()
				out.EpsTrend60DaysAgo = nil
			} else {
				if out.EpsTrend60DaysAgo == nil {
					out.EpsTrend60DaysAgo = new(Decimal)
				}
				(*out.EpsTrend60DaysAgo).UnmarshalEasyJSON(in)
			}
		case "epsTrend90daysAgo":
			if in.IsNull() {
				in.Skip()
				out.EpsTrend90DaysAgo = nil
			} else {
				if out.EpsTrend90DaysAgo == nil {
					out.EpsTrend90DaysAgo = new(Decimal)
				}
				(*out.EpsTrend90DaysAgo).UnmarshalEasyJSON(in)
			}
		case "epsRevisionsUpLast7days":
			if in.IsNull() {
				in.Skip()
				out.EpsRevisionsUpLast7Days = nil
			} else {
				if out.EpsRevisionsUpLast7Days == nil {
					out.EpsRevisionsUpLast7Days = new(Decimal)
				}
				(*out.EpsRevisionsUpLast7Days).UnmarshalEasyJSON(in)
			}
		case "epsRevisionsUpLast30days":
			if in.IsNull() {
				in.Skip()
				out.EpsRevisionsUpLast30Days = nil
			} else {
				if out.EpsRevisionsUpLast30Days == nil {
					out.EpsRevisionsUpLast30Days = new(Decimal)
				}
				(*out.EpsRevisionsUpLast30Days).UnmarshalEasyJSON(in)
			}
		case "epsRevisionsDownLast30days":
			if in.IsNull() {
				in.Skip()
				out.EpsRevisionsDownLast30Days = nil
			} else {
				if out.EpsRevisionsDownLast30Days == nil {
					out.EpsRevisionsDownLast30Days = new(Decimal)
				}
				(*out.EpsRevisionsDownLast30Days).UnmarshalEasyJSON(in)
			}
		case "epsRevisionsDownLast90days":
			if in.IsNull() {
				in.Skip()
				out.EpsRevisionsDownLast90Days = nil
			} else {
				if out.EpsRevisionsDownLast90Days == nil {
					out.EpsRevisionsDownLast90Days = new(Decimal)
				}
				(*out.EpsRevisionsDownLast90Days).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi25(out *jwriter.Writer, in EarningsEstimateInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Date != "" {
		const prefix string = ",\"date\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	if in.Period != "" {
		const prefix string = ",\"period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Period))
	}
	if in.Growth != nil {
		const prefix string = ",\"growth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Growth).MarshalEasyJSON(out)
	}
	if in.EarningsEstimateAvg != nil {
		const prefix string = ",\"earningsEstimateAvg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EarningsEstimateAvg).MarshalEasyJSON(out)
	}
	if in.EarningsEstimateLow != nil {
		const prefix string = ",\"earningsEstimateLow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EarningsEstimateLow).MarshalEasyJSON(out)
	}
	if in.EarningsEstimateHigh != nil {
		const prefix string = ",\"earningsEstimateHigh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EarningsEstimateHigh).MarshalEasyJSON(out)
	}
	if in.EarningsEstimateYearAgoEps != nil {
		const prefix string = ",\"earningsEstimateYearAgoEps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EarningsEstimateYearAgoEps).MarshalEasyJSON(out)
	}
	if in.EarningsEstimateNumberOfAnalysts != nil {
		const prefix string = ",\"earningsEstimateNumberOfAnalysts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EarningsEstimateNumberOfAnalysts).MarshalEasyJSON(out)
	}
	if in.EarningsEstimateGrowth != nil {
		const prefix string = ",\"earningsEstimateGrowth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EarningsEstimateGrowth).MarshalEasyJSON(out)
	}
	if in.RevenueEstimateAvg != nil {
		const prefix string = ",\"revenueEstimateAvg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RevenueEstimateAvg).MarshalEasyJSON(out)
	}
	if in.RevenueEstimateLow != nil {
		const prefix string = ",\"revenueEstimateLow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RevenueEstimateLow).MarshalEasyJSON(out)
	}
	if in.RevenueEstimateHigh != nil {
		const prefix string = ",\"revenueEstimateHigh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RevenueEstimateHigh).MarshalEasyJSON(out)
	}
	if in.RevenueEstimateYearAgoEps != nil {
		const prefix string = ",\"revenueEstimateYearAgoEps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RevenueEstimateYearAgoEps).MarshalEasyJSON(out)
	}
	if in.RevenueEstimateNumberOfAnalysts != nil {
		const prefix string = ",\"revenueEstimateNumberOfAnalysts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RevenueEstimateNumberOfAnalysts).MarshalEasyJSON(out)
	}
	if in.RevenueEstimateGrowth != nil {
		const prefix string = ",\"revenueEstimateGrowth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RevenueEstimateGrowth).MarshalEasyJSON(out)
	}
	if in.EpsTrendCurrent != nil {
		const prefix string = ",\"epsTrendCurrent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsTrendCurrent).MarshalEasyJSON(out)
	}
	if in.EpsTrend7DaysAgo != nil {
		const prefix string = ",\"epsTrend7daysAgo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsTrend7DaysAgo).MarshalEasyJSON(out)
	}
	if in.EpsTrend30DaysAgo != nil {
		const prefix string = ",\"epsTrend30daysAgo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsTrend30DaysAgo).MarshalEasyJSON(out)
	}
	if in.EpsTrend60DaysAgo != nil {
		const prefix string = ",\"epsTrend60daysAgo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsTrend60DaysAgo).MarshalEasyJSON(out)
	}
	if in.EpsTrend90DaysAgo != nil {
		const prefix string = ",\"epsTrend90daysAgo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsTrend90DaysAgo).MarshalEasyJSON(out)
	}
	if in.EpsRevisionsUpLast7Days != nil {
		const prefix string = ",\"epsRevisionsUpLast7days\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsRevisionsUpLast7Days).MarshalEasyJSON(out)
	}
	if in.EpsRevisionsUpLast30Days != nil {
		const prefix string = ",\"epsRevisionsUpLast30days\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsRevisionsUpLast30Days).MarshalEasyJSON(out)
	}
	if in.EpsRevisionsDownLast30Days != nil {
		const prefix string = ",\"epsRevisionsDownLast30days\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsRevisionsDownLast30Days).MarshalEasyJSON(out)
	}
	if in.EpsRevisionsDownLast90Days != nil {
		const prefix string = ",\"epsRevisionsDownLast90days\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EpsRevisionsDownLast90Days).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EarningsEstimateInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EarningsEstimateInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EarningsEstimateInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EarningsEstimateInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi25(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi26(in *jlexer.Lexer, out *Earnings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "History":
			(out.History).UnmarshalEasyJSON(in)
		case "Trend":
			(out.Trend).UnmarshalEasyJSON(in)
		case "Annual":
			(out.Annual).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi26(out *jwriter.Writer, in Earnings) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.History) != 0 {
		const prefix string = ",\"History\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v29, v30 := range in.History {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Trend) != 0 {
		const prefix string = ",\"Trend\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v31, v32 := range in.Trend {
				if v31 > 0 {
					out.RawByte(',')
				}
				(v32).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Annual) != 0 {
		const prefix string = ",\"Annual\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.Annual {
				if v33 > 0 {
					out.RawByte(',')
				}
				(v34).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Earnings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Earnings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Earnings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Earnings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi26(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi27(in *jlexer.Lexer, out *ETFData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ISIN":
			out.ISIN = string(in.String())
		case "Company_Name":
			out.CompanyName = string(in.String())
		case "Company_URL":
			out.CompanyURL = string(in.String())
		case "ETF_URL":
			out.ETFURL = string(in.String())
		case "Yield":
			out.Yield = string(in.String())
		case "Dividend_Paying_Frequency":
			out.DividendPayingFrequency = string(in.String())
		case "Inception_Date":
			out.InceptionDate = string(in.String())
		case "Max_Annual_Mgmt_Charge":
			out.MaxAnnualMgmtCharge = string(in.String())
		case "Ongoing_Charge":
			out.OngoingCharge = string(in.String())
		case "Date_Ongoing_Charge":
			out.DateOngoingCharge = string(in.String())
		case "NetExpenseRatio":
			out.NetExpenseRatio = string(in.String())
		case "AnnualHoldingsTurnover":
			out.AnnualHoldingsTurnover = string(in.String())
		case "TotalAssets":
			out.TotalAssets = string(in.String())
		case "Average_Mkt_Cap_Mil":
			out.AverageMktCapMil = string(in.String())
		case "Asset_Allocation":
			(out.AssetAllocation).UnmarshalEasyJSON(in)
		case "World_Regions":
			(out.WorldRegions).UnmarshalEasyJSON(in)
		case "Sector_Weights":
			(out.SectorWeights).UnmarshalEasyJSON(in)
		case "Top_10_Holdings":
			(out.Top10Holdings).UnmarshalEasyJSON(in)
		case "Holdings":
			(out.Holdings).UnmarshalEasyJSON(in)
		case "MorningStar":
			(out.MorningStar).UnmarshalEasyJSON(in)
		case "Performance":
			(out.Performance).UnmarshalEasyJSON(in)
		case "Market_Capitalisation":
			if m, ok := out.MarketCapitalisation.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MarketCapitalisation.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MarketCapitalisation = in.Interface()
			}
		case "Valuations_Growth":
			if m, ok := out.ValuationsGrowth.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ValuationsGrowth.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ValuationsGrowth = in.Interface()
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi27(out *jwriter.Writer, in ETFData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ISIN != "" {
		const prefix string = ",\"ISIN\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ISIN))
	}
	if in.CompanyName != "" {
		const prefix string = ",\"Company_Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompanyName))
	}
	if in.CompanyURL != "" {
		const prefix string = ",\"Company_URL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompanyURL))
	}
	if in.ETFURL != "" {
		const prefix string = ",\"ETF_URL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ETFURL))
	}
	if in.Yield != "" {
		const prefix string = ",\"Yield\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Yield))
	}
	if in.DividendPayingFrequency != "" {
		const prefix string = ",\"Dividend_Paying_Frequency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DividendPayingFrequency))
	}
	if in.InceptionDate != "" {
		const prefix string = ",\"Inception_Date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InceptionDate))
	}
	if in.MaxAnnualMgmtCharge != "" {
		const prefix string = ",\"Max_Annual_Mgmt_Charge\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MaxAnnualMgmtCharge))
	}
	if in.OngoingCharge != "" {
		const prefix string = ",\"Ongoing_Charge\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OngoingCharge))
	}
	if in.DateOngoingCharge != "" {
		const prefix string = ",\"Date_Ongoing_Charge\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DateOngoingCharge))
	}
	if in.NetExpenseRatio != "" {
		const prefix string = ",\"NetExpenseRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetExpenseRatio))
	}
	if in.AnnualHoldingsTurnover != "" {
		const prefix string = ",\"AnnualHoldingsTurnover\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AnnualHoldingsTurnover))
	}
	if in.TotalAssets != "" {
		const prefix string = ",\"TotalAssets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TotalAssets))
	}
	if in.AverageMktCapMil != "" {
		const prefix string = ",\"Average_Mkt_Cap_Mil\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AverageMktCapMil))
	}
	if len(in.AssetAllocation) != 0 {
		const prefix string = ",\"Asset_Allocation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.AssetAllocation {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.WorldRegions) != 0 {
		const prefix string = ",\"World_Regions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v37, v38 := range in.WorldRegions {
				if v37 > 0 {
					out.RawByte(',')
				}
				(v38).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.SectorWeights) != 0 {
		const prefix string = ",\"Sector_Weights\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v39, v40 := range in.SectorWeights {
				if v39 > 0 {
					out.RawByte(',')
				}
				(v40).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Top10Holdings) != 0 {
		const prefix string = ",\"Top_10_Holdings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.Top10Holdings {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Holdings) != 0 {
		const prefix string = ",\"Holdings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v43, v44 := range in.Holdings {
				if v43 > 0 {
					out.RawByte(',')
				}
				(v44).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"MorningStar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.MorningStar).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Performance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Performance).MarshalEasyJSON(out)
	}
	if in.MarketCapitalisation != nil {
		const prefix string = ",\"Market_Capitalisation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.MarketCapitalisation.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MarketCapitalisation.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MarketCapitalisation))
		}
	}
	if in.ValuationsGrowth != nil {
		const prefix string = ",\"Valuations_Growth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.ValuationsGrowth.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ValuationsGrowth.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ValuationsGrowth))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ETFData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ETFData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ETFData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ETFData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi27(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi28(in *jlexer.Lexer, out *Component) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = string(in.String())
		case "Exchange":
			out.Exchange = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Sector":
			out.Sector = string(in.String())
		case "Industry":
			out.Industry = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi28(out *jwriter.Writer, in Component) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != "" {
		const prefix string = ",\"Code\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	if in.Exchange != "" {
		const prefix string = ",\"Exchange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Exchange))
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Sector != "" {
		const prefix string = ",\"Sector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sector))
	}
	if in.Industry != "" {
		const prefix string = ",\"Industry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Industry))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Component) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Component) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Component) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Component) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi28(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi29(in *jlexer.Lexer, out *CashFlowInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "filing_date":
			if in.IsNull() {
				in.Skip()
				out.FilingDate = nil
			} else {
				if out.FilingDate == nil {
					out.FilingDate = new(string)
				}
				*out.FilingDate = string(in.String())
			}
		case "investments":
			if in.IsNull() {
				in.Skip()
				out.Investments = nil
			} else {
				if out.Investments == nil {
					out.Investments = new(Decimal)
				}
				(*out.Investments).UnmarshalEasyJSON(in)
			}
		case "changeToLiabilities":
			if in.IsNull() {
				in.Skip()
				out.ChangeToLiabilities = nil
			} else {
				if out.ChangeToLiabilities == nil {
					out.ChangeToLiabilities = new(Decimal)
				}
				(*out.ChangeToLiabilities).UnmarshalEasyJSON(in)
			}
		case "totalCashflowsFromInvestingActivities":
			if in.IsNull() {
				in.Skip()
				out.TotalCashflowsFromInvestingActivities = nil
			} else {
				if out.TotalCashflowsFromInvestingActivities == nil {
					out.TotalCashflowsFromInvestingActivities = new(Decimal)
				}
				(*out.TotalCashflowsFromInvestingActivities).UnmarshalEasyJSON(in)
			}
		case "netBorrowings":
			if in.IsNull() {
				in.Skip()
				out.NetBorrowings = nil
			} else {
				if out.NetBorrowings == nil {
					out.NetBorrowings = new(Decimal)
				}
				(*out.NetBorrowings).UnmarshalEasyJSON(in)
			}
		case "totalCashFromFinancingActivities":
			if in.IsNull() {
				in.Skip()
				out.TotalCashFromFinancingActivities = nil
			} else {
				if out.TotalCashFromFinancingActivities == nil {
					out.TotalCashFromFinancingActivities = new(Decimal)
				}
				(*out.TotalCashFromFinancingActivities).UnmarshalEasyJSON(in)
			}
		case "changeToOperatingActivities":
			if in.IsNull() {
				in.Skip()
				out.ChangeToOperatingActivities = nil
			} else {
				if out.ChangeToOperatingActivities == nil {
					out.ChangeToOperatingActivities = new(Decimal)
				}
				(*out.ChangeToOperatingActivities).UnmarshalEasyJSON(in)
			}
		case "netIncome":
			if in.IsNull() {
				in.Skip()
				out.NetIncome = nil
			} else {
				if out.NetIncome == nil {
					out.NetIncome = new(Decimal)
				}
				(*out.NetIncome).UnmarshalEasyJSON(in)
			}
		case "changeInCash":
			if in.IsNull() {
				in.Skip()
				out.ChangeInCash = nil
			} else {
				if out.ChangeInCash == nil {
					out.ChangeInCash = new(Decimal)
				}
				(*out.ChangeInCash).UnmarshalEasyJSON(in)
			}
		case "totalCashFromOperatingActivities":
			if in.IsNull() {
				in.Skip()
				out.TotalCashFromOperatingActivities = nil
			} else {
				if out.TotalCashFromOperatingActivities == nil {
					out.TotalCashFromOperatingActivities = new(Decimal)
				}
				(*out.TotalCashFromOperatingActivities).UnmarshalEasyJSON(in)
			}
		case "depreciation":
			if in.IsNull() {
				in.Skip()
				out.Depreciation = nil
			} else {
				if out.Depreciation == nil {
					out.Depreciation = new(Decimal)
				}
				(*out.Depreciation).UnmarshalEasyJSON(in)
			}
		case "otherCashflowsFromInvestingActivities":
			if in.IsNull() {
				in.Skip()
				out.OtherCashflowsFromInvestingActivities = nil
			} else {
				if out.OtherCashflowsFromInvestingActivities == nil {
					out.OtherCashflowsFromInvestingActivities = new(Decimal)
				}
				(*out.OtherCashflowsFromInvestingActivities).UnmarshalEasyJSON(in)
			}
		case "dividendsPaid":
			if in.IsNull() {
				in.Skip()
				out.DividendsPaid = nil
			} else {
				if out.DividendsPaid == nil {
					out.DividendsPaid = new(Decimal)
				}
				(*out.DividendsPaid).UnmarshalEasyJSON(in)
			}
		case "changeToInventory":
			if in.IsNull() {
				in.Skip()
				out.ChangeToInventory = nil
			} else {
				if out.ChangeToInventory == nil {
					out.ChangeToInventory = new(Decimal)
				}
				(*out.ChangeToInventory).UnmarshalEasyJSON(in)
			}
		case "changeToAccountReceivables":
			if in.IsNull() {
				in.Skip()
				out.ChangeToAccountReceivables = nil
			} else {
				if out.ChangeToAccountReceivables == nil {
					out.ChangeToAccountReceivables = new(Decimal)
				}
				(*out.ChangeToAccountReceivables).UnmarshalEasyJSON(in)
			}
		case "salePurchaseOfStock":
			if in.IsNull() {
				in.Skip()
				out.SalePurchaseOfStock = nil
			} else {
				if out.SalePurchaseOfStock == nil {
					out.SalePurchaseOfStock = new(Decimal)
				}
				(*out.SalePurchaseOfStock).UnmarshalEasyJSON(in)
			}
		case "otherCashflowsFromFinancingActivities":
			if in.IsNull() {
				in.Skip()
				out.OtherCashflowsFromFinancingActivities = nil
			} else {
				if out.OtherCashflowsFromFinancingActivities == nil {
					out.OtherCashflowsFromFinancingActivities = new(Decimal)
				}
				(*out.OtherCashflowsFromFinancingActivities).UnmarshalEasyJSON(in)
			}
		case "changeToNetincome":
			if in.IsNull() {
				in.Skip()
				out.ChangeToNetincome = nil
			} else {
				if out.ChangeToNetincome == nil {
					out.ChangeToNetincome = new(Decimal)
				}
				(*out.ChangeToNetincome).UnmarshalEasyJSON(in)
			}
		case "capitalExpenditures":
			if in.IsNull() {
				in.Skip()
				out.CapitalExpenditures = nil
			} else {
				if out.CapitalExpenditures == nil {
					out.CapitalExpenditures = new(Decimal)
				}
				(*out.CapitalExpenditures).UnmarshalEasyJSON(in)
			}
		case "changeReceivables":
			if in.IsNull() {
				in.Skip()
				out.ChangeReceivables = nil
			} else {
				if out.ChangeReceivables == nil {
					out.ChangeReceivables = new(Decimal)
				}
				(*out.ChangeReceivables).UnmarshalEasyJSON(in)
			}
		case "cashFlowsOtherOperating":
			if in.IsNull() {
				in.Skip()
				out.CashFlowsOtherOperating = nil
			} else {
				if out.CashFlowsOtherOperating == nil {
					out.CashFlowsOtherOperating = new(Decimal)
				}
				(*out.CashFlowsOtherOperating).UnmarshalEasyJSON(in)
			}
		case "exchangeRateChanges":
			if in.IsNull() {
				in.Skip()
				out.ExchangeRateChanges = nil
			} else {
				if out.ExchangeRateChanges == nil {
					out.ExchangeRateChanges = new(Decimal)
				}
				(*out.ExchangeRateChanges).UnmarshalEasyJSON(in)
			}
		case "cashAndCashEquivalentsChanges":
			if in.IsNull() {
				in.Skip()
				out.CashAndCashEquivalentsChanges = nil
			} else {
				if out.CashAndCashEquivalentsChanges == nil {
					out.CashAndCashEquivalentsChanges = new(Decimal)
				}
				(*out.CashAndCashEquivalentsChanges).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi29(out *jwriter.Writer, in CashFlowInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Date != "" {
		const prefix string = ",\"date\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	if in.FilingDate != nil {
		const prefix string = ",\"filing_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FilingDate))
	}
	if in.Investments != nil {
		const prefix string = ",\"investments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Investments).MarshalEasyJSON(out)
	}
	if in.ChangeToLiabilities != nil {
		const prefix string = ",\"changeToLiabilities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ChangeToLiabilities).MarshalEasyJSON(out)
	}
	if in.TotalCashflowsFromInvestingActivities != nil {
		const prefix string = ",\"totalCashflowsFromInvestingActivities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalCashflowsFromInvestingActivities).MarshalEasyJSON(out)
	}
	if in.NetBorrowings != nil {
		const prefix string = ",\"netBorrowings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NetBorrowings).MarshalEasyJSON(out)
	}
	if in.TotalCashFromFinancingActivities != nil {
		const prefix string = ",\"totalCashFromFinancingActivities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalCashFromFinancingActivities).MarshalEasyJSON(out)
	}
	if in.ChangeToOperatingActivities != nil {
		const prefix string = ",\"changeToOperatingActivities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ChangeToOperatingActivities).MarshalEasyJSON(out)
	}
	if in.NetIncome != nil {
		const prefix string = ",\"netIncome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NetIncome).MarshalEasyJSON(out)
	}
	if in.ChangeInCash != nil {
		const prefix string = ",\"changeInCash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ChangeInCash).MarshalEasyJSON(out)
	}
	if in.TotalCashFromOperatingActivities != nil {
		const prefix string = ",\"totalCashFromOperatingActivities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalCashFromOperatingActivities).MarshalEasyJSON(out)
	}
	if in.Depreciation != nil {
		const prefix string = ",\"depreciation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Depreciation).MarshalEasyJSON(out)
	}
	if in.OtherCashflowsFromInvestingActivities != nil {
		const prefix string = ",\"otherCashflowsFromInvestingActivities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OtherCashflowsFromInvestingActivities).MarshalEasyJSON(out)
	}
	if in.DividendsPaid != nil {
		const prefix string = ",\"dividendsPaid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DividendsPaid).MarshalEasyJSON(out)
	}
	if in.ChangeToInventory != nil {
		const prefix string = ",\"changeToInventory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ChangeToInventory).MarshalEasyJSON(out)
	}
	if in.ChangeToAccountReceivables != nil {
		const prefix string = ",\"changeToAccountReceivables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ChangeToAccountReceivables).MarshalEasyJSON(out)
	}
	if in.SalePurchaseOfStock != nil {
		const prefix string = ",\"salePurchaseOfStock\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SalePurchaseOfStock).MarshalEasyJSON(out)
	}
	if in.OtherCashflowsFromFinancingActivities != nil {
		const prefix string = ",\"otherCashflowsFromFinancingActivities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OtherCashflowsFromFinancingActivities).MarshalEasyJSON(out)
	}
	if in.ChangeToNetincome != nil {
		const prefix string = ",\"changeToNetincome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ChangeToNetincome).MarshalEasyJSON(out)
	}
	if in.CapitalExpenditures != nil {
		const prefix string = ",\"capitalExpenditures\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CapitalExpenditures).MarshalEasyJSON(out)
	}
	if in.ChangeReceivables != nil {
		const prefix string = ",\"changeReceivables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ChangeReceivables).MarshalEasyJSON(out)
	}
	if in.CashFlowsOtherOperating != nil {
		const prefix string = ",\"cashFlowsOtherOperating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CashFlowsOtherOperating).MarshalEasyJSON(out)
	}
	if in.ExchangeRateChanges != nil {
		const prefix string = ",\"exchangeRateChanges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ExchangeRateChanges).MarshalEasyJSON(out)
	}
	if in.CashAndCashEquivalentsChanges != nil {
		const prefix string = ",\"cashAndCashEquivalentsChanges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CashAndCashEquivalentsChanges).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CashFlowInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CashFlowInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CashFlowInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CashFlowInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi29(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi30(in *jlexer.Lexer, out *CashFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency_symbol":
			out.CurrencySymbol = string(in.String())
		case "quarterly":
			(out.Quarterly).UnmarshalEasyJSON(in)
		case "yearly":
			(out.Yearly).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi30(out *jwriter.Writer, in CashFlow) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CurrencySymbol != "" {
		const prefix string = ",\"currency_symbol\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CurrencySymbol))
	}
	if len(in.Quarterly) != 0 {
		const prefix string = ",\"quarterly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v45, v46 := range in.Quarterly {
				if v45 > 0 {
					out.RawByte(',')
				}
				(v46).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Yearly) != 0 {
		const prefix string = ",\"yearly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.Yearly {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CashFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CashFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CashFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CashFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi30(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi31(in *jlexer.Lexer, out *BalanceSheetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "filing_date":
			if in.IsNull() {
				in.Skip()
				out.FilingDate = nil
			} else {
				if out.FilingDate == nil {
					out.FilingDate = new(string)
				}
				*out.FilingDate = string(in.String())
			}
		case "intangibleAssets":
			if in.IsNull() {
				in.Skip()
				out.IntangibleAssets = nil
			} else {
				if out.IntangibleAssets == nil {
					out.IntangibleAssets = new(Decimal)
				}
				(*out.IntangibleAssets).UnmarshalEasyJSON(in)
			}
		case "totalLiab":
			if in.IsNull() {
				in.Skip()
				out.TotalLiab = nil
			} else {
				if out.TotalLiab == nil {
					out.TotalLiab = new(Decimal)
				}
				(*out.TotalLiab).UnmarshalEasyJSON(in)
			}
		case "totalStockholderEquity":
			if in.IsNull() {
				in.Skip()
				out.TotalStockholderEquity = nil
			} else {
				if out.TotalStockholderEquity == nil {
					out.TotalStockholderEquity = new(Decimal)
				}
				(*out.TotalStockholderEquity).UnmarshalEasyJSON(in)
			}
		case "deferredLongTermLiab":
			if in.IsNull() {
				in.Skip()
				out.DeferredLongTermLiab = nil
			} else {
				if out.DeferredLongTermLiab == nil {
					out.DeferredLongTermLiab = new(Decimal)
				}
				(*out.DeferredLongTermLiab).UnmarshalEasyJSON(in)
			}
		case "otherCurrentLiab":
			if in.IsNull() {
				in.Skip()
				out.OtherCurrentLiab = nil
			} else {
				if out.OtherCurrentLiab == nil {
					out.OtherCurrentLiab = new(Decimal)
				}
				(*out.OtherCurrentLiab).UnmarshalEasyJSON(in)
			}
		case "totalAssets":
			if in.IsNull() {
				in.Skip()
				out.TotalAssets = nil
			} else {
				if out.TotalAssets == nil {
					out.TotalAssets = new(Decimal)
				}
				(*out.TotalAssets).UnmarshalEasyJSON(in)
			}
		case "commonStock":
			if in.IsNull() {
				in.Skip()
				out.CommonStock = nil
			} else {
				if out.CommonStock == nil {
					out.CommonStock = new(Decimal)
				}
				(*out.CommonStock).UnmarshalEasyJSON(in)
			}
		case "otherCurrentAssets":
			if in.IsNull() {
				in.Skip()
				out.OtherCurrentAssets = nil
			} else {
				if out.OtherCurrentAssets == nil {
					out.OtherCurrentAssets = new(Decimal)
				}
				(*out.OtherCurrentAssets).UnmarshalEasyJSON(in)
			}
		case "retainedEarnings":
			if in.IsNull() {
				in.Skip()
				out.RetainedEarnings = nil
			} else {
				if out.RetainedEarnings == nil {
					out.RetainedEarnings = new(Decimal)
				}
				(*out.RetainedEarnings).UnmarshalEasyJSON(in)
			}
		case "otherLiab":
			if in.IsNull() {
				in.Skip()
				out.OtherLiab = nil
			} else {
				if out.OtherLiab == nil {
					out.OtherLiab = new(Decimal)
				}
				(*out.OtherLiab).UnmarshalEasyJSON(in)
			}
		case "goodWill":
			if in.IsNull() {
				in.Skip()
				out.GoodWill = nil
			} else {
				if out.GoodWill == nil {
					out.GoodWill = new(Decimal)
				}
				(*out.GoodWill).UnmarshalEasyJSON(in)
			}
		case "otherAssets":
			if in.IsNull() {
				in.Skip()
				out.OtherAssets = nil
			} else {
				if out.OtherAssets == nil {
					out.OtherAssets = new(Decimal)
				}
				(*out.OtherAssets).UnmarshalEasyJSON(in)
			}
		case "cash":
			if in.IsNull() {
				in.Skip()
				out.Cash = nil
			} else {
				if out.Cash == nil {
					out.Cash = new(Decimal)
				}
				(*out.Cash).UnmarshalEasyJSON(in)
			}
		case "totalCurrentLiabilities":
			if in.IsNull() {
				in.Skip()
				out.TotalCurrentLiabilities = nil
			} else {
				if out.TotalCurrentLiabilities == nil {
					out.TotalCurrentLiabilities = new(Decimal)
				}
				(*out.TotalCurrentLiabilities).UnmarshalEasyJSON(in)
			}
		case "shortLongTermDebt":
			if in.IsNull() {
				in.Skip()
				out.ShortLongTermDebt = nil
			} else {
				if out.ShortLongTermDebt == nil {
					out.ShortLongTermDebt = new(Decimal)
				}
				(*out.ShortLongTermDebt).UnmarshalEasyJSON(in)
			}
		case "otherStockholderEquity":
			if in.IsNull() {
				in.Skip()
				out.OtherStockholderEquity = nil
			} else {
				if out.OtherStockholderEquity == nil {
					out.OtherStockholderEquity = new(Decimal)
				}
				(*out.OtherStockholderEquity).UnmarshalEasyJSON(in)
			}
		case "propertyPlantEquipment":
			if in.IsNull() {
				in.Skip()
				out.PropertyPlantEquipment = nil
			} else {
				if out.PropertyPlantEquipment == nil {
					out.PropertyPlantEquipment = new(Decimal)
				}
				(*out.PropertyPlantEquipment).UnmarshalEasyJSON(in)
			}
		case "totalCurrentAssets":
			if in.IsNull() {
				in.Skip()
				out.TotalCurrentAssets = nil
			} else {
				if out.TotalCurrentAssets == nil {
					out.TotalCurrentAssets = new(Decimal)
				}
				(*out.TotalCurrentAssets).UnmarshalEasyJSON(in)
			}
		case "longTermInvestments":
			if in.IsNull() {
				in.Skip()
				out.LongTermInvestments = nil
			} else {
				if out.LongTermInvestments == nil {
					out.LongTermInvestments = new(Decimal)
				}
				(*out.LongTermInvestments).UnmarshalEasyJSON(in)
			}
		case "netTangibleAssets":
			if in.IsNull() {
				in.Skip()
				out.NetTangibleAssets = nil
			} else {
				if out.NetTangibleAssets == nil {
					out.NetTangibleAssets = new(Decimal)
				}
				(*out.NetTangibleAssets).UnmarshalEasyJSON(in)
			}
		case "shortTermInvestments":
			if in.IsNull() {
				in.Skip()
				out.ShortTermInvestments = nil
			} else {
				if out.ShortTermInvestments == nil {
					out.ShortTermInvestments = new(Decimal)
				}
				(*out.ShortTermInvestments).UnmarshalEasyJSON(in)
			}
		case "netReceivables":
			if in.IsNull() {
				in.Skip()
				out.NetReceivables = nil
			} else {
				if out.NetReceivables == nil {
					out.NetReceivables = new(Decimal)
				}
				(*out.NetReceivables).UnmarshalEasyJSON(in)
			}
		case "longTermDebt":
			if in.IsNull() {
				in.Skip()
				out.LongTermDebt = nil
			} else {
				if out.LongTermDebt == nil {
					out.LongTermDebt = new(Decimal)
				}
				(*out.LongTermDebt).UnmarshalEasyJSON(in)
			}
		case "inventory":
			if in.IsNull() {
				in.Skip()
				out.Inventory = nil
			} else {
				if out.Inventory == nil {
					out.Inventory = new(Decimal)
				}
				(*out.Inventory).UnmarshalEasyJSON(in)
			}
		case "accountsPayable":
			if in.IsNull() {
				in.Skip()
				out.AccountsPayable = nil
			} else {
				if out.AccountsPayable == nil {
					out.AccountsPayable = new(Decimal)
				}
				(*out.AccountsPayable).UnmarshalEasyJSON(in)
			}
		case "totalPermanentEquity":
			if in.IsNull() {
				in.Skip()
				out.TotalPermanentEquity = nil
			} else {
				if out.TotalPermanentEquity == nil {
					out.TotalPermanentEquity = new(Decimal)
				}
				(*out.TotalPermanentEquity).UnmarshalEasyJSON(in)
			}
		case "noncontrollingInterestInConsolidatedEntity":
			if in.IsNull() {
				in.Skip()
				out.NoncontrollingInterestInConsolidatedEntity = nil
			} else {
				if out.NoncontrollingInterestInConsolidatedEntity == nil {
					out.NoncontrollingInterestInConsolidatedEntity = new(Decimal)
				}
				(*out.NoncontrollingInterestInConsolidatedEntity).UnmarshalEasyJSON(in)
			}
		case "temporaryEquityRedeemableNoncontrollingInterests":
			if in.IsNull() {
				in.Skip()
				out.TemporaryEquityRedeemableNoncontrollingInterests = nil
			} else {
				if out.TemporaryEquityRedeemableNoncontrollingInterests == nil {
					out.TemporaryEquityRedeemableNoncontrollingInterests = new(Decimal)
				}
				(*out.TemporaryEquityRedeemableNoncontrollingInterests).UnmarshalEasyJSON(in)
			}
		case "accumulatedOtherComprehensiveIncome":
			if in.IsNull() {
				in.Skip()
				out.AccumulatedOtherComprehensiveIncome = nil
			} else {
				if out.AccumulatedOtherComprehensiveIncome == nil {
					out.AccumulatedOtherComprehensiveIncome = new(Decimal)
				}
				(*out.AccumulatedOtherComprehensiveIncome).UnmarshalEasyJSON(in)
			}
		case "additionalPaidInCapital":
			if in.IsNull() {
				in.Skip()
				out.AdditionalPaidInCapital = nil
			} else {
				if out.AdditionalPaidInCapital == nil {
					out.AdditionalPaidInCapital = new(Decimal)
				}
				(*out.AdditionalPaidInCapital).UnmarshalEasyJSON(in)
			}
		case "commonStockTotalEquity":
			if in.IsNull() {
				in.Skip()
				out.CommonStockTotalEquity = nil
			} else {
				if out.CommonStockTotalEquity == nil {
					out.CommonStockTotalEquity = new(Decimal)
				}
				(*out.CommonStockTotalEquity).UnmarshalEasyJSON(in)
			}
		case "preferredStockTotalEquity":
			if in.IsNull() {
				in.Skip()
				out.PreferredStockTotalEquity = nil
			} else {
				if out.PreferredStockTotalEquity == nil {
					out.PreferredStockTotalEquity = new(Decimal)
				}
				(*out.PreferredStockTotalEquity).UnmarshalEasyJSON(in)
			}
		case "retainedEarningsTotalEquity":
			if in.IsNull() {
				in.Skip()
				out.RetainedEarningsTotalEquity = nil
			} else {
				if out.RetainedEarningsTotalEquity == nil {
					out.RetainedEarningsTotalEquity = new(Decimal)
				}
				(*out.RetainedEarningsTotalEquity).UnmarshalEasyJSON(in)
			}
		case "treasuryStock":
			if in.IsNull() {
				in.Skip()
				out.TreasuryStock = nil
			} else {
				if out.TreasuryStock == nil {
					out.TreasuryStock = new(Decimal)
				}
				(*out.TreasuryStock).UnmarshalEasyJSON(in)
			}
		case "accumulatedAmortization":
			if in.IsNull() {
				in.Skip()
				out.AccumulatedAmortization = nil
			} else {
				if out.AccumulatedAmortization == nil {
					out.AccumulatedAmortization = new(Decimal)
				}
				(*out.AccumulatedAmortization).UnmarshalEasyJSON(in)
			}
		case "nonCurrrentAssetsOther":
			if in.IsNull() {
				in.Skip()
				out.NonCurrrentAssetsOther = nil
			} else {
				if out.NonCurrrentAssetsOther == nil {
					out.NonCurrrentAssetsOther = new(Decimal)
				}
				(*out.NonCurrrentAssetsOther).UnmarshalEasyJSON(in)
			}
		case "deferredLongTermAssetCharges":
			if in.IsNull() {
				in.Skip()
				out.DeferredLongTermAssetCharges = nil
			} else {
				if out.DeferredLongTermAssetCharges == nil {
					out.DeferredLongTermAssetCharges = new(Decimal)
				}
				(*out.DeferredLongTermAssetCharges).UnmarshalEasyJSON(in)
			}
		case "nonCurrentAssetsTotal":
			if in.IsNull() {
				in.Skip()
				out.NonCurrentAssetsTotal = nil
			} else {
				if out.NonCurrentAssetsTotal == nil {
					out.NonCurrentAssetsTotal = new(Decimal)
				}
				(*out.NonCurrentAssetsTotal).UnmarshalEasyJSON(in)
			}
		case "shortTermDebt":
			if in.IsNull() {
				in.Skip()
				out.ShortTermDebt = nil
			} else {
				if out.ShortTermDebt == nil {
					out.ShortTermDebt = new(Decimal)
				}
				(*out.ShortTermDebt).UnmarshalEasyJSON(in)
			}
		case "capitalLeaseObligations":
			if in.IsNull() {
				in.Skip()
				out.CapitalLeaseObligations = nil
			} else {
				if out.CapitalLeaseObligations == nil {
					out.CapitalLeaseObligations = new(Decimal)
				}
				(*out.CapitalLeaseObligations).UnmarshalEasyJSON(in)
			}
		case "longTermDebtTotal":
			if in.IsNull() {
				in.Skip()
				out.LongTermDebtTotal = nil
			} else {
				if out.LongTermDebtTotal == nil {
					out.LongTermDebtTotal = new(Decimal)
				}
				(*out.LongTermDebtTotal).UnmarshalEasyJSON(in)
			}
		case "nonCurrentLiabilitiesOther":
			if in.IsNull() {
				in.Skip()
				out.NonCurrentLiabilitiesOther = nil
			} else {
				if out.NonCurrentLiabilitiesOther == nil {
					out.NonCurrentLiabilitiesOther = new(Decimal)
				}
				(*out.NonCurrentLiabilitiesOther).UnmarshalEasyJSON(in)
			}
		case "nonCurrentLiabilitiesTotal":
			if in.IsNull() {
				in.Skip()
				out.NonCurrentLiabilitiesTotal = nil
			} else {
				if out.NonCurrentLiabilitiesTotal == nil {
					out.NonCurrentLiabilitiesTotal = new(Decimal)
				}
				(*out.NonCurrentLiabilitiesTotal).UnmarshalEasyJSON(in)
			}
		case "negativeGoodwill":
			if in.IsNull() {
				in.Skip()
				out.NegativeGoodwill = nil
			} else {
				if out.NegativeGoodwill == nil {
					out.NegativeGoodwill = new(Decimal)
				}
				(*out.NegativeGoodwill).UnmarshalEasyJSON(in)
			}
		case "warrants":
			if in.IsNull() {
				in.Skip()
				out.Warrants = nil
			} else {
				if out.Warrants == nil {
					out.Warrants = new(Decimal)
				}
				(*out.Warrants).UnmarshalEasyJSON(in)
			}
		case "preferredStockRedeemable":
			if in.IsNull() {
				in.Skip()
				out.PreferredStockRedeemable = nil
			} else {
				if out.PreferredStockRedeemable == nil {
					out.PreferredStockRedeemable = new(Decimal)
				}
				(*out.PreferredStockRedeemable).UnmarshalEasyJSON(in)
			}
		case "capitalSurpluse":
			if in.IsNull() {
				in.Skip()
				out.CapitalSurpluse = nil
			} else {
				if out.CapitalSurpluse == nil {
					out.CapitalSurpluse = new(Decimal)
				}
				(*out.CapitalSurpluse).UnmarshalEasyJSON(in)
			}
		case "liabilitiesAndStockholdersEquity":
			if in.IsNull() {
				in.Skip()
				out.LiabilitiesAndStockholdersEquity = nil
			} else {
				if out.LiabilitiesAndStockholdersEquity == nil {
					out.LiabilitiesAndStockholdersEquity = new(Decimal)
				}
				(*out.LiabilitiesAndStockholdersEquity).UnmarshalEasyJSON(in)
			}
		case "cashAndShortTermInvestments":
			if in.IsNull() {
				in.Skip()
				out.CashAndShortTermInvestments = nil
			} else {
				if out.CashAndShortTermInvestments == nil {
					out.CashAndShortTermInvestments = new(Decimal)
				}
				(*out.CashAndShortTermInvestments).UnmarshalEasyJSON(in)
			}
		case "propertyPlantAndEquipmentGross":
			if in.IsNull() {
				in.Skip()
				out.PropertyPlantAndEquipmentGross = nil
			} else {
				if out.PropertyPlantAndEquipmentGross == nil {
					out.PropertyPlantAndEquipmentGross = new(Decimal)
				}
				(*out.PropertyPlantAndEquipmentGross).UnmarshalEasyJSON(in)
			}
		case "accumulatedDepreciation":
			if in.IsNull() {
				in.Skip()
				out.AccumulatedDepreciation = nil
			} else {
				if out.AccumulatedDepreciation == nil {
					out.AccumulatedDepreciation = new(Decimal)
				}
				(*out.AccumulatedDepreciation).UnmarshalEasyJSON(in)
			}
		case "commonStockSharesOutstanding":
			if in.IsNull() {
				in.Skip()
				out.CommonStockSharesOutstanding = nil
			} else {
				if out.CommonStockSharesOutstanding == nil {
					out.CommonStockSharesOutstanding = new(Decimal)
				}
				(*out.CommonStockSharesOutstanding).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi31(out *jwriter.Writer, in BalanceSheetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Date != "" {
		const prefix string = ",\"date\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	if in.FilingDate != nil {
		const prefix string = ",\"filing_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FilingDate))
	}
	if in.IntangibleAssets != nil {
		const prefix string = ",\"intangibleAssets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IntangibleAssets).MarshalEasyJSON(out)
	}
	if in.TotalLiab != nil {
		const prefix string = ",\"totalLiab\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalLiab).MarshalEasyJSON(out)
	}
	if in.TotalStockholderEquity != nil {
		const prefix string = ",\"totalStockholderEquity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalStockholderEquity).MarshalEasyJSON(out)
	}
	if in.DeferredLongTermLiab != nil {
		const prefix string = ",\"deferredLongTermLiab\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DeferredLongTermLiab).MarshalEasyJSON(out)
	}
	if in.OtherCurrentLiab != nil {
		const prefix string = ",\"otherCurrentLiab\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OtherCurrentLiab).MarshalEasyJSON(out)
	}
	if in.TotalAssets != nil {
		const prefix string = ",\"totalAssets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalAssets).MarshalEasyJSON(out)
	}
	if in.CommonStock != nil {
		const prefix string = ",\"commonStock\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CommonStock).MarshalEasyJSON(out)
	}
	if in.OtherCurrentAssets != nil {
		const prefix string = ",\"otherCurrentAssets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OtherCurrentAssets).MarshalEasyJSON(out)
	}
	if in.RetainedEarnings != nil {
		const prefix string = ",\"retainedEarnings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RetainedEarnings).MarshalEasyJSON(out)
	}
	if in.OtherLiab != nil {
		const prefix string = ",\"otherLiab\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OtherLiab).MarshalEasyJSON(out)
	}
	if in.GoodWill != nil {
		const prefix string = ",\"goodWill\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GoodWill).MarshalEasyJSON(out)
	}
	if in.OtherAssets != nil {
		const prefix string = ",\"otherAssets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OtherAssets).MarshalEasyJSON(out)
	}
	if in.Cash != nil {
		const prefix string = ",\"cash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Cash).MarshalEasyJSON(out)
	}
	if in.TotalCurrentLiabilities != nil {
		const prefix string = ",\"totalCurrentLiabilities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalCurrentLiabilities).MarshalEasyJSON(out)
	}
	if in.ShortLongTermDebt != nil {
		const prefix string = ",\"shortLongTermDebt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShortLongTermDebt).MarshalEasyJSON(out)
	}
	if in.OtherStockholderEquity != nil {
		const prefix string = ",\"otherStockholderEquity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OtherStockholderEquity).MarshalEasyJSON(out)
	}
	if in.PropertyPlantEquipment != nil {
		const prefix string = ",\"propertyPlantEquipment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PropertyPlantEquipment).MarshalEasyJSON(out)
	}
	if in.TotalCurrentAssets != nil {
		const prefix string = ",\"totalCurrentAssets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalCurrentAssets).MarshalEasyJSON(out)
	}
	if in.LongTermInvestments != nil {
		const prefix string = ",\"longTermInvestments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LongTermInvestments).MarshalEasyJSON(out)
	}
	if in.NetTangibleAssets != nil {
		const prefix string = ",\"netTangibleAssets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NetTangibleAssets).MarshalEasyJSON(out)
	}
	if in.ShortTermInvestments != nil {
		const prefix string = ",\"shortTermInvestments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShortTermInvestments).MarshalEasyJSON(out)
	}
	if in.NetReceivables != nil {
		const prefix string = ",\"netReceivables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NetReceivables).MarshalEasyJSON(out)
	}
	if in.LongTermDebt != nil {
		const prefix string = ",\"longTermDebt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LongTermDebt).MarshalEasyJSON(out)
	}
	if in.Inventory != nil {
		const prefix string = ",\"inventory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Inventory).MarshalEasyJSON(out)
	}
	if in.AccountsPayable != nil {
		const prefix string = ",\"accountsPayable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AccountsPayable).MarshalEasyJSON(out)
	}
	if in.TotalPermanentEquity != nil {
		const prefix string = ",\"totalPermanentEquity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TotalPermanentEquity).MarshalEasyJSON(out)
	}
	if in.NoncontrollingInterestInConsolidatedEntity != nil {
		const prefix string = ",\"noncontrollingInterestInConsolidatedEntity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NoncontrollingInterestInConsolidatedEntity).MarshalEasyJSON(out)
	}
	if in.TemporaryEquityRedeemableNoncontrollingInterests != nil {
		const prefix string = ",\"temporaryEquityRedeemableNoncontrollingInterests\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TemporaryEquityRedeemableNoncontrollingInterests).MarshalEasyJSON(out)
	}
	if in.AccumulatedOtherComprehensiveIncome != nil {
		const prefix string = ",\"accumulatedOtherComprehensiveIncome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AccumulatedOtherComprehensiveIncome).MarshalEasyJSON(out)
	}
	if in.AdditionalPaidInCapital != nil {
		const prefix string = ",\"additionalPaidInCapital\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AdditionalPaidInCapital).MarshalEasyJSON(out)
	}
	if in.CommonStockTotalEquity != nil {
		const prefix string = ",\"commonStockTotalEquity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CommonStockTotalEquity).MarshalEasyJSON(out)
	}
	if in.PreferredStockTotalEquity != nil {
		const prefix string = ",\"preferredStockTotalEquity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PreferredStockTotalEquity).MarshalEasyJSON(out)
	}
	if in.RetainedEarningsTotalEquity != nil {
		const prefix string = ",\"retainedEarningsTotalEquity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RetainedEarningsTotalEquity).MarshalEasyJSON(out)
	}
	if in.TreasuryStock != nil {
		const prefix string = ",\"treasuryStock\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TreasuryStock).MarshalEasyJSON(out)
	}
	if in.AccumulatedAmortization != nil {
		const prefix string = ",\"accumulatedAmortization\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AccumulatedAmortization).MarshalEasyJSON(out)
	}
	if in.NonCurrrentAssetsOther != nil {
		const prefix string = ",\"nonCurrrentAssetsOther\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NonCurrrentAssetsOther).MarshalEasyJSON(out)
	}
	if in.DeferredLongTermAssetCharges != nil {
		const prefix string = ",\"deferredLongTermAssetCharges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DeferredLongTermAssetCharges).MarshalEasyJSON(out)
	}
	if in.NonCurrentAssetsTotal != nil {
		const prefix string = ",\"nonCurrentAssetsTotal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NonCurrentAssetsTotal).MarshalEasyJSON(out)
	}
	if in.ShortTermDebt != nil {
		const prefix string = ",\"shortTermDebt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShortTermDebt).MarshalEasyJSON(out)
	}
	if in.CapitalLeaseObligations != nil {
		const prefix string = ",\"capitalLeaseObligations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CapitalLeaseObligations).MarshalEasyJSON(out)
	}
	if in.LongTermDebtTotal != nil {
		const prefix string = ",\"longTermDebtTotal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LongTermDebtTotal).MarshalEasyJSON(out)
	}
	if in.NonCurrentLiabilitiesOther != nil {
		const prefix string = ",\"nonCurrentLiabilitiesOther\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NonCurrentLiabilitiesOther).MarshalEasyJSON(out)
	}
	if in.NonCurrentLiabilitiesTotal != nil {
		const prefix string = ",\"nonCurrentLiabilitiesTotal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NonCurrentLiabilitiesTotal).MarshalEasyJSON(out)
	}
	if in.NegativeGoodwill != nil {
		const prefix string = ",\"negativeGoodwill\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NegativeGoodwill).MarshalEasyJSON(out)
	}
	if in.Warrants != nil {
		const prefix string = ",\"warrants\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Warrants).MarshalEasyJSON(out)
	}
	if in.PreferredStockRedeemable != nil {
		const prefix string = ",\"preferredStockRedeemable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PreferredStockRedeemable).MarshalEasyJSON(out)
	}
	if in.CapitalSurpluse != nil {
		const prefix string = ",\"capitalSurpluse\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CapitalSurpluse).MarshalEasyJSON(out)
	}
	if in.LiabilitiesAndStockholdersEquity != nil {
		const prefix string = ",\"liabilitiesAndStockholdersEquity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LiabilitiesAndStockholdersEquity).MarshalEasyJSON(out)
	}
	if in.CashAndShortTermInvestments != nil {
		const prefix string = ",\"cashAndShortTermInvestments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CashAndShortTermInvestments).MarshalEasyJSON(out)
	}
	if in.PropertyPlantAndEquipmentGross != nil {
		const prefix string = ",\"propertyPlantAndEquipmentGross\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PropertyPlantAndEquipmentGross).MarshalEasyJSON(out)
	}
	if in.AccumulatedDepreciation != nil {
		const prefix string = ",\"accumulatedDepreciation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AccumulatedDepreciation).MarshalEasyJSON(out)
	}
	if in.CommonStockSharesOutstanding != nil {
		const prefix string = ",\"commonStockSharesOutstanding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CommonStockSharesOutstanding).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceSheetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceSheetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceSheetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceSheetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi31(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi32(in *jlexer.Lexer, out *BalanceSheet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency_symbol":
			out.CurrencySymbol = string(in.String())
		case "quarterly":
			(out.Quarterly).UnmarshalEasyJSON(in)
		case "yearly":
			(out.Yearly).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi32(out *jwriter.Writer, in BalanceSheet) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CurrencySymbol != "" {
		const prefix string = ",\"currency_symbol\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CurrencySymbol))
	}
	if len(in.Quarterly) != 0 {
		const prefix string = ",\"quarterly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v49, v50 := range in.Quarterly {
				if v49 > 0 {
					out.RawByte(',')
				}
				(v50).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Yearly) != 0 {
		const prefix string = ",\"yearly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v51, v52 := range in.Yearly {
				if v51 > 0 {
					out.RawByte(',')
				}
				(v52).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceSheet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceSheet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceSheet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceSheet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi32(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi33(in *jlexer.Lexer, out *AssetAllocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = string(in.String())
		case "Net_%":
			if in.IsNull() {
				in.Skip()
				out.Net = nil
			} else {
				if out.Net == nil {
					out.Net = new(Decimal)
				}
				(*out.Net).UnmarshalEasyJSON(in)
			}
		case "Long_%":
			if in.IsNull() {
				in.Skip()
				out.Long = nil
			} else {
				if out.Long == nil {
					out.Long = new(Decimal)
				}
				(*out.Long).UnmarshalEasyJSON(in)
			}
		case "Short_%":
			if in.IsNull() {
				in.Skip()
				out.Short = nil
			} else {
				if out.Short == nil {
					out.Short = new(Decimal)
				}
				(*out.Short).UnmarshalEasyJSON(in)
			}
		case "Category_Average":
			if in.IsNull() {
				in.Skip()
				out.CategoryAverage = nil
			} else {
				if out.CategoryAverage == nil {
					out.CategoryAverage = new(Decimal)
				}
				(*out.CategoryAverage).UnmarshalEasyJSON(in)
			}
		case "Benchmark":
			if in.IsNull() {
				in.Skip()
				out.Benchmark = nil
			} else {
				if out.Benchmark == nil {
					out.Benchmark = new(Decimal)
				}
				(*out.Benchmark).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi33(out *jwriter.Writer, in AssetAllocation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"Type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Net != nil {
		const prefix string = ",\"Net_%\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Net).MarshalEasyJSON(out)
	}
	if in.Long != nil {
		const prefix string = ",\"Long_%\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Long).MarshalEasyJSON(out)
	}
	if in.Short != nil {
		const prefix string = ",\"Short_%\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Short).MarshalEasyJSON(out)
	}
	if in.CategoryAverage != nil {
		const prefix string = ",\"Category_Average\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CategoryAverage).MarshalEasyJSON(out)
	}
	if in.Benchmark != nil {
		const prefix string = ",\"Benchmark\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Benchmark).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AssetAllocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AssetAllocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AssetAllocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AssetAllocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi33(l, v)
}
func easyjsonE48f2accDecodeGithubComGituEodhdapi34(in *jlexer.Lexer, out *Allocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Category":
			out.Category = string(in.String())
		case "Long_%":
			if in.IsNull() {
				in.Skip()
				out.LongPercent = nil
			} else {
				if out.LongPercent == nil {
					out.LongPercent = new(Decimal)
				}
				(*out.LongPercent).UnmarshalEasyJSON(in)
			}
		case "Short_%":
			if in.IsNull() {
				in.Skip()
				out.ShortPercent = nil
			} else {
				if out.ShortPercent == nil {
					out.ShortPercent = new(Decimal)
				}
				(*out.ShortPercent).UnmarshalEasyJSON(in)
			}
		case "Net_Assets_%":
			if in.IsNull() {
				in.Skip()
				out.NetAssetsPercent = nil
			} else {
				if out.NetAssetsPercent == nil {
					out.NetAssetsPercent = new(Decimal)
				}
				(*out.NetAssetsPercent).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE48f2accEncodeGithubComGituEodhdapi34(out *jwriter.Writer, in Allocation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Category != "" {
		const prefix string = ",\"Category\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Category))
	}
	if in.LongPercent != nil {
		const prefix string = ",\"Long_%\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LongPercent).MarshalEasyJSON(out)
	}
	if in.ShortPercent != nil {
		const prefix string = ",\"Short_%\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ShortPercent).MarshalEasyJSON(out)
	}
	if in.NetAssetsPercent != nil {
		const prefix string = ",\"Net_Assets_%\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NetAssetsPercent).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Allocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE48f2accEncodeGithubComGituEodhdapi34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Allocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE48f2accEncodeGithubComGituEodhdapi34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Allocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE48f2accDecodeGithubComGituEodhdapi34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Allocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE48f2accDecodeGithubComGituEodhdapi34(l, v)
}
