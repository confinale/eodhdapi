version: 2.1



commands:
  run-with-cache:
    description: Runs a pattern with fitting cache
    parameters:
      pattern:
        description: "The Pattern."
        type: string
    steps:
      - restore_cache:
          keys:
            - eodhd-cache-{{ .Environment.VCACHE }}-<<parameters.pattern>>-{{ .Branch }}
            - eodhd-cache-{{ .Environment.VCACHE }}-<<parameters.pattern>>
      - run:
          name: Execute <<parameters.pattern>> tests
          command: go test -v ./... -run <<parameters.pattern>>
          no_output_timeout: 30m

      - save_cache:
          key: eodhd-cache-{{ .Environment.VCACHE }}-<<parameters.pattern>>-{{ .Branch }}
          paths:
            - "cache/dividends"

jobs:
  build-lib:
    docker:
      - image: circleci/golang:latest

    environment:
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved
      TEST_ARTIFACTS: /tmp/test-artifacts

    steps:
      - checkout
      - run:
          name: prepare directories
          command: |
            mkdir -p $TEST_RESULTS
            mkdir -p $TEST_ARTIFACTS

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      - run:
          name: download dependencies
          command: go mod download

      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run-with-cache:
          pattern: TestEODhd_FetchFundamentalsSymbol_TestAll

      - run-with-cache:
          pattern: TestEODhd_FetchFundamentalsTicker_TestETFS

      - run-with-cache:
          pattern: TestEODhd_FetchDividends_TestAll

      - run-with-cache:
          pattern: TestEODhd_FetchFundamentals_TestAll

      - run-with-cache:
          pattern: TestEODhd_FetchEOD_TestAll

      - run-with-cache:
          pattern: TestEODhd_FetchEOD_Ticker

      - run-with-cache:
          pattern: TestEODhd_FetchSplits_TestAll

      - run:
          name: Run tests
          # store the results of our tests in the $TEST_RESULTS directory
          command: |
            gotestsum --format=standard-verbose --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- -timeout 25m -coverprofile=cover.out ./...
            go tool cover -html=cover.out -o coverage.html
            mv coverage.html $TEST_ARTIFACTS
          no_output_timeout: 30m

      - store_artifacts: # upload test summary for display in Artifacts
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-artifacts
          destination: test-coverage

workflows:
  build-workflow:
    jobs:
      - build-lib
